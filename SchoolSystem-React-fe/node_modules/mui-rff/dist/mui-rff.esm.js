import MuiAutocomplete from '@mui/material/Autocomplete';
import { useField, Field, FormSpy } from 'react-final-form';
import React from 'react';
import { FormHelperText, FormControl, FormLabel, FormGroup, FormControlLabel, Checkbox, Switch, RadioGroup, Radio, InputLabel, Select as Select$1, MenuItem, TextField as TextField$2 } from '@mui/material';
import TextField$1 from '@mui/material/TextField';
import { DatePicker as DatePicker$1, DateTimePicker as DateTimePicker$1, TimePicker as TimePicker$1 } from '@mui/lab';
import AdapterDateFns from '@mui/lab/AdapterDateFns';
import LocalizationProvider from '@mui/lab/LocalizationProvider';

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
  try {
    var info = gen[key](arg);
    var value = info.value;
  } catch (error) {
    reject(error);
    return;
  }

  if (info.done) {
    resolve(value);
  } else {
    Promise.resolve(value).then(_next, _throw);
  }
}

function _asyncToGenerator(fn) {
  return function () {
    var self = this,
        args = arguments;
    return new Promise(function (resolve, reject) {
      var gen = fn.apply(self, args);

      function _next(value) {
        asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
      }

      function _throw(err) {
        asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
      }

      _next(undefined);
    });
  };
}

function _extends() {
  _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  return _extends.apply(this, arguments);
}

function _objectWithoutPropertiesLoose(source, excluded) {
  if (source == null) return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;

  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0) continue;
    target[key] = source[key];
  }

  return target;
}

function ErrorMessage(_ref) {
  var showError = _ref.showError,
      meta = _ref.meta,
      formHelperTextProps = _ref.formHelperTextProps,
      helperText = _ref.helperText;

  if (showError) {
    return React.createElement(FormHelperText, _extends({}, formHelperTextProps), meta.error || meta.submitError);
  } else if (helperText) {
    return React.createElement(FormHelperText, _extends({}, formHelperTextProps), helperText);
  } else {
    return React.createElement(React.Fragment, null);
  }
}
var config = {
  subscription: {
    error: true,
    submitError: true,
    dirtySinceLastSubmit: true,
    touched: true,
    modified: true
  }
};
var useFieldForErrors = function useFieldForErrors(name) {
  return useField(name, config);
};
var showErrorOnChange = function showErrorOnChange(_ref2) {
  var _ref2$meta = _ref2.meta,
      submitError = _ref2$meta.submitError,
      dirtySinceLastSubmit = _ref2$meta.dirtySinceLastSubmit,
      error = _ref2$meta.error,
      touched = _ref2$meta.touched,
      modified = _ref2$meta.modified;
  return !!((submitError && !dirtySinceLastSubmit || error) && (touched || modified));
};
var showErrorOnBlur = function showErrorOnBlur(_ref3) {
  var _ref3$meta = _ref3.meta,
      submitError = _ref3$meta.submitError,
      dirtySinceLastSubmit = _ref3$meta.dirtySinceLastSubmit,
      error = _ref3$meta.error,
      touched = _ref3$meta.touched;
  return !!((submitError && !dirtySinceLastSubmit || error) && touched);
};

var _excluded$8 = ["name", "fieldProps"],
    _excluded2$8 = ["input", "meta", "options", "label", "required", "multiple", "textFieldProps", "getOptionValue", "showError", "placeholder", "onChange"],
    _excluded3$4 = ["helperText"],
    _excluded4$3 = ["variant"];
function Autocomplete(props) {
  var name = props.name,
      fieldProps = props.fieldProps,
      rest = _objectWithoutPropertiesLoose(props, _excluded$8);

  return React.createElement(Field, _extends({
    name: name,
    render: function render(fieldRenderProps) {
      return React.createElement(AutocompleteWrapper, _extends({}, fieldRenderProps, rest));
    }
  }, fieldProps));
}

function AutocompleteWrapper(props) {
  var _props$input = props.input,
      name = _props$input.name,
      value = _props$input.value,
      onChange = _props$input.onChange,
      meta = props.meta,
      options = props.options,
      label = props.label,
      required = props.required,
      multiple = props.multiple,
      textFieldProps = props.textFieldProps,
      getOptionValue = props.getOptionValue,
      _props$showError = props.showError,
      showError = _props$showError === void 0 ? showErrorOnChange : _props$showError,
      placeholder = props.placeholder,
      onChangeCallback = props.onChange,
      rest = _objectWithoutPropertiesLoose(props, _excluded2$8);

  function getValue(values) {
    if (!getOptionValue) {
      return values;
    } // ternary hell...


    return multiple ? values ? values.map(getOptionValue) : null : values ? getOptionValue(values) : null;
  }

  var helperText = rest.helperText,
      lessrest = _objectWithoutPropertiesLoose(rest, _excluded3$4);

  var _ref = textFieldProps || {},
      variant = _ref.variant,
      restTextFieldProps = _objectWithoutPropertiesLoose(_ref, _excluded4$3); // yuck...


  var defaultValue;

  if (!getOptionValue) {
    defaultValue = value;
  } else if (value) {
    options.forEach(function (option) {
      var optionValue = getOptionValue(option);

      if (multiple) {
        if (!defaultValue) {
          defaultValue = [];
        }

        value.forEach(function (v) {
          if (v === optionValue) {
            defaultValue.push(option);
          }
        });
      } else {
        if (value === optionValue) {
          defaultValue = option;
        }
      }
    });
  }

  var onChangeFunc = function onChangeFunc( // eslint-disable-next-line @typescript-eslint/ban-types
  event, value, reason, details) {
    var gotValue = getValue(value);
    onChange(gotValue);

    if (onChangeCallback) {
      onChangeCallback(event, value, reason, details);
    }
  };

  var error = meta.error,
      submitError = meta.submitError;
  var isError = showError({
    meta: meta
  });
  return React.createElement(MuiAutocomplete, _extends({
    multiple: multiple,
    onChange: onChangeFunc,
    options: options,
    value: defaultValue,
    renderInput: function renderInput(params) {
      var _restTextFieldProps$I, _params$InputProps, _restTextFieldProps$I2, _params$InputProps2, _restTextFieldProps$I3;

      return React.createElement(TextField$1, _extends({
        label: label,
        required: required,
        helperText: isError ? error || submitError : helperText,
        error: isError,
        name: name,
        placeholder: placeholder,
        variant: variant
      }, params, restTextFieldProps, {
        InputProps: _extends({}, params.InputProps, restTextFieldProps.InputProps, ((_restTextFieldProps$I = restTextFieldProps.InputProps) == null ? void 0 : _restTextFieldProps$I.startAdornment) && {
          startAdornment: React.createElement(React.Fragment, null, restTextFieldProps.InputProps.startAdornment, (_params$InputProps = params.InputProps) == null ? void 0 : _params$InputProps.startAdornment)
        }, ((_restTextFieldProps$I2 = restTextFieldProps.InputProps) == null ? void 0 : _restTextFieldProps$I2.endAdornment) && {
          endAdornment: React.createElement(React.Fragment, null, (_params$InputProps2 = params.InputProps) == null ? void 0 : _params$InputProps2.endAdornment, (_restTextFieldProps$I3 = restTextFieldProps.InputProps) == null ? void 0 : _restTextFieldProps$I3.endAdornment)
        }),
        fullWidth: true
      }));
    }
  }, lessrest));
}

var _excluded$7 = ["required", "label", "data", "name", "helperText", "fieldProps", "formControlProps", "formGroupProps", "formLabelProps", "formControlLabelProps", "formHelperTextProps", "showError"],
    _excluded2$7 = ["name", "value", "onChange", "checked"];
function Checkboxes(props) {
  var required = props.required,
      label = props.label,
      data = props.data,
      name = props.name,
      helperText = props.helperText,
      fieldProps = props.fieldProps,
      formControlProps = props.formControlProps,
      formGroupProps = props.formGroupProps,
      formLabelProps = props.formLabelProps,
      formControlLabelProps = props.formControlLabelProps,
      formHelperTextProps = props.formHelperTextProps,
      _props$showError = props.showError,
      showError = _props$showError === void 0 ? showErrorOnChange : _props$showError,
      restCheckboxes = _objectWithoutPropertiesLoose(props, _excluded$7);

  var itemsData = Array.isArray(data) ? data : [data];
  var single = !Array.isArray(data);
  var field = useFieldForErrors(name);
  var isError = showError(field);
  return React.createElement(FormControl, _extends({
    required: required,
    error: isError
  }, formControlProps), label ? React.createElement(FormLabel, _extends({}, formLabelProps), label) : React.createElement(React.Fragment, null), React.createElement(FormGroup, _extends({}, formGroupProps), itemsData.map(function (item, idx) {
    return React.createElement(FormControlLabel, _extends({
      key: idx,
      name: name,
      label: item.label,
      value: single ? undefined : item.value,
      disabled: item.disabled,
      control: React.createElement(Field, _extends({
        type: "checkbox",
        name: name,
        render: function render(_ref) {
          var _ref$input = _ref.input,
              name = _ref$input.name,
              value = _ref$input.value,
              onChange = _ref$input.onChange,
              checked = _ref$input.checked,
              restInput = _objectWithoutPropertiesLoose(_ref$input, _excluded2$7);

          return React.createElement(Checkbox, _extends({
            name: name,
            value: value,
            onChange: onChange,
            checked: checked,
            disabled: item.disabled,
            inputProps: _extends({
              required: required
            }, restInput),
            indeterminate: item.indeterminate
          }, restCheckboxes));
        }
      }, fieldProps))
    }, formControlLabelProps));
  })), React.createElement(ErrorMessage, {
    showError: isError,
    meta: field.meta,
    formHelperTextProps: formHelperTextProps,
    helperText: helperText
  }));
}

var _excluded$6 = ["name", "data", "label", "required", "helperText", "fieldProps", "formControlProps", "formGroupProps", "formLabelProps", "formControlLabelProps", "formHelperTextProps", "showError"],
    _excluded2$6 = ["name", "value", "onChange", "checked"];
function Switches(props) {
  var name = props.name,
      data = props.data,
      label = props.label,
      required = props.required,
      helperText = props.helperText,
      fieldProps = props.fieldProps,
      formControlProps = props.formControlProps,
      formGroupProps = props.formGroupProps,
      formLabelProps = props.formLabelProps,
      formControlLabelProps = props.formControlLabelProps,
      formHelperTextProps = props.formHelperTextProps,
      _props$showError = props.showError,
      showError = _props$showError === void 0 ? showErrorOnChange : _props$showError,
      restSwitches = _objectWithoutPropertiesLoose(props, _excluded$6);

  var itemsData = Array.isArray(data) ? data : [data];
  var single = !Array.isArray(data);
  var field = useFieldForErrors(name);
  var isError = showError(field);
  return React.createElement(FormControl, _extends({
    required: required,
    error: isError
  }, formControlProps), label ? React.createElement(FormLabel, _extends({}, formLabelProps), label) : React.createElement(React.Fragment, null), React.createElement(FormGroup, _extends({}, formGroupProps), itemsData.map(function (item, idx) {
    return React.createElement(FormControlLabel, _extends({
      key: idx,
      name: name,
      label: item.label,
      value: single ? undefined : item.value,
      disabled: item.disabled,
      control: React.createElement(Field, _extends({
        type: "checkbox",
        name: name,
        render: function render(_ref) {
          var _ref$input = _ref.input,
              name = _ref$input.name,
              value = _ref$input.value,
              onChange = _ref$input.onChange,
              checked = _ref$input.checked,
              restInput = _objectWithoutPropertiesLoose(_ref$input, _excluded2$6);

          return React.createElement(Switch, _extends({
            name: name,
            value: value,
            onChange: onChange,
            checked: checked,
            disabled: item.disabled,
            required: required,
            inputProps: _extends({
              required: required
            }, restInput)
          }, restSwitches));
        }
      }, fieldProps))
    }, formControlLabelProps));
  })), React.createElement(ErrorMessage, {
    showError: isError,
    meta: field.meta,
    formHelperTextProps: formHelperTextProps,
    helperText: helperText
  }));
}

var _excluded$5 = ["name", "data", "label", "required", "helperText", "formLabelProps", "formControlLabelProps", "fieldProps", "formControlProps", "radioGroupProps", "formHelperTextProps", "showError"],
    _excluded2$5 = ["name", "value", "onChange", "checked"];
function Radios(props) {
  var name = props.name,
      data = props.data,
      label = props.label,
      required = props.required,
      helperText = props.helperText,
      formLabelProps = props.formLabelProps,
      formControlLabelProps = props.formControlLabelProps,
      fieldProps = props.fieldProps,
      formControlProps = props.formControlProps,
      radioGroupProps = props.radioGroupProps,
      formHelperTextProps = props.formHelperTextProps,
      _props$showError = props.showError,
      showError = _props$showError === void 0 ? showErrorOnChange : _props$showError,
      restRadios = _objectWithoutPropertiesLoose(props, _excluded$5);

  var field = useFieldForErrors(name);
  var isError = showError(field);
  return React.createElement(FormControl, _extends({
    required: required,
    error: isError
  }, formControlProps), !!label && React.createElement(FormLabel, _extends({}, formLabelProps), label), React.createElement(RadioGroup, _extends({}, radioGroupProps), data.map(function (item, idx) {
    return React.createElement(FormControlLabel, _extends({
      key: idx,
      name: name,
      label: item.label,
      value: item.value,
      disabled: item.disabled,
      control: React.createElement(Field, _extends({
        name: name,
        type: "radio",
        render: function render(_ref) {
          var _ref$input = _ref.input,
              name = _ref$input.name,
              value = _ref$input.value,
              onChange = _ref$input.onChange,
              checked = _ref$input.checked,
              restInput = _objectWithoutPropertiesLoose(_ref$input, _excluded2$5);

          return React.createElement(Radio, _extends({
            name: name,
            value: value,
            onChange: onChange,
            checked: checked,
            disabled: item.disabled,
            required: required,
            inputProps: _extends({
              required: required
            }, restInput)
          }, restRadios));
        }
      }, fieldProps))
    }, formControlLabelProps));
  })), React.createElement(ErrorMessage, {
    showError: isError,
    meta: field.meta,
    formHelperTextProps: formHelperTextProps,
    helperText: helperText
  }));
}

var _excluded$4 = ["name", "label", "data", "children", "required", "multiple", "helperText", "fieldProps", "inputLabelProps", "formControlProps", "formHelperTextProps", "menuItemProps", "showError"],
    _excluded2$4 = ["name", "value", "onChange"];
function Select(props) {
  var name = props.name,
      label = props.label,
      data = props.data,
      children = props.children,
      required = props.required,
      multiple = props.multiple,
      helperText = props.helperText,
      fieldProps = props.fieldProps,
      inputLabelProps = props.inputLabelProps,
      formControlProps = props.formControlProps,
      formHelperTextProps = props.formHelperTextProps,
      menuItemProps = props.menuItemProps,
      _props$showError = props.showError,
      showError = _props$showError === void 0 ? showErrorOnChange : _props$showError,
      restSelectProps = _objectWithoutPropertiesLoose(props, _excluded$4);

  if (!data && !children) {
    throw new Error('Please specify either children or data as an attribute.');
  }

  var variant = restSelectProps.variant;
  var field = useFieldForErrors(name);
  var isError = showError(field);
  return React.createElement(Field, _extends({
    name: name,
    render: function render(_ref) {
      var _ref$input = _ref.input,
          name = _ref$input.name,
          value = _ref$input.value,
          onChange = _ref$input.onChange,
          restInput = _objectWithoutPropertiesLoose(_ref$input, _excluded2$4);

      // prevents an error that happens if you don't have initialValues defined in advance
      var finalValue = multiple && !value ? [] : value;
      var labelId = "select-input-" + name;
      return React.createElement(FormControl, _extends({
        required: required,
        error: isError,
        fullWidth: true,
        variant: variant
      }, formControlProps), !!label && React.createElement(InputLabel, _extends({
        id: labelId
      }, inputLabelProps), label), React.createElement(Select$1, _extends({
        name: name,
        value: finalValue,
        onChange: onChange,
        multiple: multiple,
        label: label,
        labelId: labelId,
        inputProps: _extends({
          required: required
        }, restInput)
      }, restSelectProps), data ? data.map(function (item) {
        return React.createElement(MenuItem, _extends({
          value: item.value,
          key: item.value,
          disabled: item.disabled
        }, menuItemProps), item.label);
      }) : children), React.createElement(ErrorMessage, {
        showError: isError,
        meta: field.meta,
        formHelperTextProps: formHelperTextProps,
        helperText: helperText
      }));
    }
  }, fieldProps));
}

function pickerProviderWrapper(component, locale) {
  return React.createElement(LocalizationProvider, {
    dateAdapter: AdapterDateFns,
    locale: locale
  }, component);
}

var _excluded$3 = ["name", "fieldProps", "required"],
    _excluded2$3 = ["name", "onChange", "value"],
    _excluded3$3 = ["input", "meta", "locale", "required", "showError"],
    _excluded4$2 = ["helperText"];
function DatePicker(props) {
  var name = props.name,
      fieldProps = props.fieldProps,
      required = props.required,
      rest = _objectWithoutPropertiesLoose(props, _excluded$3);

  return React.createElement(Field, _extends({
    name: name,
    render: function render(fieldRenderProps) {
      return React.createElement(DatePickerWrapper, _extends({
        required: required
      }, fieldRenderProps, rest));
    }
  }, fieldProps));
}

function DatePickerWrapper(props) {
  var _props$input = props.input,
      name = _props$input.name,
      onChange = _props$input.onChange,
      value = _props$input.value,
      restInput = _objectWithoutPropertiesLoose(_props$input, _excluded2$3),
      meta = props.meta,
      locale = props.locale,
      required = props.required,
      _props$showError = props.showError,
      showError = _props$showError === void 0 ? showErrorOnChange : _props$showError,
      rest = _objectWithoutPropertiesLoose(props, _excluded3$3);

  var error = meta.error,
      submitError = meta.submitError;
  var isError = showError({
    meta: meta
  });

  var helperText = rest.helperText,
      lessrest = _objectWithoutPropertiesLoose(rest, _excluded4$2);

  return pickerProviderWrapper(React.createElement(DatePicker$1, _extends({
    onChange: onChange,
    value: value === '' ? null : value
  }, lessrest, {
    renderInput: function renderInput(props) {
      return React.createElement(TextField$1, _extends({
        fullWidth: true,
        helperText: isError ? error || submitError : helperText,
        error: isError,
        name: name,
        required: required
      }, restInput, props));
    }
  })), locale);
}

var _excluded$2 = ["name", "fieldProps", "required"],
    _excluded2$2 = ["name", "onChange", "value"],
    _excluded3$2 = ["input", "meta", "locale", "showError", "required"],
    _excluded4$1 = ["helperText"];
function DateTimePicker(props) {
  var name = props.name,
      fieldProps = props.fieldProps,
      required = props.required,
      rest = _objectWithoutPropertiesLoose(props, _excluded$2);

  return React.createElement(Field, _extends({
    name: name,
    render: function render(fieldRenderProps) {
      return React.createElement(DateTimePickerWrapper, _extends({}, fieldRenderProps, rest));
    },
    required: required
  }, fieldProps));
}

function DateTimePickerWrapper(props) {
  var _props$input = props.input,
      name = _props$input.name,
      onChange = _props$input.onChange,
      value = _props$input.value,
      restInput = _objectWithoutPropertiesLoose(_props$input, _excluded2$2),
      meta = props.meta,
      locale = props.locale,
      _props$showError = props.showError,
      showError = _props$showError === void 0 ? showErrorOnChange : _props$showError,
      required = props.required,
      rest = _objectWithoutPropertiesLoose(props, _excluded3$2);

  var error = meta.error,
      submitError = meta.submitError;
  var isError = showError({
    meta: meta
  });

  var helperText = rest.helperText,
      lessrest = _objectWithoutPropertiesLoose(rest, _excluded4$1);

  return pickerProviderWrapper(React.createElement(DateTimePicker$1, _extends({
    onChange: onChange,
    value: value === '' ? null : value
  }, lessrest, {
    renderInput: function renderInput(props) {
      return React.createElement(TextField$2, _extends({
        fullWidth: true,
        helperText: isError ? error || submitError : helperText,
        error: isError,
        name: name,
        required: required
      }, restInput, props));
    }
  })), locale);
}

var _excluded$1 = ["name", "fieldProps", "required"],
    _excluded2$1 = ["name", "onChange", "value"],
    _excluded3$1 = ["input", "meta", "locale", "showError", "required"],
    _excluded4 = ["helperText"];
function TimePicker(props) {
  var name = props.name,
      fieldProps = props.fieldProps,
      required = props.required,
      rest = _objectWithoutPropertiesLoose(props, _excluded$1);

  return React.createElement(Field, _extends({
    name: name,
    render: function render(fieldRenderProps) {
      return React.createElement(TimePickerWrapper, _extends({
        required: required
      }, fieldRenderProps, rest));
    }
  }, fieldProps));
}

function TimePickerWrapper(props) {
  var _props$input = props.input,
      name = _props$input.name,
      onChange = _props$input.onChange,
      value = _props$input.value,
      restInput = _objectWithoutPropertiesLoose(_props$input, _excluded2$1),
      meta = props.meta,
      locale = props.locale,
      _props$showError = props.showError,
      showError = _props$showError === void 0 ? showErrorOnChange : _props$showError,
      required = props.required,
      rest = _objectWithoutPropertiesLoose(props, _excluded3$1);

  var error = meta.error,
      submitError = meta.submitError;
  var isError = showError({
    meta: meta
  });

  var helperText = rest.helperText,
      lessrest = _objectWithoutPropertiesLoose(rest, _excluded4);

  return pickerProviderWrapper(React.createElement(TimePicker$1, _extends({
    onChange: onChange,
    value: value === '' ? null : value
  }, lessrest, {
    renderInput: function renderInput(props) {
      return React.createElement(TextField$2, _extends({
        fullWidth: true,
        helperText: isError ? error || submitError : helperText,
        error: isError,
        name: name,
        required: required
      }, restInput, props));
    }
  })), locale);
}

var _excluded = ["name", "type", "fieldProps"],
    _excluded2 = ["name", "value", "type", "onChange", "onBlur", "onFocus"],
    _excluded3 = ["input", "meta", "required", "fullWidth", "helperText", "showError"];
function TextField(props) {
  var name = props.name,
      type = props.type,
      fieldProps = props.fieldProps,
      rest = _objectWithoutPropertiesLoose(props, _excluded);

  return React.createElement(Field, _extends({
    name: name,
    type: type,
    render: function render(_ref) {
      var input = _ref.input,
          meta = _ref.meta;
      return React.createElement(TextFieldWrapper, _extends({
        input: input,
        meta: meta,
        name: name,
        type: type
      }, rest));
    }
  }, fieldProps));
}
function TextFieldWrapper(props) {
  var _props$input = props.input,
      name = _props$input.name,
      value = _props$input.value,
      type = _props$input.type,
      onChange = _props$input.onChange,
      onBlur = _props$input.onBlur,
      onFocus = _props$input.onFocus,
      restInput = _objectWithoutPropertiesLoose(_props$input, _excluded2),
      meta = props.meta,
      required = props.required,
      _props$fullWidth = props.fullWidth,
      fullWidth = _props$fullWidth === void 0 ? true : _props$fullWidth,
      helperText = props.helperText,
      _props$showError = props.showError,
      showError = _props$showError === void 0 ? showErrorOnChange : _props$showError,
      rest = _objectWithoutPropertiesLoose(props, _excluded3);

  var error = meta.error,
      submitError = meta.submitError;
  var isError = showError({
    meta: meta
  });
  return React.createElement(TextField$2, _extends({
    fullWidth: fullWidth,
    helperText: isError ? error || submitError : helperText,
    error: isError,
    onChange: onChange,
    onBlur: onBlur,
    onFocus: onFocus,
    name: name,
    value: value,
    type: type,
    required: required,
    inputProps: _extends({
      required: required
    }, restInput)
  }, rest));
}

var runtime = {exports: {}};

/**
 * Copyright (c) 2014-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

(function (module) {
var runtime = (function (exports) {

  var Op = Object.prototype;
  var hasOwn = Op.hasOwnProperty;
  var undefined$1; // More compressible than void 0.
  var $Symbol = typeof Symbol === "function" ? Symbol : {};
  var iteratorSymbol = $Symbol.iterator || "@@iterator";
  var asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator";
  var toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag";

  function define(obj, key, value) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
    return obj[key];
  }
  try {
    // IE 8 has a broken Object.defineProperty that only works on DOM objects.
    define({}, "");
  } catch (err) {
    define = function(obj, key, value) {
      return obj[key] = value;
    };
  }

  function wrap(innerFn, outerFn, self, tryLocsList) {
    // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.
    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;
    var generator = Object.create(protoGenerator.prototype);
    var context = new Context(tryLocsList || []);

    // The ._invoke method unifies the implementations of the .next,
    // .throw, and .return methods.
    generator._invoke = makeInvokeMethod(innerFn, self, context);

    return generator;
  }
  exports.wrap = wrap;

  // Try/catch helper to minimize deoptimizations. Returns a completion
  // record like context.tryEntries[i].completion. This interface could
  // have been (and was previously) designed to take a closure to be
  // invoked without arguments, but in all the cases we care about we
  // already have an existing method we want to call, so there's no need
  // to create a new function object. We can even get away with assuming
  // the method takes exactly one argument, since that happens to be true
  // in every case, so we don't have to touch the arguments object. The
  // only additional allocation required is the completion record, which
  // has a stable shape and so hopefully should be cheap to allocate.
  function tryCatch(fn, obj, arg) {
    try {
      return { type: "normal", arg: fn.call(obj, arg) };
    } catch (err) {
      return { type: "throw", arg: err };
    }
  }

  var GenStateSuspendedStart = "suspendedStart";
  var GenStateSuspendedYield = "suspendedYield";
  var GenStateExecuting = "executing";
  var GenStateCompleted = "completed";

  // Returning this object from the innerFn has the same effect as
  // breaking out of the dispatch switch statement.
  var ContinueSentinel = {};

  // Dummy constructor functions that we use as the .constructor and
  // .constructor.prototype properties for functions that return Generator
  // objects. For full spec compliance, you may wish to configure your
  // minifier not to mangle the names of these two functions.
  function Generator() {}
  function GeneratorFunction() {}
  function GeneratorFunctionPrototype() {}

  // This is a polyfill for %IteratorPrototype% for environments that
  // don't natively support it.
  var IteratorPrototype = {};
  define(IteratorPrototype, iteratorSymbol, function () {
    return this;
  });

  var getProto = Object.getPrototypeOf;
  var NativeIteratorPrototype = getProto && getProto(getProto(values([])));
  if (NativeIteratorPrototype &&
      NativeIteratorPrototype !== Op &&
      hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {
    // This environment has a native %IteratorPrototype%; use it instead
    // of the polyfill.
    IteratorPrototype = NativeIteratorPrototype;
  }

  var Gp = GeneratorFunctionPrototype.prototype =
    Generator.prototype = Object.create(IteratorPrototype);
  GeneratorFunction.prototype = GeneratorFunctionPrototype;
  define(Gp, "constructor", GeneratorFunctionPrototype);
  define(GeneratorFunctionPrototype, "constructor", GeneratorFunction);
  GeneratorFunction.displayName = define(
    GeneratorFunctionPrototype,
    toStringTagSymbol,
    "GeneratorFunction"
  );

  // Helper for defining the .next, .throw, and .return methods of the
  // Iterator interface in terms of a single ._invoke method.
  function defineIteratorMethods(prototype) {
    ["next", "throw", "return"].forEach(function(method) {
      define(prototype, method, function(arg) {
        return this._invoke(method, arg);
      });
    });
  }

  exports.isGeneratorFunction = function(genFun) {
    var ctor = typeof genFun === "function" && genFun.constructor;
    return ctor
      ? ctor === GeneratorFunction ||
        // For the native GeneratorFunction constructor, the best we can
        // do is to check its .name property.
        (ctor.displayName || ctor.name) === "GeneratorFunction"
      : false;
  };

  exports.mark = function(genFun) {
    if (Object.setPrototypeOf) {
      Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);
    } else {
      genFun.__proto__ = GeneratorFunctionPrototype;
      define(genFun, toStringTagSymbol, "GeneratorFunction");
    }
    genFun.prototype = Object.create(Gp);
    return genFun;
  };

  // Within the body of any async function, `await x` is transformed to
  // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test
  // `hasOwn.call(value, "__await")` to determine if the yielded value is
  // meant to be awaited.
  exports.awrap = function(arg) {
    return { __await: arg };
  };

  function AsyncIterator(generator, PromiseImpl) {
    function invoke(method, arg, resolve, reject) {
      var record = tryCatch(generator[method], generator, arg);
      if (record.type === "throw") {
        reject(record.arg);
      } else {
        var result = record.arg;
        var value = result.value;
        if (value &&
            typeof value === "object" &&
            hasOwn.call(value, "__await")) {
          return PromiseImpl.resolve(value.__await).then(function(value) {
            invoke("next", value, resolve, reject);
          }, function(err) {
            invoke("throw", err, resolve, reject);
          });
        }

        return PromiseImpl.resolve(value).then(function(unwrapped) {
          // When a yielded Promise is resolved, its final value becomes
          // the .value of the Promise<{value,done}> result for the
          // current iteration.
          result.value = unwrapped;
          resolve(result);
        }, function(error) {
          // If a rejected Promise was yielded, throw the rejection back
          // into the async generator function so it can be handled there.
          return invoke("throw", error, resolve, reject);
        });
      }
    }

    var previousPromise;

    function enqueue(method, arg) {
      function callInvokeWithMethodAndArg() {
        return new PromiseImpl(function(resolve, reject) {
          invoke(method, arg, resolve, reject);
        });
      }

      return previousPromise =
        // If enqueue has been called before, then we want to wait until
        // all previous Promises have been resolved before calling invoke,
        // so that results are always delivered in the correct order. If
        // enqueue has not been called before, then it is important to
        // call invoke immediately, without waiting on a callback to fire,
        // so that the async generator function has the opportunity to do
        // any necessary setup in a predictable way. This predictability
        // is why the Promise constructor synchronously invokes its
        // executor callback, and why async functions synchronously
        // execute code before the first await. Since we implement simple
        // async functions in terms of async generators, it is especially
        // important to get this right, even though it requires care.
        previousPromise ? previousPromise.then(
          callInvokeWithMethodAndArg,
          // Avoid propagating failures to Promises returned by later
          // invocations of the iterator.
          callInvokeWithMethodAndArg
        ) : callInvokeWithMethodAndArg();
    }

    // Define the unified helper method that is used to implement .next,
    // .throw, and .return (see defineIteratorMethods).
    this._invoke = enqueue;
  }

  defineIteratorMethods(AsyncIterator.prototype);
  define(AsyncIterator.prototype, asyncIteratorSymbol, function () {
    return this;
  });
  exports.AsyncIterator = AsyncIterator;

  // Note that simple async functions are implemented on top of
  // AsyncIterator objects; they just return a Promise for the value of
  // the final result produced by the iterator.
  exports.async = function(innerFn, outerFn, self, tryLocsList, PromiseImpl) {
    if (PromiseImpl === void 0) PromiseImpl = Promise;

    var iter = new AsyncIterator(
      wrap(innerFn, outerFn, self, tryLocsList),
      PromiseImpl
    );

    return exports.isGeneratorFunction(outerFn)
      ? iter // If outerFn is a generator, return the full iterator.
      : iter.next().then(function(result) {
          return result.done ? result.value : iter.next();
        });
  };

  function makeInvokeMethod(innerFn, self, context) {
    var state = GenStateSuspendedStart;

    return function invoke(method, arg) {
      if (state === GenStateExecuting) {
        throw new Error("Generator is already running");
      }

      if (state === GenStateCompleted) {
        if (method === "throw") {
          throw arg;
        }

        // Be forgiving, per 25.3.3.3.3 of the spec:
        // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume
        return doneResult();
      }

      context.method = method;
      context.arg = arg;

      while (true) {
        var delegate = context.delegate;
        if (delegate) {
          var delegateResult = maybeInvokeDelegate(delegate, context);
          if (delegateResult) {
            if (delegateResult === ContinueSentinel) continue;
            return delegateResult;
          }
        }

        if (context.method === "next") {
          // Setting context._sent for legacy support of Babel's
          // function.sent implementation.
          context.sent = context._sent = context.arg;

        } else if (context.method === "throw") {
          if (state === GenStateSuspendedStart) {
            state = GenStateCompleted;
            throw context.arg;
          }

          context.dispatchException(context.arg);

        } else if (context.method === "return") {
          context.abrupt("return", context.arg);
        }

        state = GenStateExecuting;

        var record = tryCatch(innerFn, self, context);
        if (record.type === "normal") {
          // If an exception is thrown from innerFn, we leave state ===
          // GenStateExecuting and loop back for another invocation.
          state = context.done
            ? GenStateCompleted
            : GenStateSuspendedYield;

          if (record.arg === ContinueSentinel) {
            continue;
          }

          return {
            value: record.arg,
            done: context.done
          };

        } else if (record.type === "throw") {
          state = GenStateCompleted;
          // Dispatch the exception by looping back around to the
          // context.dispatchException(context.arg) call above.
          context.method = "throw";
          context.arg = record.arg;
        }
      }
    };
  }

  // Call delegate.iterator[context.method](context.arg) and handle the
  // result, either by returning a { value, done } result from the
  // delegate iterator, or by modifying context.method and context.arg,
  // setting context.delegate to null, and returning the ContinueSentinel.
  function maybeInvokeDelegate(delegate, context) {
    var method = delegate.iterator[context.method];
    if (method === undefined$1) {
      // A .throw or .return when the delegate iterator has no .throw
      // method always terminates the yield* loop.
      context.delegate = null;

      if (context.method === "throw") {
        // Note: ["return"] must be used for ES3 parsing compatibility.
        if (delegate.iterator["return"]) {
          // If the delegate iterator has a return method, give it a
          // chance to clean up.
          context.method = "return";
          context.arg = undefined$1;
          maybeInvokeDelegate(delegate, context);

          if (context.method === "throw") {
            // If maybeInvokeDelegate(context) changed context.method from
            // "return" to "throw", let that override the TypeError below.
            return ContinueSentinel;
          }
        }

        context.method = "throw";
        context.arg = new TypeError(
          "The iterator does not provide a 'throw' method");
      }

      return ContinueSentinel;
    }

    var record = tryCatch(method, delegate.iterator, context.arg);

    if (record.type === "throw") {
      context.method = "throw";
      context.arg = record.arg;
      context.delegate = null;
      return ContinueSentinel;
    }

    var info = record.arg;

    if (! info) {
      context.method = "throw";
      context.arg = new TypeError("iterator result is not an object");
      context.delegate = null;
      return ContinueSentinel;
    }

    if (info.done) {
      // Assign the result of the finished delegate to the temporary
      // variable specified by delegate.resultName (see delegateYield).
      context[delegate.resultName] = info.value;

      // Resume execution at the desired location (see delegateYield).
      context.next = delegate.nextLoc;

      // If context.method was "throw" but the delegate handled the
      // exception, let the outer generator proceed normally. If
      // context.method was "next", forget context.arg since it has been
      // "consumed" by the delegate iterator. If context.method was
      // "return", allow the original .return call to continue in the
      // outer generator.
      if (context.method !== "return") {
        context.method = "next";
        context.arg = undefined$1;
      }

    } else {
      // Re-yield the result returned by the delegate method.
      return info;
    }

    // The delegate iterator is finished, so forget it and continue with
    // the outer generator.
    context.delegate = null;
    return ContinueSentinel;
  }

  // Define Generator.prototype.{next,throw,return} in terms of the
  // unified ._invoke helper method.
  defineIteratorMethods(Gp);

  define(Gp, toStringTagSymbol, "Generator");

  // A Generator should always return itself as the iterator object when the
  // @@iterator function is called on it. Some browsers' implementations of the
  // iterator prototype chain incorrectly implement this, causing the Generator
  // object to not be returned from this call. This ensures that doesn't happen.
  // See https://github.com/facebook/regenerator/issues/274 for more details.
  define(Gp, iteratorSymbol, function() {
    return this;
  });

  define(Gp, "toString", function() {
    return "[object Generator]";
  });

  function pushTryEntry(locs) {
    var entry = { tryLoc: locs[0] };

    if (1 in locs) {
      entry.catchLoc = locs[1];
    }

    if (2 in locs) {
      entry.finallyLoc = locs[2];
      entry.afterLoc = locs[3];
    }

    this.tryEntries.push(entry);
  }

  function resetTryEntry(entry) {
    var record = entry.completion || {};
    record.type = "normal";
    delete record.arg;
    entry.completion = record;
  }

  function Context(tryLocsList) {
    // The root entry object (effectively a try statement without a catch
    // or a finally block) gives us a place to store values thrown from
    // locations where there is no enclosing try statement.
    this.tryEntries = [{ tryLoc: "root" }];
    tryLocsList.forEach(pushTryEntry, this);
    this.reset(true);
  }

  exports.keys = function(object) {
    var keys = [];
    for (var key in object) {
      keys.push(key);
    }
    keys.reverse();

    // Rather than returning an object with a next method, we keep
    // things simple and return the next function itself.
    return function next() {
      while (keys.length) {
        var key = keys.pop();
        if (key in object) {
          next.value = key;
          next.done = false;
          return next;
        }
      }

      // To avoid creating an additional object, we just hang the .value
      // and .done properties off the next function object itself. This
      // also ensures that the minifier will not anonymize the function.
      next.done = true;
      return next;
    };
  };

  function values(iterable) {
    if (iterable) {
      var iteratorMethod = iterable[iteratorSymbol];
      if (iteratorMethod) {
        return iteratorMethod.call(iterable);
      }

      if (typeof iterable.next === "function") {
        return iterable;
      }

      if (!isNaN(iterable.length)) {
        var i = -1, next = function next() {
          while (++i < iterable.length) {
            if (hasOwn.call(iterable, i)) {
              next.value = iterable[i];
              next.done = false;
              return next;
            }
          }

          next.value = undefined$1;
          next.done = true;

          return next;
        };

        return next.next = next;
      }
    }

    // Return an iterator with no values.
    return { next: doneResult };
  }
  exports.values = values;

  function doneResult() {
    return { value: undefined$1, done: true };
  }

  Context.prototype = {
    constructor: Context,

    reset: function(skipTempReset) {
      this.prev = 0;
      this.next = 0;
      // Resetting context._sent for legacy support of Babel's
      // function.sent implementation.
      this.sent = this._sent = undefined$1;
      this.done = false;
      this.delegate = null;

      this.method = "next";
      this.arg = undefined$1;

      this.tryEntries.forEach(resetTryEntry);

      if (!skipTempReset) {
        for (var name in this) {
          // Not sure about the optimal order of these conditions:
          if (name.charAt(0) === "t" &&
              hasOwn.call(this, name) &&
              !isNaN(+name.slice(1))) {
            this[name] = undefined$1;
          }
        }
      }
    },

    stop: function() {
      this.done = true;

      var rootEntry = this.tryEntries[0];
      var rootRecord = rootEntry.completion;
      if (rootRecord.type === "throw") {
        throw rootRecord.arg;
      }

      return this.rval;
    },

    dispatchException: function(exception) {
      if (this.done) {
        throw exception;
      }

      var context = this;
      function handle(loc, caught) {
        record.type = "throw";
        record.arg = exception;
        context.next = loc;

        if (caught) {
          // If the dispatched exception was caught by a catch block,
          // then let that catch block handle the exception normally.
          context.method = "next";
          context.arg = undefined$1;
        }

        return !! caught;
      }

      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        var record = entry.completion;

        if (entry.tryLoc === "root") {
          // Exception thrown outside of any try block that could handle
          // it, so set the completion value of the entire function to
          // throw the exception.
          return handle("end");
        }

        if (entry.tryLoc <= this.prev) {
          var hasCatch = hasOwn.call(entry, "catchLoc");
          var hasFinally = hasOwn.call(entry, "finallyLoc");

          if (hasCatch && hasFinally) {
            if (this.prev < entry.catchLoc) {
              return handle(entry.catchLoc, true);
            } else if (this.prev < entry.finallyLoc) {
              return handle(entry.finallyLoc);
            }

          } else if (hasCatch) {
            if (this.prev < entry.catchLoc) {
              return handle(entry.catchLoc, true);
            }

          } else if (hasFinally) {
            if (this.prev < entry.finallyLoc) {
              return handle(entry.finallyLoc);
            }

          } else {
            throw new Error("try statement without catch or finally");
          }
        }
      }
    },

    abrupt: function(type, arg) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.tryLoc <= this.prev &&
            hasOwn.call(entry, "finallyLoc") &&
            this.prev < entry.finallyLoc) {
          var finallyEntry = entry;
          break;
        }
      }

      if (finallyEntry &&
          (type === "break" ||
           type === "continue") &&
          finallyEntry.tryLoc <= arg &&
          arg <= finallyEntry.finallyLoc) {
        // Ignore the finally entry if control is not jumping to a
        // location outside the try/catch block.
        finallyEntry = null;
      }

      var record = finallyEntry ? finallyEntry.completion : {};
      record.type = type;
      record.arg = arg;

      if (finallyEntry) {
        this.method = "next";
        this.next = finallyEntry.finallyLoc;
        return ContinueSentinel;
      }

      return this.complete(record);
    },

    complete: function(record, afterLoc) {
      if (record.type === "throw") {
        throw record.arg;
      }

      if (record.type === "break" ||
          record.type === "continue") {
        this.next = record.arg;
      } else if (record.type === "return") {
        this.rval = this.arg = record.arg;
        this.method = "return";
        this.next = "end";
      } else if (record.type === "normal" && afterLoc) {
        this.next = afterLoc;
      }

      return ContinueSentinel;
    },

    finish: function(finallyLoc) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.finallyLoc === finallyLoc) {
          this.complete(entry.completion, entry.afterLoc);
          resetTryEntry(entry);
          return ContinueSentinel;
        }
      }
    },

    "catch": function(tryLoc) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.tryLoc === tryLoc) {
          var record = entry.completion;
          if (record.type === "throw") {
            var thrown = record.arg;
            resetTryEntry(entry);
          }
          return thrown;
        }
      }

      // The context.catch method must only be called with a location
      // argument that corresponds to a known catch block.
      throw new Error("illegal catch attempt");
    },

    delegateYield: function(iterable, resultName, nextLoc) {
      this.delegate = {
        iterator: values(iterable),
        resultName: resultName,
        nextLoc: nextLoc
      };

      if (this.method === "next") {
        // Deliberately forget the last sent value so that we don't
        // accidentally pass it on to the delegate.
        this.arg = undefined$1;
      }

      return ContinueSentinel;
    }
  };

  // Regardless of whether this script is executing as a CommonJS module
  // or not, return the runtime object so that we can declare the variable
  // regeneratorRuntime in the outer scope, which allows this module to be
  // injected easily by `bin/regenerator --include-runtime script.js`.
  return exports;

}(
  // If this script is executing as a CommonJS module, use module.exports
  // as the regeneratorRuntime namespace. Otherwise create a new empty
  // object. Either way, the resulting object will be used to initialize
  // the regeneratorRuntime variable at the top of this file.
  module.exports 
));

try {
  regeneratorRuntime = runtime;
} catch (accidentalStrictMode) {
  // This module should not be running in strict mode, so the above
  // assignment should always work unless something is misconfigured. Just
  // in case runtime.js accidentally runs in strict mode, in modern engines
  // we can explicitly access globalThis. In older engines we can escape
  // strict mode using a global Function call. This could conceivably fail
  // if a Content Security Policy forbids using Function, but in that case
  // the proper solution is to fix the accidental strict mode problem. If
  // you've misconfigured your bundler to force strict mode and applied a
  // CSP to forbid Function, and you're not willing to fix either of those
  // problems, please detail your unique predicament in a GitHub issue.
  if (typeof globalThis === "object") {
    globalThis.regeneratorRuntime = runtime;
  } else {
    Function("r", "regeneratorRuntime = r")(runtime);
  }
}
}(runtime));

var _regeneratorRuntime = runtime.exports;

// https://github.com/you-dont-need/You-Dont-Need-Lodash-Underscore#_get
function get(obj, path, defaultValue) {
  var result = String.prototype.split.call(path, /[,[\].]+?/).filter(Boolean).reduce(function (res, key) {
    return res !== null && res !== undefined ? res[key] : res;
  }, obj);
  return result === undefined || result === obj ? defaultValue : result;
} // https://stackoverflow.com/questions/54733539/javascript-implementation-of-lodash-set-method


function set(obj, path, value) {
  if (Object(obj) !== obj) return obj; // When obj is not an object
  // If not yet an array, get the keys from the string-path

  if (!Array.isArray(path)) path = path.toString().match(/[^.[\]]+/g) || [];
  path.slice(0, -1).reduce(function (a, c, i) {
    return Object(a[c]) === a[c] // Does the key exist and is its value an object?
    ? // Yes: then follow that path
    a[c] : // No: create the key. Is the next key a potential array-index?
    a[c] = Math.abs(path[i + 1]) >> 0 === +path[i + 1] ? [] // Yes: assign a new array object
    : {};
  }, // No: assign a new plain object
  obj)[path[path.length - 1]] = value; // Finally assign the value to the last key

  return obj; // Return the top-level object to allow chaining
}

function normalizeValidationError(err, translator) {
  return err.inner.reduce(function (errors, innerError) {
    var path = innerError.path,
        message = innerError.message;
    var el = translator ? translator(innerError) : message; // eslint-disable-next-line no-prototype-builtins

    if (path && errors.hasOwnProperty(path)) {
      var prev = get(errors, path);
      prev.push(el);
      set(errors, path, prev);
    } else {
      set(errors, path, [el]);
    }

    return errors;
  }, {});
}
/**
 * Wraps the execution of a Yup schema to return an Promise<ValidationError>
 * where the key is the form field and the value is the error string.
 */


function makeValidate(validator, translator) {
  return /*#__PURE__*/function () {
    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(values) {
      return _regeneratorRuntime.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              _context.prev = 0;
              _context.next = 3;
              return validator.validate(values, {
                abortEarly: false
              });

            case 3:
              return _context.abrupt("return", {});

            case 6:
              _context.prev = 6;
              _context.t0 = _context["catch"](0);
              return _context.abrupt("return", normalizeValidationError(_context.t0, translator));

            case 9:
            case "end":
              return _context.stop();
          }
        }
      }, _callee, null, [[0, 6]]);
    }));

    return function (_x) {
      return _ref.apply(this, arguments);
    };
  }();
}
/**
 * Wraps the sync execution of a Yup schema to return an ValidationError
 * where the key is the form field and the value is the error string.
 */

function makeValidateSync(validator, translator) {
  return function (values) {
    try {
      validator.validateSync(values, {
        abortEarly: false
      });
      return {};
    } catch (err) {
      return normalizeValidationError(err, translator);
    }
  };
}
/**
 * Uses the private _exclusive field in the schema to get whether or not
 * the field is marked as required or not.
 */

function makeRequired(schema) {
  var fields = schema.fields;
  return Object.keys(fields).reduce(function (accu, field) {
    if (fields[field].fields) {
      accu[field] = makeRequired(fields[field]);
    } else {
      accu[field] = !!fields[field].exclusiveTests.required;
    }

    return accu;
  }, {});
}

function Debug() {
  return React.createElement(FormSpy, {
    subscription: {
      values: true
    }
  }, function (_ref) {
    var values = _ref.values;
    return React.createElement("pre", null, JSON.stringify(values, undefined, 2));
  });
}

/**
 * @deprecated use DatePicker instead
 */

function KeyboardDatePicker(props) {
  console.warn('KeyboardDatePicker is deprecated. You should use DatePicker instead.');
  return React.createElement(DatePicker, _extends({}, props));
}

/**
 * @deprecated use DateTimePicker instead
 */

function KeyboardDateTimePicker(props) {
  console.warn('KeyboardDateTimePicker is deprecated. You should use DateTimePicker instead.');
  return React.createElement(DateTimePicker, _extends({}, props));
}

/**
 * @deprecated use TimePicker instead
 */

function KeyboardTimePicker(props) {
  console.warn('KeyboardTimePicker is deprecated. You should use TimePicker instead.');
  return React.createElement(TimePicker, _extends({}, props));
}

export { Autocomplete, Checkboxes, DatePicker, DateTimePicker, Debug, ErrorMessage, KeyboardDatePicker, KeyboardDateTimePicker, KeyboardTimePicker, Radios, Select, Switches, TextField, TimePicker, makeRequired, makeValidate, makeValidateSync, showErrorOnBlur, showErrorOnChange, useFieldForErrors };
//# sourceMappingURL=mui-rff.esm.js.map
