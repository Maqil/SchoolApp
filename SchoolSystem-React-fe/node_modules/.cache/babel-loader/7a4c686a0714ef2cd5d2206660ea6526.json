{"ast":null,"code":"var _jsxFileName = \"/Users/mohamedmaqil/Desktop/SchoolSystem/SchoolSystem-React-fe/src/components/Mui/RivoMuiRffCheckbox.tsx\",\n    _s = $RefreshSig$();\n\nimport { FormControl, FormControlLabel, FormGroup, FormLabel, Checkbox as MuiCheckbox } from \"@mui/material\";\nimport React from \"react\";\nimport { ErrorMessage, showErrorOnChange, useFieldForErrors } from \"mui-rff\";\nimport { Field } from \"react-final-form\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport function Checkboxes(props) {\n  _s();\n\n  const {\n    required,\n    label,\n    data,\n    name,\n    helperText,\n    fieldProps,\n    formControlProps,\n    formGroupProps,\n    formLabelProps,\n    formControlLabelProps,\n    formHelperTextProps,\n    showError = showErrorOnChange,\n    ...restCheckboxes\n  } = props;\n  const itemsData = Array.isArray(data) ? data : [data];\n  const single = !Array.isArray(data);\n  const field = useFieldForErrors(name);\n  const isError = showError(field);\n  return /*#__PURE__*/_jsxDEV(FormControl, {\n    required: required,\n    error: isError,\n    ...formControlProps,\n    children: [label ? /*#__PURE__*/_jsxDEV(FormLabel, { ...formLabelProps,\n      children: label\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 16\n    }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false), /*#__PURE__*/_jsxDEV(FormGroup, { ...formGroupProps,\n      children: itemsData.map((item, idx) => /*#__PURE__*/_jsxDEV(FormControlLabel, {\n        name: name,\n        label: item.label,\n        value: single ? undefined : item.value,\n        disabled: item.disabled,\n        control: /*#__PURE__*/_jsxDEV(Field, {\n          type: \"checkbox\",\n          name: name,\n          render: _ref => {\n            let {\n              input: {\n                name,\n                value,\n                onChange,\n                checked,\n                ...restInput\n              }\n            } = _ref;\n            return /*#__PURE__*/_jsxDEV(MuiCheckbox, {\n              name: name,\n              value: value,\n              onChange: item.onChange,\n              checked: item.checked,\n              disabled: item.disabled,\n              inputProps: {\n                required,\n                ...restInput\n              },\n              indeterminate: item.indeterminate,\n              ...restCheckboxes\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 89,\n              columnNumber: 19\n            }, this);\n          },\n          ...fieldProps\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 15\n        }, this),\n        ...formControlLabelProps\n      }, idx, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ErrorMessage, {\n      showError: isError,\n      meta: field.meta,\n      formHelperTextProps: formHelperTextProps,\n      helperText: helperText\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 72,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Checkboxes, \"28qUiQeowNiFIR9Ma6bfHw6EAe0=\", false, function () {\n  return [useFieldForErrors];\n});\n\n_c = Checkboxes;\n\nvar _c;\n\n$RefreshReg$(_c, \"Checkboxes\");","map":{"version":3,"sources":["/Users/mohamedmaqil/Desktop/SchoolSystem/SchoolSystem-React-fe/src/components/Mui/RivoMuiRffCheckbox.tsx"],"names":["FormControl","FormControlLabel","FormGroup","FormLabel","Checkbox","MuiCheckbox","React","ErrorMessage","showErrorOnChange","useFieldForErrors","Field","Checkboxes","props","required","label","data","name","helperText","fieldProps","formControlProps","formGroupProps","formLabelProps","formControlLabelProps","formHelperTextProps","showError","restCheckboxes","itemsData","Array","isArray","single","field","isError","map","item","idx","undefined","value","disabled","input","onChange","checked","restInput","indeterminate","meta"],"mappings":"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","sourcesContent":["import {\n  FormControl,\n  FormControlLabel,\n  FormControlLabelProps,\n  FormControlProps,\n  FormGroup,\n  FormGroupProps,\n  FormHelperTextProps,\n  FormLabel,\n  FormLabelProps,\n  Checkbox as MuiCheckbox,\n  CheckboxProps as MuiCheckboxProps\n} from \"@mui/material\";\nimport React, { ReactNode } from \"react\";\n\nimport {\n  ErrorMessage,\n  ShowErrorFunc,\n  showErrorOnChange,\n  useFieldForErrors\n} from \"mui-rff\";\nimport { Field, FieldProps } from \"react-final-form\";\n\nexport interface CheckboxData {\n  label: ReactNode;\n  value: unknown;\n  disabled?: boolean;\n  indeterminate?: boolean;\n  onChange?(any): void;\n  checked?: boolean;\n}\n\nexport interface CheckboxesProps\n  extends Partial<Omit<MuiCheckboxProps, \"onChange\">> {\n  name: string;\n  data: CheckboxData | CheckboxData[];\n  label?: ReactNode;\n  required?: boolean;\n  helperText?: string;\n  fieldProps?: Partial<FieldProps<any, any>>;\n  formControlProps?: Partial<FormControlProps>;\n  formGroupProps?: Partial<FormGroupProps>;\n  formLabelProps?: Partial<FormLabelProps>;\n  formControlLabelProps?: Partial<FormControlLabelProps>;\n  formHelperTextProps?: Partial<FormHelperTextProps>;\n  showError?: ShowErrorFunc;\n}\n\nexport function Checkboxes(props: CheckboxesProps) {\n  const {\n    required,\n    label,\n    data,\n    name,\n    helperText,\n    fieldProps,\n    formControlProps,\n    formGroupProps,\n    formLabelProps,\n    formControlLabelProps,\n    formHelperTextProps,\n    showError = showErrorOnChange,\n    ...restCheckboxes\n  } = props;\n\n  const itemsData = Array.isArray(data) ? data : [data];\n  const single = !Array.isArray(data);\n  const field = useFieldForErrors(name);\n  const isError = showError(field);\n\n  return (\n    <FormControl required={required} error={isError} {...formControlProps}>\n      {label ? <FormLabel {...formLabelProps}>{label}</FormLabel> : <></>}\n      <FormGroup {...formGroupProps}>\n        {itemsData.map((item: CheckboxData, idx: number) => (\n          <FormControlLabel\n            key={idx}\n            name={name}\n            label={item.label as string}\n            value={single ? undefined : item.value}\n            disabled={item.disabled}\n            control={\n              <Field\n                type=\"checkbox\"\n                name={name}\n                render={({\n                  input: { name, value, onChange, checked, ...restInput }\n                }) => (\n                  <MuiCheckbox\n                    name={name}\n                    value={value}\n                    onChange={item.onChange}\n                    checked={item.checked}\n                    disabled={item.disabled}\n                    inputProps={{ required, ...restInput }}\n                    indeterminate={item.indeterminate}\n                    {...restCheckboxes}\n                  />\n                )}\n                {...fieldProps}\n              />\n            }\n            {...formControlLabelProps}\n          />\n        ))}\n      </FormGroup>\n      <ErrorMessage\n        showError={isError}\n        meta={field.meta}\n        formHelperTextProps={formHelperTextProps}\n        helperText={helperText}\n      />\n    </FormControl>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}