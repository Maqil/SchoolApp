{"ast":null,"code":"var _jsxFileName = \"/Users/mohamedmaqil/Desktop/SchoolSystem/SchoolSystem-React-fe/src/providers/Auth.tsx\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport React, { useEffect, useState, createContext, useContext } from \"react\";\nimport { Auth } from \"aws-amplify\";\nimport jwt_decode from \"jwt-decode\";\nimport { getI18n } from \"react-i18next\";\nimport axios from \"axios\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext({\n  user: {},\n  loading: true,\n  signIn: (username, password) => {},\n  signOut: () => {},\n  getUserSession: () => {},\n  changePassword: (user, oldPassword, newPassword) => {},\n  completeNewPassword: (user, newPassword) => {},\n  forgotPassword: username => {},\n  // confirmSignIn: (user, mfaCode) => {},\n  verifyTOTP: (user, totpCode) => {},\n  updateUserAttributes: (user, attributes) => {},\n  clearCognitoData: () => {},\n  forgotPasswordSubmit: (username, code, newPassword) => {},\n  userAttributeVerification: attribute => {},\n  userAttributeVerificationSubmit: (attribute, code) => {},\n  refreshSession: () => {},\n  checkSessionExpired: () => {},\n  getSubId: () => {}\n});\nexport const AuthProvider = props => {\n  _s();\n\n  const [user, setUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n  useEffect(() => {\n    /**\n        Get the current user's information.\n        Should be used after the user is logged in. Returns an error if not signed in\n        @return response - the result of the API call. returns data: the authenticated user object\n    */\n    const getCurrentUser = async () => {\n      setLoading(true);\n\n      if (user) {\n        // currentUser already exisiting\n        setUser(user);\n        setLoading(false);\n      } else {\n        try {\n          let loggedUser = await Auth.currentAuthenticatedUser();\n          setUser(loggedUser); // currentUser checking aws\n        } catch (error) {\n          console.debug(\"ERROR: getCurrentUser \", error);\n        }\n\n        setLoading(false);\n      }\n    };\n\n    getCurrentUser();\n  }, [user]);\n  /*    COGNITO USER FUNCTIONS    */\n\n  /**\n        Get user's current session. Refreshes accessToken and idToken if expired and a valid\n        refresh token is presented\n        @return response - the result of the API call.\n        returns a CognitoUserSession object which contains JWT, idToken, and refreshToken\n    */\n\n  const getUserSession = async () => {\n    let response = {};\n    Auth.currentSession().then(data => {\n      response = {\n        data: data,\n        status: \"SUCCESS\"\n      };\n    }).catch(error => {\n      console.debug(\"ERROR: occured while getting user session \", error);\n      response = {\n        error: error,\n        status: \"FAIL\"\n      };\n    });\n    return response;\n  };\n  /**\n        Update the user's attributes\n        @param attributes - object of user's attributes to be updated\n        @return response - the result from updating the attributes\n    */\n\n\n  const updateUserAttributes = async (user, attributes) => {\n    let response = {};\n    await Auth.updateUserAttributes(user, attributes).then(result => {\n      response = {\n        data: result,\n        status: \"SUCCESS\"\n      };\n    }).catch(error => {\n      console.debug(\"ERROR: occured updating the user's attributes \", error);\n      response = {\n        error: error,\n        status: \"FAIL\"\n      };\n    });\n    return response;\n  }; // /**\n  //  * Clear all the current user's cognito data\n  //  */\n  // const clearCognitoData = () => {\n  //   setUser(null);\n  // };\n\n  /*  **********  COGNITO SIGN IN/OUT  **********  */\n\n  /**\n        Sign in and authenticate user.\n        First time users must enter a new password.\n        User's info is stored to avoid recalling the API\n        @return - Authenticated User's information - For TOTP returns code\n    */\n\n\n  const signIn = async (username, password) => {\n    let response;\n    setLoading(true); // Headers\n\n    const headers = {\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    };\n    axios.post(process.env.REACT_APP_HOST + \"/graphql\", {\n      query: `\n          mutation {\n            signin(email:\"` + username + `\", password:\"` + password + `\")\n           }\n          `\n    }, headers).then(res => {\n      console.log(\"res: \", res);\n\n      if (res.data.errors) {// dispatch(returnErrors(res.data.errors, \"LOGIN_FAIL\"));\n      } else {\n        console.log(\"res.data.data: \", res.data.data);\n        alert(\"success\"); // dispatch({ type: LOGIN_SUCCESS, payload: res.data.data });\n      }\n    }).catch(err => {\n      console.log(\"err: \", err); // dispatch(returnErrors(err, \"LOGIN_FAIL\"));\n      // dispatch({\n      // type: LOGIN_FAIL\n      // });\n    });\n    setLoading(false);\n    return response;\n  }; // /**\n  //  * Complete login for user after submitting MFA code\n  //  * @param user\n  //  * @param mfaCode\n  //  * @returns response - successful verification returns user object\n  //  */\n  // const confirmSignIn = async (user: any, mfaCode: string) => {\n  //   let response;\n  //   let loggedUser;\n  //   setLoading(true);\n  //   try {\n  //     if (user.challengeName === \"CUSTOM_CHALLENGE\") {\n  //       loggedUser = await Auth.sendCustomChallengeAnswer(\n  //         user, // Return object from Auth.signIn()\n  //         mfaCode // Confirmation code\n  //       );\n  //       // the answer was sent successfully, but it doesnt mean it is the right one\n  //       // so we should test if the user is authenticated now\n  //       // this will throw an error if the user is not yet authenticated:\n  //       await Auth.currentSession();\n  //     } else {\n  //       loggedUser = await Auth.confirmSignIn(\n  //         user, // Return object from Auth.signIn()\n  //         mfaCode // Confirmation code\n  //       );\n  //     }\n  //     setUser(loggedUser);\n  //     response = {\n  //       data: loggedUser,\n  //       status: \"SUCCESS\"\n  //     };\n  //   } catch (error: any) {\n  //     response = {\n  //       error: error,\n  //       status: \"FAIL\"\n  //     };\n  //   }\n  //   setLoading(false);\n  //   return response;\n  // };\n  // /**\n  //  * Verify One-time password from cognito\n  //  * @param user\n  //  * @param totpCode\n  //  * @return response - successful verification returns user object\n  //  */\n  // const verifyTOTP = async (user, totpCode: string) => {\n  //   let response;\n  //   Auth.verifyTotpToken(user, totpCode)\n  //     .then(user => {\n  //       // don't forget to set TOTP as the preferred MFA method\n  //       Auth.setPreferredMFA(user, \"TOTP\");\n  //       // ...\n  //       response = {\n  //         data: user,\n  //         status: \"SUCCESS\"\n  //       };\n  //     })\n  //     .catch(error => {\n  //       console.debug(\"ERROR: occured during verification\", error);\n  //       response = {\n  //         error: error,\n  //         status: \"FAIL\"\n  //       };\n  //     });\n  //   return response;\n  // };\n\n  /**\n   * Sign user out of cognito\n   * @return response - a successful sign-out returns a \"SUCCESS\" status\n   */\n\n\n  const signOut = async () => {\n    let response;\n    setLoading(true);\n\n    try {\n      let data = await Auth.signOut(); // User successfully signed out\n\n      clearCognitoData();\n      response = {\n        data: data,\n        status: \"SUCCESS\"\n      };\n      setLoading(false);\n    } catch (error) {\n      console.debug(\"ERROR: occured during sign out\", error);\n      response = {\n        error: error,\n        status: \"FAIL\"\n      };\n    }\n\n    return response;\n  };\n  /*  **********  COGNITO PASSWORD FUNCTIONS  **********  */\n\n  /**\n   * Change user's password\n   * @param user\n   * @param oldPassword\n   * @param newPassword\n   * @return response - A successful request returns a promise\n   */\n\n\n  const changePassword = async (user, oldPassword, newPassword) => {\n    let response;\n\n    try {\n      let data = await Auth.changePassword(user, oldPassword, newPassword);\n      response = {\n        data: data,\n        status: \"SUCCESS\"\n      };\n    } catch (error) {\n      response = {\n        error: error,\n        status: \"FAIL\"\n      };\n    }\n\n    return response;\n  };\n  /**\n   * Change a new user's password\n   * @param user\n   * @param newPassword\n   * @return response - A successful request returns a promise\n   */\n\n\n  const completeNewPassword = async (user, newPassword) => {\n    let response;\n    setLoading(true);\n\n    try {\n      let data = await Auth.completeNewPassword(user, // the Cognito User Object\n      newPassword // the new password\n      );\n\n      if (data.authenticationFlowType === \"CUSTOM_AUTH\") {\n        // custom auth complete password\n        setUser(data);\n      }\n\n      response = {\n        data: data,\n        status: \"SUCCESS\"\n      };\n    } catch (error) {\n      response = {\n        error: error,\n        status: \"FAIL\"\n      };\n    }\n\n    setLoading(false);\n    return response;\n  };\n  /**\n   * Send user a link to reset the password\n   * @param username\n   * @return response - A successful request returns a promise\n   */\n\n\n  const forgotPassword = async username => {\n    let response;\n    setLoading(true);\n\n    try {\n      let data = await Auth.forgotPassword(username, {\n        language: getI18n().resolvedLanguage\n      });\n      response = {\n        data: data,\n        status: \"SUCCESS\"\n      };\n    } catch (error) {\n      console.debug(\"ERROR: unexpected error occured \", error);\n      response = {\n        error: error,\n        status: \"FAIL\"\n      };\n    }\n\n    setLoading(false);\n    return response;\n  };\n  /**\n   * Sumbit the verification code along with the user's new password\n   * @param username\n   * @param code - MFA code from cognito\n   * @param new_password\n   * @return response - A promise on success\n   */\n\n\n  const forgotPasswordSubmit = async (username, code, newPassword) => {\n    let response;\n    setLoading(true);\n\n    try {\n      let data = await Auth.forgotPasswordSubmit(username, code, newPassword);\n      response = {\n        data: data,\n        status: \"SUCCESS\"\n      };\n    } catch (error) {\n      console.debug(\"ERROR: occured submiting the verification code \", error);\n      response = {\n        error: error,\n        status: \"FAIL\"\n      };\n    }\n\n    setLoading(false);\n    return response;\n  };\n  /**\n   * Send verification code to user's preffered method of communication\n   * @param attribute - user attribute to verify (email/sms)\n   * @return response - a promise data object on success\n   */\n\n\n  const userAttributeVerification = async attribute => {\n    let response = {};\n    Auth.verifyCurrentUserAttribute(attribute).then(data => {\n      // verification code was sent to 'attribute'\n      response = {\n        data: data,\n        status: \"SUCCESS\"\n      };\n    }).catch(error => {\n      console.debug(\"ERROR: occured verifying: \" + attribute + \" : \" + error);\n      response = {\n        error: error,\n        status: \"FAIL\"\n      };\n    });\n    return response;\n  };\n  /**\n   * Submit verification code for attribute\n   * @param attribute\n   * @param code\n   * @returns response - a promise data object on success\n   */\n\n\n  const userAttributeVerificationSubmit = async (attribute, code) => {\n    let response;\n    Auth.verifyCurrentUserAttributeSubmit(attribute, code).then(data => {\n      // 'attribute' verified\n      response = {\n        data: data,\n        status: \"SUCCESS\"\n      };\n    }).catch(error => {\n      response = {\n        error: error,\n        status: \"FAIL\"\n      };\n    });\n    return response;\n  };\n  /**\n   * Submit verification code for attribute\n   * @returns response - a promise data object on success\n   */\n\n\n  const refreshSession = async () => {\n    try {\n      const cognitoUser = await Auth.currentAuthenticatedUser();\n      const {\n        refreshToken\n      } = cognitoUser.getSignInUserSession();\n      cognitoUser.refreshSession(refreshToken, (err, session) => {\n        if (session) {\n          const {\n            accessToken\n          } = session;\n          let jwt = accessToken.getJwtToken();\n          let jwtObject = jwt_decode(jwt);\n          let expireTime = jwtObject.exp;\n          sessionStorage.removeItem(\"alertMessage\");\n          sessionStorage.setItem(\"expiry\", String(expireTime)); // NEW EXPIRY TIME\n        }\n      });\n    } catch (e) {\n      console.debug(\"ERROR: unable to refresh Token\", e);\n    }\n  };\n\n  const checkSessionExpired = async () => {\n    let response = {};\n\n    try {\n      let currentTime = Math.floor(Date.now() / 1000);\n      let expiryTime = Number(sessionStorage.getItem(\"expiry\")) || null;\n\n      if (expiryTime && currentTime > expiryTime) {\n        // logout expired session\n        sessionStorage.removeItem(\"expiry\");\n        response = {\n          showAlert: true,\n          severity: \"error\",\n          message: \"all.alert.session-expired\"\n        };\n        sessionStorage.setItem(\"alertMessage\", JSON.stringify(response));\n        await signOut();\n      } else {\n        // refresh session\n        await refreshSession();\n      }\n    } catch (e) {\n      console.debug(\"ERROR: checkSessionExpired failed \", e);\n    }\n\n    return response;\n  };\n  /**\n   * Submit verification code for attribute\n   * @returns response - a promise data object on success\n   */\n\n\n  const getSubId = async () => {\n    try {\n      const cognitoUser = await Auth.currentAuthenticatedUser();\n      const {\n        idToken\n      } = cognitoUser.getSignInUserSession();\n      return idToken.payload.sub;\n    } catch (e) {\n      console.debug(\"ERROR: unable to refresh Token\", e);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: {\n      user,\n      loading,\n      signIn,\n      signOut,\n      getUserSession,\n      changePassword,\n      completeNewPassword,\n      forgotPassword,\n      confirmSignIn,\n      verifyTOTP,\n      updateUserAttributes,\n      clearCognitoData,\n      forgotPasswordSubmit,\n      userAttributeVerification,\n      userAttributeVerificationSubmit,\n      refreshSession,\n      checkSessionExpired,\n      getSubId\n    },\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 511,\n    columnNumber: 5\n  }, this);\n};\n\n_s(AuthProvider, \"NiO5z6JIqzX62LS5UWDgIqbZYyY=\");\n\n_c = AuthProvider;\nexport const useAuth = () => {\n  _s2();\n\n  return useContext(AuthContext);\n};\n\n_s2(useAuth, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\n\nvar _c;\n\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"sources":["/Users/mohamedmaqil/Desktop/SchoolSystem/SchoolSystem-React-fe/src/providers/Auth.tsx"],"names":["React","useEffect","useState","createContext","useContext","Auth","jwt_decode","getI18n","axios","AuthContext","user","loading","signIn","username","password","signOut","getUserSession","changePassword","oldPassword","newPassword","completeNewPassword","forgotPassword","verifyTOTP","totpCode","updateUserAttributes","attributes","clearCognitoData","forgotPasswordSubmit","code","userAttributeVerification","attribute","userAttributeVerificationSubmit","refreshSession","checkSessionExpired","getSubId","AuthProvider","props","setUser","setLoading","getCurrentUser","loggedUser","currentAuthenticatedUser","error","console","debug","response","currentSession","then","data","status","catch","result","headers","post","process","env","REACT_APP_HOST","query","res","log","errors","alert","err","authenticationFlowType","language","resolvedLanguage","verifyCurrentUserAttribute","verifyCurrentUserAttributeSubmit","cognitoUser","refreshToken","getSignInUserSession","session","accessToken","jwt","getJwtToken","jwtObject","expireTime","exp","sessionStorage","removeItem","setItem","String","e","currentTime","Math","floor","Date","now","expiryTime","Number","getItem","showAlert","severity","message","JSON","stringify","idToken","payload","sub","confirmSignIn","children","useAuth"],"mappings":"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","sourcesContent":["import React, { useEffect, useState, createContext, useContext } from \"react\";\nimport { Auth } from \"aws-amplify\";\nimport { CognitoUserInterface } from \"@aws-amplify/ui-components\";\nimport jwt_decode from \"jwt-decode\";\nimport { getI18n } from \"react-i18next\";\nimport axios from \"axios\";\n\nconst AuthContext = createContext({\n  user: {} as CognitoUserInterface | null,\n  loading: true as boolean | null,\n\n  signIn: (username, password) => {},\n  signOut: () => {},\n  getUserSession: () => {},\n  changePassword: (user, oldPassword, newPassword) => {},\n  completeNewPassword: (user, newPassword) => {},\n  forgotPassword: username => {},\n  // confirmSignIn: (user, mfaCode) => {},\n  verifyTOTP: (user, totpCode) => {},\n  updateUserAttributes: (user, attributes) => {},\n  clearCognitoData: () => {},\n  forgotPasswordSubmit: (username, code, newPassword) => {},\n  userAttributeVerification: attribute => {},\n  userAttributeVerificationSubmit: (attribute, code) => {},\n  refreshSession: () => {},\n  checkSessionExpired: () => {},\n  getSubId: () => {}\n});\n\nexport const AuthProvider = props => {\n  const [user, setUser] = useState<CognitoUserInterface | null>(null);\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    /**\n        Get the current user's information.\n        Should be used after the user is logged in. Returns an error if not signed in\n        @return response - the result of the API call. returns data: the authenticated user object\n    */\n    const getCurrentUser = async () => {\n      setLoading(true);\n      if (user) {\n        // currentUser already exisiting\n        setUser(user);\n        setLoading(false);\n      } else {\n        try {\n          let loggedUser = await Auth.currentAuthenticatedUser();\n          setUser(loggedUser);\n\n          // currentUser checking aws\n        } catch (error: any) {\n          console.debug(\"ERROR: getCurrentUser \", error);\n        }\n        setLoading(false);\n      }\n    };\n\n    getCurrentUser();\n\n  }, [user]);\n\n  /*    COGNITO USER FUNCTIONS    */\n\n  /**\n        Get user's current session. Refreshes accessToken and idToken if expired and a valid\n        refresh token is presented\n        @return response - the result of the API call.\n        returns a CognitoUserSession object which contains JWT, idToken, and refreshToken\n    */\n  const getUserSession = async () => {\n    let response = {};\n    Auth.currentSession()\n      .then(data => {\n        response = {\n          data: data,\n          status: \"SUCCESS\"\n        };\n      })\n      .catch(error => {\n        console.debug(\"ERROR: occured while getting user session \", error);\n        response = {\n          error: error,\n          status: \"FAIL\"\n        };\n      });\n    return response;\n  };\n\n  /**\n        Update the user's attributes\n        @param attributes - object of user's attributes to be updated\n        @return response - the result from updating the attributes\n    */\n  const updateUserAttributes = async (user, attributes: object) => {\n    let response = {};\n    await Auth.updateUserAttributes(user, attributes)\n      .then(result => {\n        response = {\n          data: result,\n          status: \"SUCCESS\"\n        };\n      })\n      .catch(error => {\n        console.debug(\"ERROR: occured updating the user's attributes \", error);\n        response = {\n          error: error,\n          status: \"FAIL\"\n        };\n      });\n    return response;\n  };\n\n  // /**\n  //  * Clear all the current user's cognito data\n  //  */\n  // const clearCognitoData = () => {\n  //   setUser(null);\n  // };\n\n  /*  **********  COGNITO SIGN IN/OUT  **********  */\n\n  /**\n        Sign in and authenticate user.\n        First time users must enter a new password.\n        User's info is stored to avoid recalling the API\n        @return - Authenticated User's information - For TOTP returns code\n    */\n  const signIn = async (username: string, password: string) => {\n    let response;\n    setLoading(true);\n    // Headers\n    const headers = {\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    };\n\n    axios.post( process.env.REACT_APP_HOST + \"/graphql\", \n      {\n        query:\n          `\n          mutation {\n            signin(email:\"` +\n            username +\n            `\", password:\"` +\n            password +\n            `\")\n           }\n          `\n      }, headers\n      ) \n      .then(res => {\n        console.log(\"res: \", res)\n        if (res.data.errors) {\n          // dispatch(returnErrors(res.data.errors, \"LOGIN_FAIL\"));\n        } else {\n          console.log(\"res.data.data: \", res.data.data);\n          alert(\"success\")\n          // dispatch({ type: LOGIN_SUCCESS, payload: res.data.data });\n        }\n      })\n      .catch(err => {\n        console.log(\"err: \", err)\n        // dispatch(returnErrors(err, \"LOGIN_FAIL\"));\n        // dispatch({\n          // type: LOGIN_FAIL\n        // });\n      });\n    setLoading(false);\n    return response;\n  };\n\n  // /**\n  //  * Complete login for user after submitting MFA code\n  //  * @param user\n  //  * @param mfaCode\n  //  * @returns response - successful verification returns user object\n  //  */\n  // const confirmSignIn = async (user: any, mfaCode: string) => {\n  //   let response;\n  //   let loggedUser;\n  //   setLoading(true);\n  //   try {\n  //     if (user.challengeName === \"CUSTOM_CHALLENGE\") {\n  //       loggedUser = await Auth.sendCustomChallengeAnswer(\n  //         user, // Return object from Auth.signIn()\n  //         mfaCode // Confirmation code\n  //       );\n  //       // the answer was sent successfully, but it doesnt mean it is the right one\n  //       // so we should test if the user is authenticated now\n  //       // this will throw an error if the user is not yet authenticated:\n  //       await Auth.currentSession();\n  //     } else {\n  //       loggedUser = await Auth.confirmSignIn(\n  //         user, // Return object from Auth.signIn()\n  //         mfaCode // Confirmation code\n  //       );\n  //     }\n\n  //     setUser(loggedUser);\n  //     response = {\n  //       data: loggedUser,\n  //       status: \"SUCCESS\"\n  //     };\n  //   } catch (error: any) {\n  //     response = {\n  //       error: error,\n  //       status: \"FAIL\"\n  //     };\n  //   }\n  //   setLoading(false);\n  //   return response;\n  // };\n\n\n  // /**\n  //  * Verify One-time password from cognito\n  //  * @param user\n  //  * @param totpCode\n  //  * @return response - successful verification returns user object\n  //  */\n  // const verifyTOTP = async (user, totpCode: string) => {\n  //   let response;\n  //   Auth.verifyTotpToken(user, totpCode)\n  //     .then(user => {\n  //       // don't forget to set TOTP as the preferred MFA method\n  //       Auth.setPreferredMFA(user, \"TOTP\");\n  //       // ...\n  //       response = {\n  //         data: user,\n  //         status: \"SUCCESS\"\n  //       };\n  //     })\n  //     .catch(error => {\n  //       console.debug(\"ERROR: occured during verification\", error);\n  //       response = {\n  //         error: error,\n  //         status: \"FAIL\"\n  //       };\n  //     });\n  //   return response;\n  // };\n\n  /**\n   * Sign user out of cognito\n   * @return response - a successful sign-out returns a \"SUCCESS\" status\n   */\n  const signOut = async () => {\n    let response;\n    setLoading(true);\n    try {\n      let data = await Auth.signOut();\n      // User successfully signed out\n      clearCognitoData();\n      response = {\n        data: data,\n        status: \"SUCCESS\"\n      };\n      setLoading(false);\n    } catch (error: any) {\n      console.debug(\"ERROR: occured during sign out\", error);\n      response = {\n        error: error,\n        status: \"FAIL\"\n      };\n    }\n    return response;\n  };\n\n  /*  **********  COGNITO PASSWORD FUNCTIONS  **********  */\n\n  /**\n   * Change user's password\n   * @param user\n   * @param oldPassword\n   * @param newPassword\n   * @return response - A successful request returns a promise\n   */\n  const changePassword = async (\n    user: any,\n    oldPassword: string,\n    newPassword: string\n  ) => {\n    let response;\n    try {\n      let data = await Auth.changePassword(user, oldPassword, newPassword);\n      response = {\n        data: data,\n        status: \"SUCCESS\"\n      };\n    } catch (error: any) {\n      response = {\n        error: error,\n        status: \"FAIL\"\n      };\n    }\n    return response;\n  };\n\n  /**\n   * Change a new user's password\n   * @param user\n   * @param newPassword\n   * @return response - A successful request returns a promise\n   */\n  const completeNewPassword = async (user: any, newPassword: string) => {\n    let response;\n    setLoading(true);\n    try {\n      let data = await Auth.completeNewPassword(\n        user, // the Cognito User Object\n        newPassword // the new password\n      );\n\n      if (data.authenticationFlowType === \"CUSTOM_AUTH\") {\n        // custom auth complete password\n        setUser(data);\n      }\n\n      response = {\n        data: data,\n        status: \"SUCCESS\"\n      };\n    } catch (error: any) {\n      response = {\n        error: error,\n        status: \"FAIL\"\n      };\n    }\n    setLoading(false);\n    return response;\n  };\n\n  /**\n   * Send user a link to reset the password\n   * @param username\n   * @return response - A successful request returns a promise\n   */\n  const forgotPassword = async (username: string) => {\n    let response;\n    setLoading(true);\n    try {\n      let data = await Auth.forgotPassword(username, {\n        language: getI18n().resolvedLanguage\n      });\n      response = {\n        data: data,\n        status: \"SUCCESS\"\n      };\n    } catch (error: any) {\n      console.debug(\"ERROR: unexpected error occured \", error);\n      response = {\n        error: error,\n        status: \"FAIL\"\n      };\n    }\n    setLoading(false);\n    return response;\n  };\n\n  /**\n   * Sumbit the verification code along with the user's new password\n   * @param username\n   * @param code - MFA code from cognito\n   * @param new_password\n   * @return response - A promise on success\n   */\n  const forgotPasswordSubmit = async (\n    username: string,\n    code: string,\n    newPassword: string\n  ) => {\n    let response;\n    setLoading(true);\n    try {\n      let data = await Auth.forgotPasswordSubmit(username, code, newPassword);\n      response = {\n        data: data,\n        status: \"SUCCESS\"\n      };\n    } catch (error: any) {\n      console.debug(\"ERROR: occured submiting the verification code \", error);\n      response = {\n        error: error,\n        status: \"FAIL\"\n      };\n    }\n    setLoading(false);\n    return response;\n  };\n\n  /**\n   * Send verification code to user's preffered method of communication\n   * @param attribute - user attribute to verify (email/sms)\n   * @return response - a promise data object on success\n   */\n  const userAttributeVerification = async (attribute: string) => {\n    let response = {};\n    Auth.verifyCurrentUserAttribute(attribute)\n      .then(data => {\n        // verification code was sent to 'attribute'\n        response = {\n          data: data,\n          status: \"SUCCESS\"\n        };\n      })\n      .catch(error => {\n        console.debug(\"ERROR: occured verifying: \" + attribute + \" : \" + error);\n        response = {\n          error: error,\n          status: \"FAIL\"\n        };\n      });\n    return response;\n  };\n\n  /**\n   * Submit verification code for attribute\n   * @param attribute\n   * @param code\n   * @returns response - a promise data object on success\n   */\n  const userAttributeVerificationSubmit = async (\n    attribute: string,\n    code: string\n  ) => {\n    let response;\n    Auth.verifyCurrentUserAttributeSubmit(attribute, code)\n      .then(data => {\n        // 'attribute' verified\n        response = {\n          data: data,\n          status: \"SUCCESS\"\n        };\n      })\n      .catch(error => {\n        response = {\n          error: error,\n          status: \"FAIL\"\n        };\n      });\n    return response;\n  };\n\n  /**\n   * Submit verification code for attribute\n   * @returns response - a promise data object on success\n   */\n  const refreshSession = async () => {\n    try {\n      const cognitoUser = await Auth.currentAuthenticatedUser();\n      const { refreshToken } = cognitoUser.getSignInUserSession();\n      cognitoUser.refreshSession(refreshToken, (err, session) => {\n        if (session) {\n          const { accessToken } = session;\n          let jwt = accessToken.getJwtToken();\n          let jwtObject = jwt_decode(jwt) as any;\n          let expireTime = jwtObject.exp as number;\n          sessionStorage.removeItem(\"alertMessage\");\n          sessionStorage.setItem(\"expiry\", String(expireTime));\n          // NEW EXPIRY TIME\n        }\n      });\n    } catch (e) {\n      console.debug(\"ERROR: unable to refresh Token\", e);\n    }\n  };\n\n  const checkSessionExpired = async () => {\n    let response = {};\n    try {\n      let currentTime = Math.floor(Date.now() / 1000);\n      let expiryTime = Number(sessionStorage.getItem(\"expiry\")) || null;\n      if (expiryTime && currentTime > expiryTime) {\n        // logout expired session\n        sessionStorage.removeItem(\"expiry\");\n\n        response = {\n          showAlert: true,\n          severity: \"error\",\n          message: \"all.alert.session-expired\"\n        };\n        sessionStorage.setItem(\"alertMessage\", JSON.stringify(response));\n        await signOut();\n      } else {\n        // refresh session\n        await refreshSession();\n      }\n    } catch (e) {\n      console.debug(\"ERROR: checkSessionExpired failed \", e);\n    }\n    return response;\n  };\n\n  /**\n   * Submit verification code for attribute\n   * @returns response - a promise data object on success\n   */\n  const getSubId = async () => {\n    try {\n      const cognitoUser = await Auth.currentAuthenticatedUser();\n      const { idToken } = cognitoUser.getSignInUserSession();\n      return idToken.payload.sub;\n    } catch (e) {\n      console.debug(\"ERROR: unable to refresh Token\", e);\n    }\n  };\n\n  return (\n    <AuthContext.Provider\n      value={{\n        user,\n        loading,\n        signIn,\n        signOut,\n        getUserSession,\n        changePassword,\n        completeNewPassword,\n        forgotPassword,\n        confirmSignIn,\n        verifyTOTP,\n        updateUserAttributes,\n        clearCognitoData,\n        forgotPasswordSubmit,\n        userAttributeVerification,\n        userAttributeVerificationSubmit,\n        refreshSession,\n        checkSessionExpired,\n        getSubId\n      }}\n    >\n      {props.children}\n    </AuthContext.Provider>\n  );\n};\n\nexport const useAuth = () => {\n  return useContext(AuthContext);\n};\n"]},"metadata":{},"sourceType":"module"}