{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { createContext, useContext } from \"react\";\nconst AuthContext = /*#__PURE__*/createContext({\n  user: {},\n  loading: true,\n  signIn: (username, password) => {},\n  signOut: () => {},\n  getUserSession: () => {},\n  changePassword: (user, oldPassword, newPassword) => {},\n  completeNewPassword: (user, newPassword) => {},\n  forgotPassword: username => {},\n  confirmSignIn: (user, mfaCode) => {},\n  verifyTOTP: (user, totpCode) => {},\n  updateUserAttributes: (user, attributes) => {},\n  clearCognitoData: () => {},\n  forgotPasswordSubmit: (username, code, newPassword) => {},\n  userAttributeVerification: attribute => {},\n  userAttributeVerificationSubmit: (attribute, code) => {},\n  refreshSession: () => {},\n  checkSessionExpired: () => {},\n  getSubId: () => {}\n}); // export const AuthProvider = props => {\n//   const [user, setUser] = useState<CognitoUserInterface | null>(null);\n//   const [loading, setLoading] = useState(true);\n//   useEffect(() => {\n//     /**\n//         Get the current user's information.\n//         Should be used after the user is logged in. Returns an error if not signed in\n//         @return response - the result of the API call. returns data: the authenticated user object\n//     */\n//     const getCurrentUser = async () => {\n//       setLoading(true);\n//       if (user) {\n//         // currentUser already exisiting\n//         setUser(user);\n//         setLoading(false);\n//       } else {\n//         try {\n//           let loggedUser = await Auth.currentAuthenticatedUser();\n//           setUser(loggedUser);\n//           // currentUser checking aws\n//         } catch (error: any) {\n//           console.debug(\"ERROR: getCurrentUser \", error);\n//         }\n//         setLoading(false);\n//       }\n//     };\n//     getCurrentUser();\n//   }, [user]);\n//   /*    COGNITO USER FUNCTIONS    */\n//   /**\n//         Get user's current session. Refreshes accessToken and idToken if expired and a valid\n//         refresh token is presented\n//         @return response - the result of the API call.\n//         returns a CognitoUserSession object which contains JWT, idToken, and refreshToken\n//     */\n//   const getUserSession = async () => {\n//     let response = {};\n//     Auth.currentSession()\n//       .then(data => {\n//         response = {\n//           data: data,\n//           status: \"SUCCESS\"\n//         };\n//       })\n//       .catch(error => {\n//         console.debug(\"ERROR: occured while getting user session \", error);\n//         response = {\n//           error: error,\n//           status: \"FAIL\"\n//         };\n//       });\n//     return response;\n//   };\n//   /**\n//         Update the user's attributes\n//         @param attributes - object of user's attributes to be updated\n//         @return response - the result from updating the attributes\n//     */\n//   const updateUserAttributes = async (user, attributes: object) => {\n//     let response = {};\n//     await Auth.updateUserAttributes(user, attributes)\n//       .then(result => {\n//         response = {\n//           data: result,\n//           status: \"SUCCESS\"\n//         };\n//       })\n//       .catch(error => {\n//         console.debug(\"ERROR: occured updating the user's attributes \", error);\n//         response = {\n//           error: error,\n//           status: \"FAIL\"\n//         };\n//       });\n//     return response;\n//   };\n//   /**\n//    * Clear all the current user's cognito data\n//    */\n//   const clearCognitoData = () => {\n//     setUser(null);\n//   };\n//   /*  **********  COGNITO SIGN IN/OUT  **********  */\n//   /**\n//         Sign in and authenticate user.\n//         First time users must enter a new password.\n//         User's info is stored to avoid recalling the API\n//         @return - Authenticated User's information - For TOTP returns code\n//     */\n//   const signIn = async (username: string, password: string) => {\n//     let response;\n//     setLoading(true);\n//     try {\n//       let user = await Auth.signIn({\n//         username,\n//         password,\n//         validationData: { language: getI18n().resolvedLanguage }\n//       });\n//       if (user.preferredMFA === \"NOMFA\") {\n//         setUser(user);\n//         response = {\n//           data: user,\n//           status: \"SUCCESS\"\n//         };\n//       } else {\n//         response = user;\n//       }\n//     } catch (error: any) {\n//       console.debug(\"ERROR: occured while getting user information \", error.message);\n//       response = {\n//         error: error,\n//         status: \"FAIL\"\n//       };\n//     }\n//     setLoading(false);\n//     return response;\n//   };\n//   /**\n//    * Complete login for user after submitting MFA code\n//    * @param user\n//    * @param mfaCode\n//    * @returns response - successful verification returns user object\n//    */\n//   const confirmSignIn = async (user: any, mfaCode: string) => {\n//     let response;\n//     let loggedUser;\n//     setLoading(true);\n//     try {\n//       if (user.challengeName === \"CUSTOM_CHALLENGE\") {\n//         loggedUser = await Auth.sendCustomChallengeAnswer(\n//           user, // Return object from Auth.signIn()\n//           mfaCode // Confirmation code\n//         );\n//       } else {\n//         loggedUser = await Auth.confirmSignIn(\n//           user, // Return object from Auth.signIn()\n//           mfaCode // Confirmation code\n//         );\n//       }\n//       setUser(loggedUser);\n//       response = {\n//         data: loggedUser,\n//         status: \"SUCCESS\"\n//       };\n//     } catch (error: any) {\n//       response = {\n//         error: error,\n//         status: \"FAIL\"\n//       };\n//     }\n//     setLoading(false);\n//     return response;\n//   };\n//   /**\n//    * Verify One-time password from cognito\n//    * @param user\n//    * @param totpCode\n//    * @return response - successful verification returns user object\n//    */\n//   const verifyTOTP = async (user, totpCode: string) => {\n//     let response;\n//     Auth.verifyTotpToken(user, totpCode)\n//       .then(user => {\n//         // don't forget to set TOTP as the preferred MFA method\n//         Auth.setPreferredMFA(user, \"TOTP\");\n//         // ...\n//         response = {\n//           data: user,\n//           status: \"SUCCESS\"\n//         };\n//       })\n//       .catch(error => {\n//         console.debug(\"ERROR: occured during verification\", error);\n//         response = {\n//           error: error,\n//           status: \"FAIL\"\n//         };\n//       });\n//     return response;\n//   };\n//   /**\n//    * Sign user out of cognito\n//    * @return response - a successful sign-out returns a \"SUCCESS\" status\n//    */\n//   const signOut = async () => {\n//     let response;\n//     setLoading(true);\n//     try {\n//       let data = await Auth.signOut();\n//       // User successfully signed out\n//       clearCognitoData();\n//       response = {\n//         data: data,\n//         status: \"SUCCESS\"\n//       };\n//       setLoading(false);\n//     } catch (error: any) {\n//       console.debug(\"ERROR: occured during sign out\", error);\n//       response = {\n//         error: error,\n//         status: \"FAIL\"\n//       };\n//     }\n//     return response;\n//   };\n//   /*  **********  COGNITO PASSWORD FUNCTIONS  **********  */\n//   /**\n//    * Change user's password\n//    * @param user\n//    * @param oldPassword\n//    * @param newPassword\n//    * @return response - A successful request returns a promise\n//    */\n//   const changePassword = async (\n//     user: any,\n//     oldPassword: string,\n//     newPassword: string\n//   ) => {\n//     let response;\n//     try {\n//       let data = await Auth.changePassword(user, oldPassword, newPassword);\n//       response = {\n//         data: data,\n//         status: \"SUCCESS\"\n//       };\n//     } catch (error: any) {\n//       response = {\n//         error: error,\n//         status: \"FAIL\"\n//       };\n//     }\n//     return response;\n//   };\n//   /**\n//    * Change a new user's password\n//    * @param user\n//    * @param newPassword\n//    * @return response - A successful request returns a promise\n//    */\n//   const completeNewPassword = async (user: any, newPassword: string) => {\n//     let response;\n//     setLoading(true);\n//     try {\n//       let data = await Auth.completeNewPassword(\n//         user, // the Cognito User Object\n//         newPassword // the new password\n//       );\n//       if (data.authenticationFlowType === \"CUSTOM_AUTH\") {\n//         // custom auth complete password\n//         setUser(data);\n//       }\n//       response = {\n//         data: data,\n//         status: \"SUCCESS\"\n//       };\n//     } catch (error: any) {\n//       response = {\n//         error: error,\n//         status: \"FAIL\"\n//       };\n//     }\n//     setLoading(false);\n//     return response;\n//   };\n//   /**\n//    * Send user a link to reset the password\n//    * @param username\n//    * @return response - A successful request returns a promise\n//    */\n//   const forgotPassword = async (username: string) => {\n//     let response;\n//     setLoading(true);\n//     try {\n//       let data = await Auth.forgotPassword(username, {\n//         language: getI18n().resolvedLanguage\n//       });\n//       response = {\n//         data: data,\n//         status: \"SUCCESS\"\n//       };\n//     } catch (error: any) {\n//       console.debug(\"ERROR: unexpected error occured \", error);\n//       response = {\n//         error: error,\n//         status: \"FAIL\"\n//       };\n//     }\n//     setLoading(false);\n//     return response;\n//   };\n//   /**\n//    * Sumbit the verification code along with the user's new password\n//    * @param username\n//    * @param code - MFA code from cognito\n//    * @param new_password\n//    * @return response - A promise on success\n//    */\n//   const forgotPasswordSubmit = async (\n//     username: string,\n//     code: string,\n//     newPassword: string\n//   ) => {\n//     let response;\n//     setLoading(true);\n//     try {\n//       let data = await Auth.forgotPasswordSubmit(username, code, newPassword);\n//       response = {\n//         data: data,\n//         status: \"SUCCESS\"\n//       };\n//     } catch (error: any) {\n//       console.debug(\"ERROR: occured submiting the verification code \", error);\n//       response = {\n//         error: error,\n//         status: \"FAIL\"\n//       };\n//     }\n//     setLoading(false);\n//     return response;\n//   };\n//   /**\n//    * Send verification code to user's preffered method of communication\n//    * @param attribute - user attribute to verify (email/sms)\n//    * @return response - a promise data object on success\n//    */\n//   const userAttributeVerification = async (attribute: string) => {\n//     let response = {};\n//     Auth.verifyCurrentUserAttribute(attribute)\n//       .then(data => {\n//         // verification code was sent to 'attribute'\n//         response = {\n//           data: data,\n//           status: \"SUCCESS\"\n//         };\n//       })\n//       .catch(error => {\n//         console.debug(\"ERROR: occured verifying: \" + attribute + \" : \" + error);\n//         response = {\n//           error: error,\n//           status: \"FAIL\"\n//         };\n//       });\n//     return response;\n//   };\n//   /**\n//    * Submit verification code for attribute\n//    * @param attribute\n//    * @param code\n//    * @returns response - a promise data object on success\n//    */\n//   const userAttributeVerificationSubmit = async (\n//     attribute: string,\n//     code: string\n//   ) => {\n//     let response;\n//     Auth.verifyCurrentUserAttributeSubmit(attribute, code)\n//       .then(data => {\n//         // 'attribute' verified\n//         response = {\n//           data: data,\n//           status: \"SUCCESS\"\n//         };\n//       })\n//       .catch(error => {\n//         response = {\n//           error: error,\n//           status: \"FAIL\"\n//         };\n//       });\n//     return response;\n//   };\n//   /**\n//    * Submit verification code for attribute\n//    * @returns response - a promise data object on success\n//    */\n//   const refreshSession = async () => {\n//     try {\n//       const cognitoUser = await Auth.currentAuthenticatedUser();\n//       const { refreshToken } = cognitoUser.getSignInUserSession();\n//       cognitoUser.refreshSession(refreshToken, (err, session) => {\n//         if (session) {\n//           const { accessToken } = session;\n//           let jwt = accessToken.getJwtToken();\n//           let jwtObject = jwt_decode(jwt) as any;\n//           let expireTime = jwtObject.exp as number;\n//           sessionStorage.removeItem(\"alertMessage\");\n//           sessionStorage.setItem(\"expiry\", String(expireTime));\n//           // NEW EXPIRY TIME\n//         }\n//       });\n//     } catch (e) {\n//       console.debug(\"ERROR: unable to refresh Token\", e);\n//     }\n//   };\n//   const checkSessionExpired = async () => {\n//     let response = {};\n//     try {\n//       let currentTime = Math.floor(Date.now() / 1000);\n//       let expiryTime = Number(sessionStorage.getItem(\"expiry\")) || null;\n//       if (expiryTime && currentTime > expiryTime) {\n//         // logout expired session\n//         sessionStorage.removeItem(\"expiry\");\n//         response = {\n//           showAlert: true,\n//           severity: \"error\",\n//           message: \"all.alert.session-expired\"\n//         };\n//         sessionStorage.setItem(\"alertMessage\", JSON.stringify(response));\n//         await signOut();\n//       } else {\n//         // refresh session\n//         await refreshSession();\n//       }\n//     } catch (e) {\n//       console.debug(\"ERROR: checkSessionExpired failed \", e);\n//     }\n//     return response;\n//   };\n//   /**\n//    * Submit verification code for attribute\n//    * @returns response - a promise data object on success\n//    */\n//   const getSubId = async () => {\n//     try {\n//       const cognitoUser = await Auth.currentAuthenticatedUser();\n//       const { idToken } = cognitoUser.getSignInUserSession();\n//       return idToken.payload.sub;\n//     } catch (e) {\n//       console.debug(\"ERROR: unable to refresh Token\", e);\n//     }\n//   };\n//   return (\n//     <AuthContext.Provider\n//       value={{\n//         user,\n//         loading,\n//         signIn,\n//         signOut,\n//         getUserSession,\n//         changePassword,\n//         completeNewPassword,\n//         forgotPassword,\n//         confirmSignIn,\n//         verifyTOTP,\n//         updateUserAttributes,\n//         clearCognitoData,\n//         forgotPasswordSubmit,\n//         userAttributeVerification,\n//         userAttributeVerificationSubmit,\n//         refreshSession,\n//         checkSessionExpired,\n//         getSubId\n//       }}\n//     >\n//       {props.children}\n//     </AuthContext.Provider>\n//   );\n// };\n\nexport const useAuth = () => {\n  _s();\n\n  return useContext(AuthContext);\n};\n\n_s(useAuth, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");","map":{"version":3,"sources":["/Users/mohamedmaqil/Desktop/RIVO/rivo-portal-ui/src/providers/Auth.tsx"],"names":["createContext","useContext","AuthContext","user","loading","signIn","username","password","signOut","getUserSession","changePassword","oldPassword","newPassword","completeNewPassword","forgotPassword","confirmSignIn","mfaCode","verifyTOTP","totpCode","updateUserAttributes","attributes","clearCognitoData","forgotPasswordSubmit","code","userAttributeVerification","attribute","userAttributeVerificationSubmit","refreshSession","checkSessionExpired","getSubId","useAuth"],"mappings":";;AAAA,SAAqCA,aAArC,EAAoDC,UAApD,QAAsE,OAAtE;AAMA,MAAMC,WAAW,gBAAGF,aAAa,CAAC;AAChCG,EAAAA,IAAI,EAAE,EAD0B;AAEhCC,EAAAA,OAAO,EAAE,IAFuB;AAIhCC,EAAAA,MAAM,EAAE,CAACC,QAAD,EAAWC,QAAX,KAAwB,CAAE,CAJF;AAKhCC,EAAAA,OAAO,EAAE,MAAM,CAAE,CALe;AAMhCC,EAAAA,cAAc,EAAE,MAAM,CAAE,CANQ;AAOhCC,EAAAA,cAAc,EAAE,CAACP,IAAD,EAAOQ,WAAP,EAAoBC,WAApB,KAAoC,CAAE,CAPtB;AAQhCC,EAAAA,mBAAmB,EAAE,CAACV,IAAD,EAAOS,WAAP,KAAuB,CAAE,CARd;AAShCE,EAAAA,cAAc,EAAER,QAAQ,IAAI,CAAE,CATE;AAUhCS,EAAAA,aAAa,EAAE,CAACZ,IAAD,EAAOa,OAAP,KAAmB,CAAE,CAVJ;AAWhCC,EAAAA,UAAU,EAAE,CAACd,IAAD,EAAOe,QAAP,KAAoB,CAAE,CAXF;AAYhCC,EAAAA,oBAAoB,EAAE,CAAChB,IAAD,EAAOiB,UAAP,KAAsB,CAAE,CAZd;AAahCC,EAAAA,gBAAgB,EAAE,MAAM,CAAE,CAbM;AAchCC,EAAAA,oBAAoB,EAAE,CAAChB,QAAD,EAAWiB,IAAX,EAAiBX,WAAjB,KAAiC,CAAE,CAdzB;AAehCY,EAAAA,yBAAyB,EAAEC,SAAS,IAAI,CAAE,CAfV;AAgBhCC,EAAAA,+BAA+B,EAAE,CAACD,SAAD,EAAYF,IAAZ,KAAqB,CAAE,CAhBxB;AAiBhCI,EAAAA,cAAc,EAAE,MAAM,CAAE,CAjBQ;AAkBhCC,EAAAA,mBAAmB,EAAE,MAAM,CAAE,CAlBG;AAmBhCC,EAAAA,QAAQ,EAAE,MAAM,CAAE;AAnBc,CAAD,CAAjC,C,CAsjB;AACD,CAFM;;GAAM4B,O","sourcesContent":["import React, { useEffect, useState, createContext, useContext } from \"react\";\nimport { Auth } from \"aws-amplify\";\nimport { CognitoUserInterface } from \"@aws-amplify/ui-components\";\nimport jwt_decode from \"jwt-decode\";\nimport { getI18n } from \"react-i18next\";\n\nconst AuthContext = createContext({\n  user: {} as CognitoUserInterface | null,\n  loading: true as boolean | null,\n\n  signIn: (username, password) => {},\n  signOut: () => {},\n  getUserSession: () => {},\n  changePassword: (user, oldPassword, newPassword) => {},\n  completeNewPassword: (user, newPassword) => {},\n  forgotPassword: username => {},\n  confirmSignIn: (user, mfaCode) => {},\n  verifyTOTP: (user, totpCode) => {},\n  updateUserAttributes: (user, attributes) => {},\n  clearCognitoData: () => {},\n  forgotPasswordSubmit: (username, code, newPassword) => {},\n  userAttributeVerification: attribute => {},\n  userAttributeVerificationSubmit: (attribute, code) => {},\n  refreshSession: () => {},\n  checkSessionExpired: () => {},\n  getSubId: () => {}\n});\n\n// export const AuthProvider = props => {\n//   const [user, setUser] = useState<CognitoUserInterface | null>(null);\n//   const [loading, setLoading] = useState(true);\n\n//   useEffect(() => {\n//     /**\n//         Get the current user's information.\n//         Should be used after the user is logged in. Returns an error if not signed in\n//         @return response - the result of the API call. returns data: the authenticated user object\n//     */\n//     const getCurrentUser = async () => {\n//       setLoading(true);\n//       if (user) {\n//         // currentUser already exisiting\n//         setUser(user);\n//         setLoading(false);\n//       } else {\n//         try {\n//           let loggedUser = await Auth.currentAuthenticatedUser();\n//           setUser(loggedUser);\n\n//           // currentUser checking aws\n//         } catch (error: any) {\n//           console.debug(\"ERROR: getCurrentUser \", error);\n//         }\n//         setLoading(false);\n//       }\n//     };\n\n//     getCurrentUser();\n\n//   }, [user]);\n\n//   /*    COGNITO USER FUNCTIONS    */\n\n//   /**\n//         Get user's current session. Refreshes accessToken and idToken if expired and a valid\n//         refresh token is presented\n//         @return response - the result of the API call.\n//         returns a CognitoUserSession object which contains JWT, idToken, and refreshToken\n//     */\n//   const getUserSession = async () => {\n//     let response = {};\n//     Auth.currentSession()\n//       .then(data => {\n//         response = {\n//           data: data,\n//           status: \"SUCCESS\"\n//         };\n//       })\n//       .catch(error => {\n//         console.debug(\"ERROR: occured while getting user session \", error);\n//         response = {\n//           error: error,\n//           status: \"FAIL\"\n//         };\n//       });\n//     return response;\n//   };\n\n//   /**\n//         Update the user's attributes\n//         @param attributes - object of user's attributes to be updated\n//         @return response - the result from updating the attributes\n//     */\n//   const updateUserAttributes = async (user, attributes: object) => {\n//     let response = {};\n//     await Auth.updateUserAttributes(user, attributes)\n//       .then(result => {\n//         response = {\n//           data: result,\n//           status: \"SUCCESS\"\n//         };\n//       })\n//       .catch(error => {\n//         console.debug(\"ERROR: occured updating the user's attributes \", error);\n//         response = {\n//           error: error,\n//           status: \"FAIL\"\n//         };\n//       });\n//     return response;\n//   };\n\n//   /**\n//    * Clear all the current user's cognito data\n//    */\n//   const clearCognitoData = () => {\n//     setUser(null);\n//   };\n\n//   /*  **********  COGNITO SIGN IN/OUT  **********  */\n\n//   /**\n//         Sign in and authenticate user.\n//         First time users must enter a new password.\n//         User's info is stored to avoid recalling the API\n//         @return - Authenticated User's information - For TOTP returns code\n//     */\n//   const signIn = async (username: string, password: string) => {\n//     let response;\n//     setLoading(true);\n//     try {\n//       let user = await Auth.signIn({\n//         username,\n//         password,\n//         validationData: { language: getI18n().resolvedLanguage }\n//       });\n\n//       if (user.preferredMFA === \"NOMFA\") {\n//         setUser(user);\n//         response = {\n//           data: user,\n//           status: \"SUCCESS\"\n//         };\n//       } else {\n//         response = user;\n//       }\n//     } catch (error: any) {\n//       console.debug(\"ERROR: occured while getting user information \", error.message);\n//       response = {\n//         error: error,\n//         status: \"FAIL\"\n//       };\n//     }\n//     setLoading(false);\n//     return response;\n//   };\n\n//   /**\n//    * Complete login for user after submitting MFA code\n//    * @param user\n//    * @param mfaCode\n//    * @returns response - successful verification returns user object\n//    */\n//   const confirmSignIn = async (user: any, mfaCode: string) => {\n//     let response;\n//     let loggedUser;\n//     setLoading(true);\n//     try {\n//       if (user.challengeName === \"CUSTOM_CHALLENGE\") {\n//         loggedUser = await Auth.sendCustomChallengeAnswer(\n//           user, // Return object from Auth.signIn()\n//           mfaCode // Confirmation code\n//         );\n//       } else {\n//         loggedUser = await Auth.confirmSignIn(\n//           user, // Return object from Auth.signIn()\n//           mfaCode // Confirmation code\n//         );\n//       }\n\n//       setUser(loggedUser);\n//       response = {\n//         data: loggedUser,\n//         status: \"SUCCESS\"\n//       };\n//     } catch (error: any) {\n//       response = {\n//         error: error,\n//         status: \"FAIL\"\n//       };\n//     }\n//     setLoading(false);\n//     return response;\n//   };\n\n//   /**\n//    * Verify One-time password from cognito\n//    * @param user\n//    * @param totpCode\n//    * @return response - successful verification returns user object\n//    */\n//   const verifyTOTP = async (user, totpCode: string) => {\n//     let response;\n//     Auth.verifyTotpToken(user, totpCode)\n//       .then(user => {\n//         // don't forget to set TOTP as the preferred MFA method\n//         Auth.setPreferredMFA(user, \"TOTP\");\n//         // ...\n//         response = {\n//           data: user,\n//           status: \"SUCCESS\"\n//         };\n//       })\n//       .catch(error => {\n//         console.debug(\"ERROR: occured during verification\", error);\n//         response = {\n//           error: error,\n//           status: \"FAIL\"\n//         };\n//       });\n//     return response;\n//   };\n\n//   /**\n//    * Sign user out of cognito\n//    * @return response - a successful sign-out returns a \"SUCCESS\" status\n//    */\n//   const signOut = async () => {\n//     let response;\n//     setLoading(true);\n//     try {\n//       let data = await Auth.signOut();\n//       // User successfully signed out\n//       clearCognitoData();\n//       response = {\n//         data: data,\n//         status: \"SUCCESS\"\n//       };\n//       setLoading(false);\n//     } catch (error: any) {\n//       console.debug(\"ERROR: occured during sign out\", error);\n//       response = {\n//         error: error,\n//         status: \"FAIL\"\n//       };\n//     }\n//     return response;\n//   };\n\n//   /*  **********  COGNITO PASSWORD FUNCTIONS  **********  */\n\n//   /**\n//    * Change user's password\n//    * @param user\n//    * @param oldPassword\n//    * @param newPassword\n//    * @return response - A successful request returns a promise\n//    */\n//   const changePassword = async (\n//     user: any,\n//     oldPassword: string,\n//     newPassword: string\n//   ) => {\n//     let response;\n//     try {\n//       let data = await Auth.changePassword(user, oldPassword, newPassword);\n//       response = {\n//         data: data,\n//         status: \"SUCCESS\"\n//       };\n//     } catch (error: any) {\n//       response = {\n//         error: error,\n//         status: \"FAIL\"\n//       };\n//     }\n//     return response;\n//   };\n\n//   /**\n//    * Change a new user's password\n//    * @param user\n//    * @param newPassword\n//    * @return response - A successful request returns a promise\n//    */\n//   const completeNewPassword = async (user: any, newPassword: string) => {\n//     let response;\n//     setLoading(true);\n//     try {\n//       let data = await Auth.completeNewPassword(\n//         user, // the Cognito User Object\n//         newPassword // the new password\n//       );\n\n//       if (data.authenticationFlowType === \"CUSTOM_AUTH\") {\n//         // custom auth complete password\n//         setUser(data);\n//       }\n\n//       response = {\n//         data: data,\n//         status: \"SUCCESS\"\n//       };\n//     } catch (error: any) {\n//       response = {\n//         error: error,\n//         status: \"FAIL\"\n//       };\n//     }\n//     setLoading(false);\n//     return response;\n//   };\n\n//   /**\n//    * Send user a link to reset the password\n//    * @param username\n//    * @return response - A successful request returns a promise\n//    */\n//   const forgotPassword = async (username: string) => {\n//     let response;\n//     setLoading(true);\n//     try {\n//       let data = await Auth.forgotPassword(username, {\n//         language: getI18n().resolvedLanguage\n//       });\n//       response = {\n//         data: data,\n//         status: \"SUCCESS\"\n//       };\n//     } catch (error: any) {\n//       console.debug(\"ERROR: unexpected error occured \", error);\n//       response = {\n//         error: error,\n//         status: \"FAIL\"\n//       };\n//     }\n//     setLoading(false);\n//     return response;\n//   };\n\n//   /**\n//    * Sumbit the verification code along with the user's new password\n//    * @param username\n//    * @param code - MFA code from cognito\n//    * @param new_password\n//    * @return response - A promise on success\n//    */\n//   const forgotPasswordSubmit = async (\n//     username: string,\n//     code: string,\n//     newPassword: string\n//   ) => {\n//     let response;\n//     setLoading(true);\n//     try {\n//       let data = await Auth.forgotPasswordSubmit(username, code, newPassword);\n//       response = {\n//         data: data,\n//         status: \"SUCCESS\"\n//       };\n//     } catch (error: any) {\n//       console.debug(\"ERROR: occured submiting the verification code \", error);\n//       response = {\n//         error: error,\n//         status: \"FAIL\"\n//       };\n//     }\n//     setLoading(false);\n//     return response;\n//   };\n\n//   /**\n//    * Send verification code to user's preffered method of communication\n//    * @param attribute - user attribute to verify (email/sms)\n//    * @return response - a promise data object on success\n//    */\n//   const userAttributeVerification = async (attribute: string) => {\n//     let response = {};\n//     Auth.verifyCurrentUserAttribute(attribute)\n//       .then(data => {\n//         // verification code was sent to 'attribute'\n//         response = {\n//           data: data,\n//           status: \"SUCCESS\"\n//         };\n//       })\n//       .catch(error => {\n//         console.debug(\"ERROR: occured verifying: \" + attribute + \" : \" + error);\n//         response = {\n//           error: error,\n//           status: \"FAIL\"\n//         };\n//       });\n//     return response;\n//   };\n\n//   /**\n//    * Submit verification code for attribute\n//    * @param attribute\n//    * @param code\n//    * @returns response - a promise data object on success\n//    */\n//   const userAttributeVerificationSubmit = async (\n//     attribute: string,\n//     code: string\n//   ) => {\n//     let response;\n//     Auth.verifyCurrentUserAttributeSubmit(attribute, code)\n//       .then(data => {\n//         // 'attribute' verified\n//         response = {\n//           data: data,\n//           status: \"SUCCESS\"\n//         };\n//       })\n//       .catch(error => {\n//         response = {\n//           error: error,\n//           status: \"FAIL\"\n//         };\n//       });\n//     return response;\n//   };\n\n//   /**\n//    * Submit verification code for attribute\n//    * @returns response - a promise data object on success\n//    */\n//   const refreshSession = async () => {\n//     try {\n//       const cognitoUser = await Auth.currentAuthenticatedUser();\n//       const { refreshToken } = cognitoUser.getSignInUserSession();\n//       cognitoUser.refreshSession(refreshToken, (err, session) => {\n//         if (session) {\n//           const { accessToken } = session;\n//           let jwt = accessToken.getJwtToken();\n//           let jwtObject = jwt_decode(jwt) as any;\n//           let expireTime = jwtObject.exp as number;\n//           sessionStorage.removeItem(\"alertMessage\");\n//           sessionStorage.setItem(\"expiry\", String(expireTime));\n//           // NEW EXPIRY TIME\n//         }\n//       });\n//     } catch (e) {\n//       console.debug(\"ERROR: unable to refresh Token\", e);\n//     }\n//   };\n\n//   const checkSessionExpired = async () => {\n//     let response = {};\n//     try {\n//       let currentTime = Math.floor(Date.now() / 1000);\n//       let expiryTime = Number(sessionStorage.getItem(\"expiry\")) || null;\n//       if (expiryTime && currentTime > expiryTime) {\n//         // logout expired session\n//         sessionStorage.removeItem(\"expiry\");\n\n//         response = {\n//           showAlert: true,\n//           severity: \"error\",\n//           message: \"all.alert.session-expired\"\n//         };\n//         sessionStorage.setItem(\"alertMessage\", JSON.stringify(response));\n//         await signOut();\n//       } else {\n//         // refresh session\n//         await refreshSession();\n//       }\n//     } catch (e) {\n//       console.debug(\"ERROR: checkSessionExpired failed \", e);\n//     }\n//     return response;\n//   };\n\n//   /**\n//    * Submit verification code for attribute\n//    * @returns response - a promise data object on success\n//    */\n//   const getSubId = async () => {\n//     try {\n//       const cognitoUser = await Auth.currentAuthenticatedUser();\n//       const { idToken } = cognitoUser.getSignInUserSession();\n//       return idToken.payload.sub;\n//     } catch (e) {\n//       console.debug(\"ERROR: unable to refresh Token\", e);\n//     }\n//   };\n\n//   return (\n//     <AuthContext.Provider\n//       value={{\n//         user,\n//         loading,\n//         signIn,\n//         signOut,\n//         getUserSession,\n//         changePassword,\n//         completeNewPassword,\n//         forgotPassword,\n//         confirmSignIn,\n//         verifyTOTP,\n//         updateUserAttributes,\n//         clearCognitoData,\n//         forgotPasswordSubmit,\n//         userAttributeVerification,\n//         userAttributeVerificationSubmit,\n//         refreshSession,\n//         checkSessionExpired,\n//         getSubId\n//       }}\n//     >\n//       {props.children}\n//     </AuthContext.Provider>\n//   );\n// };\n\nexport const useAuth = () => {\n  return useContext(AuthContext);\n};\n"]},"metadata":{},"sourceType":"module"}