{"ast":null,"code":"var _jsxFileName = \"/Users/mohamedmaqil/Desktop/RIVO/rivo-portal-ui/src/components/ShipmentsDatePicker/ShipmentsDatePicker.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport LocalizationProvider from \"@mui/lab/LocalizationProvider\";\nimport { DatePickerStyle } from \"./ShipmentsDatePicker.style\";\nimport DateRangePicker from \"@mui/lab/DateRangePicker\";\nimport MobileDateRangePicker from \"@mui/lab/MobileDateRangePicker\";\nimport { useTranslation, getI18n } from \"react-i18next\";\nimport { TextField } from \"@mui/material\";\nimport DateAdapter from \"@mui/lab/AdapterMoment\";\nimport Moment from \"moment\";\nimport \"moment/locale/fr\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction ShipmentsDatePicker(props) {\n  _s();\n\n  const {\n    t\n  } = useTranslation();\n  const {\n    startDate,\n    endDate,\n    dispatchList\n  } = props;\n  const [dateValue, setDateValue] = useState([Moment(startDate).toDate(), Moment(endDate).toDate()]);\n  const maxDateRange = 31;\n  const minDateDefault = Moment(Moment().subtract(6, \"weeks\"));\n  const maxDateDefault = Moment();\n  const [minDate] = useState(minDateDefault);\n  const [maxDate] = useState(maxDateDefault);\n  const [startDateError, setStartDateError] = useState(false);\n  const [startDateErrorMsg, setStartDateErrorMsg] = useState(\"\");\n  const [endDateError, setEndDateError] = useState(false);\n  const [endDateErrorMsg, setEndDateErrorMsg] = useState(\"\");\n\n  const handleSelectDate = dates => {\n    let currentStartDate = Moment(dateValue[0]).format(\"YYYY-MM-DD\");\n    let currentEndDate = Moment(dateValue[1]).format(\"YYYY-MM-DD\");\n    let newStartDate = Moment(dates[0]).format(\"YYYY-MM-DD\");\n    let newEndDate = Moment(dates[1]).format(\"YYYY-MM-DD\");\n    setStartDateError(false);\n    setStartDateErrorMsg(\"\");\n    setEndDateError(false);\n    setEndDateErrorMsg(\"\");\n\n    if (Moment(newStartDate, \"YYYY-MM-DD\", true).isValid() && Moment(newEndDate, \"YYYY-MM-DD\", true).isValid()) {\n      let rangeBetweenStartAndEnd = dates[1].diff(dates[0], \"days\") + 1;\n\n      if (rangeBetweenStartAndEnd < 1) {\n        // when user enter a end date that is after the start date, using the keyboard\n        if (currentStartDate !== newStartDate) {\n          // when start date was changed\n          // set the end date the same day\n          setDateValue([dates[0], dates[0]]); // need to update the list to reflect what is show in the input\n\n          dispatchList({\n            type: \"dates\",\n            startDateValue: newStartDate,\n            endDateValue: newStartDate\n          });\n        } else if (currentEndDate !== newEndDate) {\n          // when end date was changed\n          // set the start date the same day\n          setDateValue([dates[1], dates[1]]); // need to update the list to reflect what is show in the input\n\n          dispatchList({\n            type: \"dates\",\n            startDateValue: newEndDate,\n            endDateValue: newEndDate\n          });\n        }\n      } else if (rangeBetweenStartAndEnd > maxDateRange) {\n        // when the date range is too big\n        if (currentStartDate !== newStartDate) {\n          // when start date was changed\n          setDateValue([dates[0], null]);\n          setEndDateError(true);\n          setEndDateErrorMsg(t(\"shipments-dashboard.date.error.maxrange\", {\n            maxDateRange\n          }));\n        } else if (currentEndDate !== newEndDate) {\n          // when end date was changed\n          // instead of allowing to pick a range too big, set it at the new start date\n          setDateValue([null, dates[1]]);\n          setStartDateError(true);\n          setStartDateErrorMsg(t(\"shipments-dashboard.date.error.maxrange\", {\n            maxDateRange\n          }));\n        }\n      } else {\n        setDateValue(dates);\n        dispatchList({\n          type: \"dates\",\n          startDateValue: newStartDate,\n          endDateValue: newEndDate\n        });\n      }\n    } else {\n      // start date or end date was invalid\n      if (!Moment(newStartDate, \"YYYY-MM-DD\", true).isValid()) {\n        setStartDateError(true);\n        setStartDateErrorMsg(t(\"shipments-dashboard.date.error.format\"));\n        setDateValue([null, dates[1]]);\n      }\n\n      if (!Moment(newEndDate, \"YYYY-MM-DD\", true).isValid()) {\n        setEndDateError(true);\n        setEndDateErrorMsg(t(\"shipments-dashboard.date.error.format\"));\n        setDateValue([dates[0], null]);\n      }\n    }\n  }; // known bug error in the console when opening month/year calendar: https://github.com/mui-org/material-ui/issues/28352\n\n\n  return /*#__PURE__*/_jsxDEV(DatePickerStyle, {\n    children: /*#__PURE__*/_jsxDEV(LocalizationProvider, {\n      dateAdapter: DateAdapter,\n      locale: getI18n().resolvedLanguage,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"date-range-mobile\",\n        children: /*#__PURE__*/_jsxDEV(MobileDateRangePicker, {\n          disableFuture: true,\n          startText: t(\"shipments-dashboard.date.label.from\"),\n          endText: t(\"shipments-dashboard.date.label.to\"),\n          value: dateValue,\n          inputFormat: \"ll\",\n          disableMaskedInput: true // Needed because of this: https://githubhot.com/repo/mui-org/material-ui/issues/28916\n          ,\n          minDate: minDate,\n          maxDate: maxDate,\n          disableAutoMonthSwitching: true,\n          cancelText: t(\"shipments-dashboard.date.button.cancel\"),\n          showToolbar: true,\n          toolbarTitle: t(\"shipments-dashboard.date.label.toolbar\", {\n            maxDateRange\n          }),\n          onChange: handleSelectDate,\n          disableHighlightToday: true,\n          renderInput: (startProps, endProps) => /*#__PURE__*/_jsxDEV(React.Fragment, {\n            children: [/*#__PURE__*/_jsxDEV(TextField, { ...startProps,\n              error: startDateError,\n              inputProps: { ...startProps.inputProps,\n                placeholder: \"MM DD, YYYY\"\n              },\n              helperText: startDateErrorMsg\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 140,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(TextField, { ...endProps,\n              error: endDateError,\n              inputProps: { ...endProps.inputProps,\n                placeholder: \"MM DD, YYYY\"\n              },\n              helperText: endDateErrorMsg\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 149,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 139,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 121,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"date-range-desktop\",\n        children: /*#__PURE__*/_jsxDEV(DateRangePicker, {\n          disableFuture: true,\n          startText: t(\"shipments-dashboard.date.label.from\"),\n          endText: t(\"shipments-dashboard.date.label.to\"),\n          value: dateValue,\n          inputFormat: \"ll\",\n          disableMaskedInput: true // Needed because of this: https://githubhot.com/repo/mui-org/material-ui/issues/28916\n          ,\n          minDate: minDate,\n          maxDate: maxDate,\n          disableAutoMonthSwitching: true,\n          cancelText: t(\"shipments-dashboard.date.button.cancel\"),\n          showToolbar: true,\n          toolbarTitle: t(\"shipments-dashboard.date.label.toolbar\", {\n            maxDateRange\n          }),\n          onChange: handleSelectDate,\n          disableHighlightToday: true,\n          renderInput: (startProps, endProps) => /*#__PURE__*/_jsxDEV(React.Fragment, {\n            children: [/*#__PURE__*/_jsxDEV(TextField, { ...startProps,\n              error: startDateError,\n              inputProps: { ...startProps.inputProps,\n                placeholder: \"MM DD, YYYY\"\n              },\n              helperText: startDateErrorMsg\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 182,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(TextField, { ...endProps,\n              error: endDateError,\n              inputProps: { ...endProps.inputProps,\n                placeholder: \"MM DD, YYYY\"\n              },\n              helperText: endDateErrorMsg\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 191,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 181,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 163,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 162,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 115,\n    columnNumber: 5\n  }, this);\n}\n\n_s(ShipmentsDatePicker, \"Fidk38MzRZqWU6MzTDvB/vrlli8=\", false, function () {\n  return [useTranslation];\n});\n\n_c = ShipmentsDatePicker;\nexport default ShipmentsDatePicker;\n\nvar _c;\n\n$RefreshReg$(_c, \"ShipmentsDatePicker\");","map":{"version":3,"sources":["/Users/mohamedmaqil/Desktop/RIVO/rivo-portal-ui/src/components/ShipmentsDatePicker/ShipmentsDatePicker.tsx"],"names":["React","useState","LocalizationProvider","DatePickerStyle","DateRangePicker","MobileDateRangePicker","useTranslation","getI18n","TextField","DateAdapter","Moment","ShipmentsDatePicker","props","t","startDate","endDate","dispatchList","dateValue","setDateValue","toDate","maxDateRange","minDateDefault","subtract","maxDateDefault","minDate","maxDate","startDateError","setStartDateError","startDateErrorMsg","setStartDateErrorMsg","endDateError","setEndDateError","endDateErrorMsg","setEndDateErrorMsg","handleSelectDate","dates","currentStartDate","format","currentEndDate","newStartDate","newEndDate","isValid","rangeBetweenStartAndEnd","diff","type","startDateValue","endDateValue","resolvedLanguage","startProps","endProps","inputProps","placeholder"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport LocalizationProvider from \"@mui/lab/LocalizationProvider\";\nimport { DatePickerStyle } from \"./ShipmentsDatePicker.style\";\nimport DateRangePicker, { DateRange } from \"@mui/lab/DateRangePicker\";\nimport MobileDateRangePicker from \"@mui/lab/MobileDateRangePicker\";\nimport { useTranslation, getI18n } from \"react-i18next\";\nimport { TextField } from \"@mui/material\";\nimport DateAdapter from \"@mui/lab/AdapterMoment\";\nimport Moment from \"moment\";\nimport \"moment/locale/fr\";\n\nfunction ShipmentsDatePicker(props) {\n  const { t } = useTranslation();\n  const { startDate, endDate, dispatchList } = props;\n  const [dateValue, setDateValue] = useState<DateRange<Date | null>>([\n    Moment(startDate).toDate(),\n    Moment(endDate).toDate()\n  ]);\n  const maxDateRange = 31;\n  const minDateDefault = Moment(Moment().subtract(6, \"weeks\"));\n  const maxDateDefault = Moment();\n  const [minDate] = useState(minDateDefault);\n  const [maxDate] = useState(maxDateDefault);\n  const [startDateError, setStartDateError] = useState(false);\n  const [startDateErrorMsg, setStartDateErrorMsg] = useState(\"\");\n  const [endDateError, setEndDateError] = useState(false);\n  const [endDateErrorMsg, setEndDateErrorMsg] = useState(\"\");\n\n  const handleSelectDate = dates => {\n    let currentStartDate = Moment(dateValue[0]).format(\"YYYY-MM-DD\");\n    let currentEndDate = Moment(dateValue[1]).format(\"YYYY-MM-DD\");\n    let newStartDate = Moment(dates[0]).format(\"YYYY-MM-DD\");\n    let newEndDate = Moment(dates[1]).format(\"YYYY-MM-DD\");\n    setStartDateError(false);\n    setStartDateErrorMsg(\"\");\n    setEndDateError(false);\n    setEndDateErrorMsg(\"\");\n\n    if (\n      Moment(newStartDate, \"YYYY-MM-DD\", true).isValid() &&\n      Moment(newEndDate, \"YYYY-MM-DD\", true).isValid()\n    ) {\n      let rangeBetweenStartAndEnd = dates[1].diff(dates[0], \"days\") + 1;\n\n      if (rangeBetweenStartAndEnd < 1) {\n        // when user enter a end date that is after the start date, using the keyboard\n        if (currentStartDate !== newStartDate) {\n          // when start date was changed\n          // set the end date the same day\n          setDateValue([dates[0], dates[0]]);\n          // need to update the list to reflect what is show in the input\n          dispatchList({\n            type: \"dates\",\n            startDateValue: newStartDate,\n            endDateValue: newStartDate\n          });\n        } else if (currentEndDate !== newEndDate) {\n          // when end date was changed\n          // set the start date the same day\n          setDateValue([dates[1], dates[1]]);\n          // need to update the list to reflect what is show in the input\n          dispatchList({\n            type: \"dates\",\n            startDateValue: newEndDate,\n            endDateValue: newEndDate\n          });\n        }\n      } else if (rangeBetweenStartAndEnd > maxDateRange) {\n        // when the date range is too big\n        if (currentStartDate !== newStartDate) {\n          // when start date was changed\n          setDateValue([dates[0], null]);\n          setEndDateError(true);\n          setEndDateErrorMsg(\n            t(\"shipments-dashboard.date.error.maxrange\", {\n              maxDateRange\n            })\n          );\n        } else if (currentEndDate !== newEndDate) {\n          // when end date was changed\n          // instead of allowing to pick a range too big, set it at the new start date\n          setDateValue([null, dates[1]]);\n          setStartDateError(true);\n          setStartDateErrorMsg(\n            t(\"shipments-dashboard.date.error.maxrange\", {\n              maxDateRange\n            })\n          );\n        }\n      } else {\n        setDateValue(dates);\n        dispatchList({\n          type: \"dates\",\n          startDateValue: newStartDate,\n          endDateValue: newEndDate\n        });\n      }\n    } else {\n      // start date or end date was invalid\n      if (!Moment(newStartDate, \"YYYY-MM-DD\", true).isValid()) {\n        setStartDateError(true);\n        setStartDateErrorMsg(t(\"shipments-dashboard.date.error.format\"));\n        setDateValue([null, dates[1]]);\n      }\n      if (!Moment(newEndDate, \"YYYY-MM-DD\", true).isValid()) {\n        setEndDateError(true);\n        setEndDateErrorMsg(t(\"shipments-dashboard.date.error.format\"));\n        setDateValue([dates[0], null]);\n      }\n    }\n  };\n\n  // known bug error in the console when opening month/year calendar: https://github.com/mui-org/material-ui/issues/28352\n  return (\n    <DatePickerStyle>\n      <LocalizationProvider\n        dateAdapter={DateAdapter}\n        locale={getI18n().resolvedLanguage}\n      >\n        <div className=\"date-range-mobile\">\n          <MobileDateRangePicker\n            disableFuture\n            startText={t(\"shipments-dashboard.date.label.from\")}\n            endText={t(\"shipments-dashboard.date.label.to\")}\n            value={dateValue}\n            inputFormat=\"ll\"\n            disableMaskedInput={true} // Needed because of this: https://githubhot.com/repo/mui-org/material-ui/issues/28916\n            minDate={minDate}\n            maxDate={maxDate}\n            disableAutoMonthSwitching={true}\n            cancelText={t(\"shipments-dashboard.date.button.cancel\")}\n            showToolbar={true}\n            toolbarTitle={t(\"shipments-dashboard.date.label.toolbar\", {\n              maxDateRange\n            })}\n            onChange={handleSelectDate}\n            disableHighlightToday={true}\n            renderInput={(startProps, endProps) => (\n              <React.Fragment>\n                <TextField\n                  {...startProps}\n                  error={startDateError}\n                  inputProps={{\n                    ...startProps.inputProps,\n                    placeholder: \"MM DD, YYYY\"\n                  }}\n                  helperText={startDateErrorMsg}\n                />\n                <TextField\n                  {...endProps}\n                  error={endDateError}\n                  inputProps={{\n                    ...endProps.inputProps,\n                    placeholder: \"MM DD, YYYY\"\n                  }}\n                  helperText={endDateErrorMsg}\n                />\n              </React.Fragment>\n            )}\n          />\n        </div>\n        <div className=\"date-range-desktop\">\n          <DateRangePicker\n            disableFuture\n            startText={t(\"shipments-dashboard.date.label.from\")}\n            endText={t(\"shipments-dashboard.date.label.to\")}\n            value={dateValue}\n            inputFormat=\"ll\"\n            disableMaskedInput={true} // Needed because of this: https://githubhot.com/repo/mui-org/material-ui/issues/28916\n            minDate={minDate}\n            maxDate={maxDate}\n            disableAutoMonthSwitching={true}\n            cancelText={t(\"shipments-dashboard.date.button.cancel\")}\n            showToolbar={true}\n            toolbarTitle={t(\"shipments-dashboard.date.label.toolbar\", {\n              maxDateRange\n            })}\n            onChange={handleSelectDate}\n            disableHighlightToday={true}\n            renderInput={(startProps, endProps) => (\n              <React.Fragment>\n                <TextField\n                  {...startProps}\n                  error={startDateError}\n                  inputProps={{\n                    ...startProps.inputProps,\n                    placeholder: \"MM DD, YYYY\"\n                  }}\n                  helperText={startDateErrorMsg}\n                />\n                <TextField\n                  {...endProps}\n                  error={endDateError}\n                  inputProps={{\n                    ...endProps.inputProps,\n                    placeholder: \"MM DD, YYYY\"\n                  }}\n                  helperText={endDateErrorMsg}\n                />\n              </React.Fragment>\n            )}\n          />\n        </div>\n      </LocalizationProvider>\n    </DatePickerStyle>\n  );\n}\n\nexport default ShipmentsDatePicker;\n"]},"metadata":{},"sourceType":"module"}