{"ast":null,"code":"var _jsxFileName = \"/Users/mohamedmaqil/Desktop/SchoolSystem/SchoolSystem-React-fe/src/components/VerificationCode/VerificationCode.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport { Grid, Typography } from \"@mui/material\";\nimport { makeValidate, makeRequired, showErrorOnBlur } from \"mui-rff\";\nimport { Form } from \"react-final-form\";\nimport { FORM_ERROR } from \"final-form\";\nimport { Link, useNavigate } from \"react-router-dom\";\nimport { useTranslation } from \"react-i18next\";\nimport i18n from \"i18next\";\nimport { LoginBox, LoginButton, LoginErrorHelperText, LoginHeader, LoginTextField } from \"../../components/LoginComponents/LoginComponents.style\";\nimport { VerificationCodeSchema } from \"../../schema/VerificationCodeSchema\";\nimport { useAuth } from \"../../providers/Auth\";\nimport { TabTitle } from \"../../utils/GeneralFunctions\";\n/**\n * Uses the optional helper makeValidate function to format the error messages\n * into something usable by final form.\n */\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst validate = makeValidate(VerificationCodeSchema, error => {\n  return /*#__PURE__*/_jsxDEV(\"span\", {\n    className: \"error\",\n    children: i18n.t(error.message)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 26,\n    columnNumber: 10\n  }, this);\n});\n/**\n * Grabs all the required fields from the schema so that they can be passed into\n * the components without having to declare them in both the schema and the component.\n */\n\nconst required = makeRequired(VerificationCodeSchema);\n\nconst VerificationCode = _ref => {\n  _s();\n\n  var _user$challengeParam;\n\n  let {\n    user\n  } = _ref;\n  const navigate = useNavigate();\n  const {\n    t\n  } = useTranslation();\n  TabTitle(t(\"verificationCode.block1.header.page-title\"));\n  const {\n    confirmSignIn\n  } = useAuth();\n  const [submittedValues, setSubmittedValues] = useState(undefined);\n  const initialValues = {\n    verificationCode: \"\"\n  };\n\n  const refreshPage = () => {\n    window.location.reload();\n  };\n\n  const onSubmit = async values => {\n    setSubmittedValues(values);\n    const data = await confirmSignIn(user, values.verificationCode);\n\n    if (data.status === \"FAIL\" || data.error) {\n      return {\n        [FORM_ERROR]: \"verificationCode.block-form.loginError\"\n      };\n    } else {\n      navigate(\"/shipments-dashboard\");\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(LoginBox, {\n    children: /*#__PURE__*/_jsxDEV(Grid, {\n      container: true,\n      sx: {\n        pt: 0\n      },\n      children: [/*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        xs: 12,\n        sm: 6,\n        children: [/*#__PURE__*/_jsxDEV(LoginHeader, {\n          component: \"h1\",\n          variant: \"display2\",\n          color: \"fuchsiaAccessible.main\",\n          children: t(\"verificationCode.block1.header.page-title\")\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Typography, {\n          component: \"p\",\n          variant: \"lead\",\n          children: user.challengeName === \"SMS_MFA\" ? t(\"verificationCode.block1.header.short-intro-sms\", {\n            sms: user.challengeParam.CODE_DELIVERY_DESTINATION\n          }) : user.challengeParam === \"CUSTOM_CHALLENGE\" ? t(\"verificationCode.block1.header.short-intro-email\", {\n            email: (_user$challengeParam = user.challengeParam) === null || _user$challengeParam === void 0 ? void 0 : _user$challengeParam.CODE_DELIVERY_DESTINATION\n          }) : \"\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        xs: 12,\n        sm: 6,\n        children: /*#__PURE__*/_jsxDEV(Form, {\n          onSubmit: onSubmit,\n          initialValues: submittedValues ? submittedValues : initialValues,\n          validate: validate,\n          render: _ref2 => {\n            let {\n              submitError,\n              handleSubmit,\n              submitting\n            } = _ref2;\n            return /*#__PURE__*/_jsxDEV(\"form\", {\n              onSubmit: handleSubmit,\n              children: [/*#__PURE__*/_jsxDEV(LoginTextField, {\n                required: required.verificationCode,\n                label: t(\"verificationCode.block-form.input.code\"),\n                id: \"verificationCode\",\n                name: \"verificationCode\",\n                variant: \"filled\",\n                showError: showErrorOnBlur,\n                InputProps: {\n                  disableUnderline: true\n                },\n                autoComplete: \"off\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 93,\n                columnNumber: 17\n              }, this), submitError && /*#__PURE__*/_jsxDEV(LoginErrorHelperText, {\n                variant: \"filled\",\n                filled: true,\n                required: true,\n                component: \"p\",\n                children: /*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"error\",\n                  children: t(submitError)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 110,\n                  columnNumber: 21\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 104,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(LoginButton, {\n                variant: \"contained\",\n                type: \"submit\",\n                disabled: submitting,\n                size: \"large\",\n                sx: {\n                  mr: theme => theme.spacer_m\n                },\n                disableElevation: true,\n                children: t(\"verificationCode.block-form.button.submit\")\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 113,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(Typography, {\n                component: Link,\n                to: \"/login\",\n                variant: \"body1\",\n                color: \"fuchsiaAccessible.main\",\n                onClick: refreshPage,\n                children: t(\"all.block-form.button.link\")\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 123,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 92,\n              columnNumber: 15\n            }, this);\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 64,\n    columnNumber: 5\n  }, this);\n};\n\n_s(VerificationCode, \"Qkn8zA9XQSFJmO7AfhlY8WOM4uY=\", false, function () {\n  return [useNavigate, useTranslation, useAuth];\n});\n\n_c = VerificationCode;\nexport default VerificationCode;\n\nvar _c;\n\n$RefreshReg$(_c, \"VerificationCode\");","map":{"version":3,"sources":["/Users/mohamedmaqil/Desktop/SchoolSystem/SchoolSystem-React-fe/src/components/VerificationCode/VerificationCode.tsx"],"names":["React","useState","Grid","Typography","makeValidate","makeRequired","showErrorOnBlur","Form","FORM_ERROR","Link","useNavigate","useTranslation","i18n","LoginBox","LoginButton","LoginErrorHelperText","LoginHeader","LoginTextField","VerificationCodeSchema","useAuth","TabTitle","validate","error","t","message","required","VerificationCode","user","navigate","confirmSignIn","submittedValues","setSubmittedValues","undefined","initialValues","verificationCode","refreshPage","window","location","reload","onSubmit","values","data","status","pt","challengeName","sms","challengeParam","CODE_DELIVERY_DESTINATION","email","submitError","handleSubmit","submitting","disableUnderline","mr","theme","spacer_m"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport { Grid, Typography } from \"@mui/material\";\nimport { makeValidate, makeRequired, showErrorOnBlur } from \"mui-rff\";\nimport { Form } from \"react-final-form\";\nimport { FORM_ERROR } from \"final-form\";\nimport { Link, useNavigate } from \"react-router-dom\";\nimport { useTranslation } from \"react-i18next\";\nimport i18n from \"i18next\";\nimport {\n  LoginBox,\n  LoginButton,\n  LoginErrorHelperText,\n  LoginHeader,\n  LoginTextField\n} from \"../../components/LoginComponents/LoginComponents.style\";\nimport { VerificationCodeSchema } from \"../../schema/VerificationCodeSchema\";\n\nimport { VerificationCodeInterface } from \"../../interfaces/VerificationCodeInterface\";\nimport { useAuth } from \"../../providers/Auth\";\nimport { TabTitle } from \"../../utils/GeneralFunctions\";\n/**\n * Uses the optional helper makeValidate function to format the error messages\n * into something usable by final form.\n */\nconst validate = makeValidate(VerificationCodeSchema, error => {\n  return <span className=\"error\">{i18n.t(error.message)}</span>;\n});\n/**\n * Grabs all the required fields from the schema so that they can be passed into\n * the components without having to declare them in both the schema and the component.\n */\nconst required = makeRequired(VerificationCodeSchema);\n\nconst VerificationCode = ({ user }) => {\n\n  const navigate = useNavigate();\n  const { t } = useTranslation();\n  TabTitle(t(\"verificationCode.block1.header.page-title\"));\n  const { confirmSignIn } = useAuth();\n  const [submittedValues, setSubmittedValues] = useState<\n    VerificationCodeInterface | undefined\n  >(undefined);\n\n  const initialValues: VerificationCodeInterface = {\n    verificationCode: \"\"\n  };\n\n  const refreshPage = () => {\n    window.location.reload();\n  };\n\n  const onSubmit = async (values: VerificationCodeInterface) => {\n    setSubmittedValues(values);\n\n    const data: any = await confirmSignIn(user, values.verificationCode);\n    if (data.status === \"FAIL\" || data.error) {\n      return { [FORM_ERROR]: \"verificationCode.block-form.loginError\" };\n    } else {\n      navigate(\"/shipments-dashboard\");\n    }\n  };\n\n  return (\n    <LoginBox>\n      <Grid container sx={{ pt: 0 }}>\n        <Grid item xs={12} sm={6}>\n          <LoginHeader\n            component=\"h1\"\n            variant=\"display2\"\n            color=\"fuchsiaAccessible.main\"\n          >\n            {t(\"verificationCode.block1.header.page-title\")}\n          </LoginHeader>\n          <Typography component=\"p\" variant=\"lead\">\n            {user.challengeName === \"SMS_MFA\"\n              ? t(\"verificationCode.block1.header.short-intro-sms\", {\n                  sms: user.challengeParam.CODE_DELIVERY_DESTINATION\n                })\n              : user.challengeParam === \"CUSTOM_CHALLENGE\"\n              ? t(\"verificationCode.block1.header.short-intro-email\", {\n                  email: user.challengeParam?.CODE_DELIVERY_DESTINATION\n                })\n              : \"\"}\n          </Typography>\n        </Grid>\n        <Grid item xs={12} sm={6}>\n          <Form\n            onSubmit={onSubmit}\n            initialValues={submittedValues ? submittedValues : initialValues}\n            validate={validate}\n            render={({ submitError, handleSubmit, submitting }) => (\n              <form onSubmit={handleSubmit}>\n                <LoginTextField\n                  required={required.verificationCode}\n                  label={t(\"verificationCode.block-form.input.code\")}\n                  id=\"verificationCode\"\n                  name=\"verificationCode\"\n                  variant=\"filled\"\n                  showError={showErrorOnBlur}\n                  InputProps={{ disableUnderline: true }}\n                  autoComplete=\"off\"\n                />\n                {submitError && (\n                  <LoginErrorHelperText\n                    variant=\"filled\"\n                    filled\n                    required\n                    component=\"p\"\n                  >\n                    <span className=\"error\">{t(submitError)}</span>\n                  </LoginErrorHelperText>\n                )}\n                <LoginButton\n                  variant=\"contained\"\n                  type=\"submit\"\n                  disabled={submitting}\n                  size=\"large\"\n                  sx={{ mr: theme => theme.spacer_m }}\n                  disableElevation\n                >\n                  {t(\"verificationCode.block-form.button.submit\")}\n                </LoginButton>\n                <Typography\n                  component={Link}\n                  to=\"/login\"\n                  variant=\"body1\"\n                  color=\"fuchsiaAccessible.main\"\n                  onClick={refreshPage}\n                >\n                  {t(\"all.block-form.button.link\")}\n                </Typography>\n              </form>\n            )}\n          />\n        </Grid>\n      </Grid>\n    </LoginBox>\n  );\n};\n\nexport default VerificationCode;\n"]},"metadata":{},"sourceType":"module"}