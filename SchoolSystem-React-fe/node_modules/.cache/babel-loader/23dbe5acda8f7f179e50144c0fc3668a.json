{"ast":null,"code":"var _jsxFileName = \"/Users/mohamedmaqil/Desktop/RIVO/rivo-portal-ui/src/pages/ForgotPassword/ForgotPassword.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport { Grid, Typography } from \"@mui/material\";\nimport { makeValidate, makeRequired } from \"mui-rff\";\nimport { Form } from \"react-final-form\";\nimport { FORM_ERROR } from \"final-form\";\nimport { Link } from \"react-router-dom\";\nimport { useTranslation } from \"react-i18next\";\nimport i18n from \"i18next\";\nimport { LoginBox, LoginButton, LoginErrorHelperText, LoginHeader, LoginTextField } from \"../../components/LoginComponents/LoginComponents.style\";\nimport { ForgotPasswordSchema } from \"../../schema/ForgotPasswordSchema\";\nimport { useApiError } from \"../../providers/ApiErrorProvider\";\nimport { useAuth } from \"../../providers/Auth\";\nimport ResetPassword from \"../../components/ResetPassword/ResetPassword\";\nimport { TabTitle } from \"../../utils/GeneralFunctions\";\n/**\n * Uses the optional helper makeValidate function to format the error messages\n * into something usable by final form.\n */\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst validate = makeValidate(ForgotPasswordSchema, error => {\n  return /*#__PURE__*/_jsxDEV(\"span\", {\n    className: \"error\",\n    children: i18n.t(error.message)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 27,\n    columnNumber: 10\n  }, this);\n});\n/**\n * Grabs all the required fields from the schema so that they can be passed into\n * the components without having to declare them in both the schema and the component.\n */\n\nconst required = makeRequired(ForgotPasswordSchema);\n\nconst ForgotPassword = () => {\n  _s();\n\n  const apiError = useApiError();\n  console.log(apiError);\n  const {\n    t\n  } = useTranslation();\n  TabTitle(t(\"forgotPassword.block1.header.page-title\"));\n  const {\n    forgotPassword\n  } = useAuth();\n  const [submittedValues, setSubmittedValues] = useState(undefined);\n  const initialValues = {\n    email: \"\"\n  };\n  const [showResetPassword, setShowResetPassword] = useState(false);\n\n  const onSubmit = async values => {\n    setSubmittedValues(values);\n    const submit = await forgotPassword(values.email);\n    console.log(submit);\n\n    if (submit.status === \"FAIL\" || submit.error) {\n      return {\n        [FORM_ERROR]: \"forgotPassword.block-form.loginError\"\n      };\n    } else {\n      setShowResetPassword(true);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [!showResetPassword && /*#__PURE__*/_jsxDEV(LoginBox, {\n      children: /*#__PURE__*/_jsxDEV(Grid, {\n        container: true,\n        sx: {\n          pt: 0\n        },\n        children: [/*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          xs: 12,\n          sm: 6,\n          children: [/*#__PURE__*/_jsxDEV(LoginHeader, {\n            component: \"h1\",\n            variant: \"display2\",\n            color: \"fuchsiaAccessible.main\",\n            children: t(\"forgotPassword.block1.header.page-title\")\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 69,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Typography, {\n            component: \"p\",\n            variant: \"lead\",\n            children: t(\"forgotPassword.block1.header.short-intro\")\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 76,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          xs: 12,\n          sm: 6,\n          children: /*#__PURE__*/_jsxDEV(Form, {\n            onSubmit: onSubmit,\n            initialValues: submittedValues ? submittedValues : initialValues,\n            validate: validate,\n            render: _ref => {\n              let {\n                submitError,\n                handleSubmit,\n                submitting\n              } = _ref;\n              return /*#__PURE__*/_jsxDEV(\"form\", {\n                onSubmit: handleSubmit,\n                children: [/*#__PURE__*/_jsxDEV(LoginTextField, {\n                  required: required.email,\n                  label: t(\"forgotPassword.block-form.input.email\"),\n                  id: \"email\",\n                  name: \"email\",\n                  variant: \"filled\",\n                  autoComplete: \"email\",\n                  InputProps: {\n                    disableUnderline: true\n                  }\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 89,\n                  columnNumber: 21\n                }, this), submitError && /*#__PURE__*/_jsxDEV(LoginErrorHelperText, {\n                  variant: \"filled\",\n                  filled: true,\n                  required: true,\n                  component: \"p\",\n                  children: /*#__PURE__*/_jsxDEV(\"span\", {\n                    className: \"error\",\n                    children: t(submitError)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 105,\n                    columnNumber: 25\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 99,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(LoginButton, {\n                  variant: \"contained\",\n                  type: \"submit\",\n                  disabled: submitting,\n                  size: \"large\",\n                  sx: {\n                    mr: theme => theme.spacer_m\n                  },\n                  disableElevation: true,\n                  children: t(\"forgotPassword.block-form.button.submit\")\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 108,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(Typography, {\n                  component: Link,\n                  to: \"/login\",\n                  variant: \"body1\",\n                  color: \"fuchsiaAccessible.main\",\n                  children: t(\"all.block-form.button.link\")\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 118,\n                  columnNumber: 21\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 88,\n                columnNumber: 19\n              }, this);\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 81,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 9\n    }, this), showResetPassword && submittedValues && /*#__PURE__*/_jsxDEV(ResetPassword, {\n      email: submittedValues.email\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true);\n};\n\n_s(ForgotPassword, \"iWH3JzJ/xdBMrVkm6IwAaZRsqyo=\", false, function () {\n  return [useApiError, useTranslation, useAuth];\n});\n\n_c = ForgotPassword;\nexport default ForgotPassword;\n\nvar _c;\n\n$RefreshReg$(_c, \"ForgotPassword\");","map":{"version":3,"sources":["/Users/mohamedmaqil/Desktop/RIVO/rivo-portal-ui/src/pages/ForgotPassword/ForgotPassword.tsx"],"names":["React","useState","Grid","Typography","makeValidate","makeRequired","Form","FORM_ERROR","Link","useTranslation","i18n","LoginBox","LoginButton","LoginErrorHelperText","LoginHeader","LoginTextField","ForgotPasswordSchema","useApiError","useAuth","ResetPassword","TabTitle","validate","error","t","message","required","ForgotPassword","apiError","console","log","forgotPassword","submittedValues","setSubmittedValues","undefined","initialValues","email","showResetPassword","setShowResetPassword","onSubmit","values","submit","status","pt","submitError","handleSubmit","submitting","disableUnderline","mr","theme","spacer_m"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,SAASC,IAAT,EAAeC,UAAf,QAAiC,eAAjC;AACA,SAASC,YAAT,EAAuBC,YAAvB,QAA2C,SAA3C;AACA,SAASC,IAAT,QAAqB,kBAArB;AACA,SAASC,UAAT,QAA2B,YAA3B;AACA,SAASC,IAAT,QAAqB,kBAArB;AACA,SAASC,cAAT,QAA+B,eAA/B;AACA,OAAOC,IAAP,MAAiB,SAAjB;AACA,SACEC,QADF,EAEEC,WAFF,EAGEC,oBAHF,EAIEC,WAJF,EAKEC,cALF,QAMO,wDANP;AAOA,SAASC,oBAAT,QAAqC,mCAArC;AAEA,SAASC,WAAT,QAA4B,kCAA5B;AACA,SAASC,OAAT,QAAwB,sBAAxB;AACA,OAAOC,aAAP,MAA0B,8CAA1B;AACA,SAASC,QAAT,QAAyB,8BAAzB;AACA;AACA;AACA;AACA;;;;AACA,MAAMC,QAAQ,GAAGjB,YAAY,CAACY,oBAAD,EAAuBM,KAAK,IAAI;AAC3D,sBAAO;AAAM,IAAA,SAAS,EAAC,OAAhB;AAAA,cAAyBZ,IAAI,CAACa,CAAL,CAAOD,KAAK,CAACE,OAAb;AAAzB;AAAA;AAAA;AAAA;AAAA,UAAP;AACD,CAF4B,CAA7B;AAGA;AACA;AACA;AACA;;AACA,MAAMC,QAAQ,GAAGpB,YAAY,CAACW,oBAAD,CAA7B;;AAEA,MAAMU,cAAc,GAAG,MAAM;AAAA;;AAC3B,QAAMC,QAAQ,GAAGV,WAAW,EAA5B;AAEAW,EAAAA,OAAO,CAACC,GAAR,CAAYF,QAAZ;AACA,QAAM;AAAEJ,IAAAA;AAAF,MAAQd,cAAc,EAA5B;AACAW,EAAAA,QAAQ,CAACG,CAAC,CAAC,yCAAD,CAAF,CAAR;AACA,QAAM;AAAEO,IAAAA;AAAF,MAAqBZ,OAAO,EAAlC;AACA,QAAM,CAACa,eAAD,EAAkBC,kBAAlB,IAAwC/B,QAAQ,CAEpDgC,SAFoD,CAAtD;AAIA,QAAMC,aAAsC,GAAG;AAC7CC,IAAAA,KAAK,EAAE;AADsC,GAA/C;AAIA,QAAM,CAACC,iBAAD,EAAoBC,oBAApB,IAA4CpC,QAAQ,CAAC,KAAD,CAA1D;;AAEA,QAAMqC,QAAQ,GAAG,MAAOC,MAAP,IAA2C;AAC1DP,IAAAA,kBAAkB,CAACO,MAAD,CAAlB;AACA,UAAMC,MAAW,GAAG,MAAMV,cAAc,CAACS,MAAM,CAACJ,KAAR,CAAxC;AACAP,IAAAA,OAAO,CAACC,GAAR,CAAYW,MAAZ;;AACA,QAAIA,MAAM,CAACC,MAAP,KAAkB,MAAlB,IAA4BD,MAAM,CAAClB,KAAvC,EAA8C;AAC5C,aAAO;AAAE,SAACf,UAAD,GAAc;AAAhB,OAAP;AACD,KAFD,MAEO;AACL8B,MAAAA,oBAAoB,CAAC,IAAD,CAApB;AACD;AACF,GATD;;AAWA,sBACE;AAAA,eACG,CAACD,iBAAD,iBACC,QAAC,QAAD;AAAA,6BACE,QAAC,IAAD;AAAM,QAAA,SAAS,MAAf;AAAgB,QAAA,EAAE,EAAE;AAAEM,UAAAA,EAAE,EAAE;AAAN,SAApB;AAAA,gCACE,QAAC,IAAD;AAAM,UAAA,IAAI,MAAV;AAAW,UAAA,EAAE,EAAE,EAAf;AAAmB,UAAA,EAAE,EAAE,CAAvB;AAAA,kCACE,QAAC,WAAD;AACE,YAAA,SAAS,EAAC,IADZ;AAEE,YAAA,OAAO,EAAC,UAFV;AAGE,YAAA,KAAK,EAAC,wBAHR;AAAA,sBAKGnB,CAAC,CAAC,yCAAD;AALJ;AAAA;AAAA;AAAA;AAAA,kBADF,eAQE,QAAC,UAAD;AAAY,YAAA,SAAS,EAAC,GAAtB;AAA0B,YAAA,OAAO,EAAC,MAAlC;AAAA,sBACGA,CAAC,CAAC,0CAAD;AADJ;AAAA;AAAA;AAAA;AAAA,kBARF;AAAA;AAAA;AAAA;AAAA;AAAA,gBADF,eAaE,QAAC,IAAD;AAAM,UAAA,IAAI,MAAV;AAAW,UAAA,EAAE,EAAE,EAAf;AAAmB,UAAA,EAAE,EAAE,CAAvB;AAAA,iCACE,QAAC,IAAD;AACE,YAAA,QAAQ,EAAEe,QADZ;AAEE,YAAA,aAAa,EACXP,eAAe,GAAGA,eAAH,GAAqBG,aAHxC;AAKE,YAAA,QAAQ,EAAEb,QALZ;AAME,YAAA,MAAM,EAAE;AAAA,kBAAC;AAAEsB,gBAAAA,WAAF;AAAeC,gBAAAA,YAAf;AAA6BC,gBAAAA;AAA7B,eAAD;AAAA,kCACN;AAAM,gBAAA,QAAQ,EAAED,YAAhB;AAAA,wCACE,QAAC,cAAD;AACE,kBAAA,QAAQ,EAAEnB,QAAQ,CAACU,KADrB;AAEE,kBAAA,KAAK,EAAEZ,CAAC,CAAC,uCAAD,CAFV;AAGE,kBAAA,EAAE,EAAC,OAHL;AAIE,kBAAA,IAAI,EAAC,OAJP;AAKE,kBAAA,OAAO,EAAC,QALV;AAME,kBAAA,YAAY,EAAC,OANf;AAOE,kBAAA,UAAU,EAAE;AAAEuB,oBAAAA,gBAAgB,EAAE;AAApB;AAPd;AAAA;AAAA;AAAA;AAAA,wBADF,EAUGH,WAAW,iBACV,QAAC,oBAAD;AACE,kBAAA,OAAO,EAAC,QADV;AAEE,kBAAA,MAAM,MAFR;AAGE,kBAAA,QAAQ,MAHV;AAIE,kBAAA,SAAS,EAAC,GAJZ;AAAA,yCAME;AAAM,oBAAA,SAAS,EAAC,OAAhB;AAAA,8BAAyBpB,CAAC,CAACoB,WAAD;AAA1B;AAAA;AAAA;AAAA;AAAA;AANF;AAAA;AAAA;AAAA;AAAA,wBAXJ,eAoBE,QAAC,WAAD;AACE,kBAAA,OAAO,EAAC,WADV;AAEE,kBAAA,IAAI,EAAC,QAFP;AAGE,kBAAA,QAAQ,EAAEE,UAHZ;AAIE,kBAAA,IAAI,EAAC,OAJP;AAKE,kBAAA,EAAE,EAAE;AAAEE,oBAAAA,EAAE,EAAEC,KAAK,IAAIA,KAAK,CAACC;AAArB,mBALN;AAME,kBAAA,gBAAgB,MANlB;AAAA,4BAQG1B,CAAC,CAAC,yCAAD;AARJ;AAAA;AAAA;AAAA;AAAA,wBApBF,eA8BE,QAAC,UAAD;AACE,kBAAA,SAAS,EAAEf,IADb;AAEE,kBAAA,EAAE,EAAC,QAFL;AAGE,kBAAA,OAAO,EAAC,OAHV;AAIE,kBAAA,KAAK,EAAC,wBAJR;AAAA,4BAMGe,CAAC,CAAC,4BAAD;AANJ;AAAA;AAAA;AAAA;AAAA,wBA9BF;AAAA;AAAA;AAAA;AAAA;AAAA,sBADM;AAAA;AANV;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,gBAbF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YAFJ,EAqEGa,iBAAiB,IAAIL,eAArB,iBACC,QAAC,aAAD;AAAe,MAAA,KAAK,EAAEA,eAAe,CAACI;AAAtC;AAAA;AAAA;AAAA;AAAA,YAtEJ;AAAA,kBADF;AA2ED,CAvGD;;GAAMT,c;UACaT,W,EAGHR,c,EAEaS,O;;;KANvBQ,c;AAyGN,eAAeA,cAAf","sourcesContent":["import React, { useState } from \"react\";\nimport { Grid, Typography } from \"@mui/material\";\nimport { makeValidate, makeRequired } from \"mui-rff\";\nimport { Form } from \"react-final-form\";\nimport { FORM_ERROR } from \"final-form\";\nimport { Link } from \"react-router-dom\";\nimport { useTranslation } from \"react-i18next\";\nimport i18n from \"i18next\";\nimport {\n  LoginBox,\n  LoginButton,\n  LoginErrorHelperText,\n  LoginHeader,\n  LoginTextField\n} from \"../../components/LoginComponents/LoginComponents.style\";\nimport { ForgotPasswordSchema } from \"../../schema/ForgotPasswordSchema\";\nimport { ForgotPasswordInterface } from \"../../interfaces/ForgotPasswordInterface\";\nimport { useApiError } from \"../../providers/ApiErrorProvider\";\nimport { useAuth } from \"../../providers/Auth\";\nimport ResetPassword from \"../../components/ResetPassword/ResetPassword\";\nimport { TabTitle } from \"../../utils/GeneralFunctions\";\n/**\n * Uses the optional helper makeValidate function to format the error messages\n * into something usable by final form.\n */\nconst validate = makeValidate(ForgotPasswordSchema, error => {\n  return <span className=\"error\">{i18n.t(error.message)}</span>;\n});\n/**\n * Grabs all the required fields from the schema so that they can be passed into\n * the components without having to declare them in both the schema and the component.\n */\nconst required = makeRequired(ForgotPasswordSchema);\n\nconst ForgotPassword = () => {\n  const apiError = useApiError();\n\n  console.log(apiError);\n  const { t } = useTranslation();\n  TabTitle(t(\"forgotPassword.block1.header.page-title\"));\n  const { forgotPassword } = useAuth();\n  const [submittedValues, setSubmittedValues] = useState<\n    ForgotPasswordInterface | undefined\n  >(undefined);\n\n  const initialValues: ForgotPasswordInterface = {\n    email: \"\"\n  };\n\n  const [showResetPassword, setShowResetPassword] = useState(false);\n\n  const onSubmit = async (values: ForgotPasswordInterface) => {\n    setSubmittedValues(values);\n    const submit: any = await forgotPassword(values.email);\n    console.log(submit);\n    if (submit.status === \"FAIL\" || submit.error) {\n      return { [FORM_ERROR]: \"forgotPassword.block-form.loginError\" };\n    } else {\n      setShowResetPassword(true);\n    }\n  };\n\n  return (\n    <>\n      {!showResetPassword && (\n        <LoginBox>\n          <Grid container sx={{ pt: 0 }}>\n            <Grid item xs={12} sm={6}>\n              <LoginHeader\n                component=\"h1\"\n                variant=\"display2\"\n                color=\"fuchsiaAccessible.main\"\n              >\n                {t(\"forgotPassword.block1.header.page-title\")}\n              </LoginHeader>\n              <Typography component=\"p\" variant=\"lead\">\n                {t(\"forgotPassword.block1.header.short-intro\")}\n              </Typography>\n            </Grid>\n            <Grid item xs={12} sm={6}>\n              <Form\n                onSubmit={onSubmit}\n                initialValues={\n                  submittedValues ? submittedValues : initialValues\n                }\n                validate={validate}\n                render={({ submitError, handleSubmit, submitting }) => (\n                  <form onSubmit={handleSubmit}>\n                    <LoginTextField\n                      required={required.email}\n                      label={t(\"forgotPassword.block-form.input.email\")}\n                      id=\"email\"\n                      name=\"email\"\n                      variant=\"filled\"\n                      autoComplete=\"email\"\n                      InputProps={{ disableUnderline: true }}\n                    />\n                    {submitError && (\n                      <LoginErrorHelperText\n                        variant=\"filled\"\n                        filled\n                        required\n                        component=\"p\"\n                      >\n                        <span className=\"error\">{t(submitError)}</span>\n                      </LoginErrorHelperText>\n                    )}\n                    <LoginButton\n                      variant=\"contained\"\n                      type=\"submit\"\n                      disabled={submitting}\n                      size=\"large\"\n                      sx={{ mr: theme => theme.spacer_m }}\n                      disableElevation\n                    >\n                      {t(\"forgotPassword.block-form.button.submit\")}\n                    </LoginButton>\n                    <Typography\n                      component={Link}\n                      to=\"/login\"\n                      variant=\"body1\"\n                      color=\"fuchsiaAccessible.main\"\n                    >\n                      {t(\"all.block-form.button.link\")}\n                    </Typography>\n                  </form>\n                )}\n              />\n            </Grid>\n          </Grid>\n        </LoginBox>\n      )}\n      {showResetPassword && submittedValues && (\n        <ResetPassword email={submittedValues.email} />\n      )}\n    </>\n  );\n};\n\nexport default ForgotPassword;\n"]},"metadata":{},"sourceType":"module"}