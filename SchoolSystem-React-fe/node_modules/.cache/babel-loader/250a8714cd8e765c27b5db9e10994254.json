{"ast":null,"code":"// import React, { useState } from \"react\";\n// import { Grid, Typography } from \"@mui/material\";\n// import { makeValidate, makeRequired, showErrorOnBlur } from \"mui-rff\";\n// import { Form } from \"react-final-form\";\n// import { FORM_ERROR } from \"final-form\";\n// import { Link, useNavigate } from \"react-router-dom\";\n// import { useTranslation } from \"react-i18next\";\n// import i18n from \"i18next\";\n// import {\n//   LoginBox,\n//   LoginButton,\n//   LoginErrorHelperText,\n//   LoginHeader,\n//   LoginTextField\n// } from \"../../components/LoginComponents/LoginComponents.style\";\n// import { VerificationCodeSchema } from \"../../schema/VerificationCodeSchema\";\n// import { VerificationCodeInterface } from \"../../interfaces/VerificationCodeInterface\";\n// import { useAuth } from \"../../providers/Auth\";\n// import { TabTitle } from \"../../utils/GeneralFunctions\";\n// /**\n//  * Uses the optional helper makeValidate function to format the error messages\n//  * into something usable by final form.\n//  */\n// const validate = makeValidate(VerificationCodeSchema, error => {\n//   return <span className=\"error\">{i18n.t(error.message)}</span>;\n// });\n// /**\n//  * Grabs all the required fields from the schema so that they can be passed into\n//  * the components without having to declare them in both the schema and the component.\n//  */\n// const required = makeRequired(VerificationCodeSchema);\n// const VerificationCode = ({ user }) => {\n//   const navigate = useNavigate();\n//   const { t } = useTranslation();\n//   TabTitle(t(\"verificationCode.block1.header.page-title\"));\n//   const { confirmSignIn } = useAuth();\n//   const [submittedValues, setSubmittedValues] = useState<\n//     VerificationCodeInterface | undefined\n//   >(undefined);\n//   const initialValues: VerificationCodeInterface = {\n//     verificationCode: \"\"\n//   };\n//   const refreshPage = () => {\n//     window.location.reload();\n//   };\n//   const onSubmit = async (values: VerificationCodeInterface) => {\n//     setSubmittedValues(values);\n//     const data: any = await confirmSignIn(user, values.verificationCode);\n//     if (data.status === \"FAIL\" || data.error) {\n//       return { [FORM_ERROR]: \"verificationCode.block-form.loginError\" };\n//     } else {\n//       navigate(\"/shipments-dashboard\");\n//     }\n//   };\n//   return (\n//     <LoginBox>\n//       <Grid container sx={{ pt: 0 }}>\n//         <Grid item xs={12} sm={6}>\n//           <LoginHeader\n//             component=\"h1\"\n//             variant=\"display2\"\n//             color=\"fuchsiaAccessible.main\"\n//           >\n//             {t(\"verificationCode.block1.header.page-title\")}\n//           </LoginHeader>\n//           <Typography component=\"p\" variant=\"lead\">\n//             {user.challengeName === \"SMS_MFA\"\n//               ? t(\"verificationCode.block1.header.short-intro-sms\", {\n//                   sms: user.challengeParam.CODE_DELIVERY_DESTINATION\n//                 })\n//               : user.challengeParam === \"CUSTOM_CHALLENGE\"\n//               ? t(\"verificationCode.block1.header.short-intro-email\", {\n//                   email: user.challengeParam?.CODE_DELIVERY_DESTINATION\n//                 })\n//               : \"\"}\n//           </Typography>\n//         </Grid>\n//         <Grid item xs={12} sm={6}>\n//           <Form\n//             onSubmit={onSubmit}\n//             initialValues={submittedValues ? submittedValues : initialValues}\n//             validate={validate}\n//             render={({ submitError, handleSubmit, submitting }) => (\n//               <form onSubmit={handleSubmit}>\n//                 <LoginTextField\n//                   required={required.verificationCode}\n//                   label={t(\"verificationCode.block-form.input.code\")}\n//                   id=\"verificationCode\"\n//                   name=\"verificationCode\"\n//                   variant=\"filled\"\n//                   showError={showErrorOnBlur}\n//                   InputProps={{ disableUnderline: true }}\n//                   autoComplete=\"off\"\n//                 />\n//                 {submitError && (\n//                   <LoginErrorHelperText\n//                     variant=\"filled\"\n//                     filled\n//                     required\n//                     component=\"p\"\n//                   >\n//                     <span className=\"error\">{t(submitError)}</span>\n//                   </LoginErrorHelperText>\n//                 )}\n//                 <LoginButton\n//                   variant=\"contained\"\n//                   type=\"submit\"\n//                   disabled={submitting}\n//                   size=\"large\"\n//                   sx={{ mr: theme => theme.spacer_m }}\n//                   disableElevation\n//                 >\n//                   {t(\"verificationCode.block-form.button.submit\")}\n//                 </LoginButton>\n//                 <Typography\n//                   component={Link}\n//                   to=\"/login\"\n//                   variant=\"body1\"\n//                   color=\"fuchsiaAccessible.main\"\n//                   onClick={refreshPage}\n//                 >\n//                   {t(\"all.block-form.button.link\")}\n//                 </Typography>\n//               </form>\n//             )}\n//           />\n//         </Grid>\n//       </Grid>\n//     </LoginBox>\n//   );\n// };\n// export default VerificationCode;","map":{"version":3,"sources":["/Users/mohamedmaqil/Desktop/SchoolSystem/SchoolSystem-React-fe/src/components/VerificationCode/VerificationCode.tsx"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA","sourcesContent":["// import React, { useState } from \"react\";\n// import { Grid, Typography } from \"@mui/material\";\n// import { makeValidate, makeRequired, showErrorOnBlur } from \"mui-rff\";\n// import { Form } from \"react-final-form\";\n// import { FORM_ERROR } from \"final-form\";\n// import { Link, useNavigate } from \"react-router-dom\";\n// import { useTranslation } from \"react-i18next\";\n// import i18n from \"i18next\";\n// import {\n//   LoginBox,\n//   LoginButton,\n//   LoginErrorHelperText,\n//   LoginHeader,\n//   LoginTextField\n// } from \"../../components/LoginComponents/LoginComponents.style\";\n// import { VerificationCodeSchema } from \"../../schema/VerificationCodeSchema\";\n\n// import { VerificationCodeInterface } from \"../../interfaces/VerificationCodeInterface\";\n// import { useAuth } from \"../../providers/Auth\";\n// import { TabTitle } from \"../../utils/GeneralFunctions\";\n// /**\n//  * Uses the optional helper makeValidate function to format the error messages\n//  * into something usable by final form.\n//  */\n// const validate = makeValidate(VerificationCodeSchema, error => {\n//   return <span className=\"error\">{i18n.t(error.message)}</span>;\n// });\n// /**\n//  * Grabs all the required fields from the schema so that they can be passed into\n//  * the components without having to declare them in both the schema and the component.\n//  */\n// const required = makeRequired(VerificationCodeSchema);\n\n// const VerificationCode = ({ user }) => {\n\n//   const navigate = useNavigate();\n//   const { t } = useTranslation();\n//   TabTitle(t(\"verificationCode.block1.header.page-title\"));\n//   const { confirmSignIn } = useAuth();\n//   const [submittedValues, setSubmittedValues] = useState<\n//     VerificationCodeInterface | undefined\n//   >(undefined);\n\n//   const initialValues: VerificationCodeInterface = {\n//     verificationCode: \"\"\n//   };\n\n//   const refreshPage = () => {\n//     window.location.reload();\n//   };\n\n//   const onSubmit = async (values: VerificationCodeInterface) => {\n//     setSubmittedValues(values);\n\n//     const data: any = await confirmSignIn(user, values.verificationCode);\n//     if (data.status === \"FAIL\" || data.error) {\n//       return { [FORM_ERROR]: \"verificationCode.block-form.loginError\" };\n//     } else {\n//       navigate(\"/shipments-dashboard\");\n//     }\n//   };\n\n//   return (\n//     <LoginBox>\n//       <Grid container sx={{ pt: 0 }}>\n//         <Grid item xs={12} sm={6}>\n//           <LoginHeader\n//             component=\"h1\"\n//             variant=\"display2\"\n//             color=\"fuchsiaAccessible.main\"\n//           >\n//             {t(\"verificationCode.block1.header.page-title\")}\n//           </LoginHeader>\n//           <Typography component=\"p\" variant=\"lead\">\n//             {user.challengeName === \"SMS_MFA\"\n//               ? t(\"verificationCode.block1.header.short-intro-sms\", {\n//                   sms: user.challengeParam.CODE_DELIVERY_DESTINATION\n//                 })\n//               : user.challengeParam === \"CUSTOM_CHALLENGE\"\n//               ? t(\"verificationCode.block1.header.short-intro-email\", {\n//                   email: user.challengeParam?.CODE_DELIVERY_DESTINATION\n//                 })\n//               : \"\"}\n//           </Typography>\n//         </Grid>\n//         <Grid item xs={12} sm={6}>\n//           <Form\n//             onSubmit={onSubmit}\n//             initialValues={submittedValues ? submittedValues : initialValues}\n//             validate={validate}\n//             render={({ submitError, handleSubmit, submitting }) => (\n//               <form onSubmit={handleSubmit}>\n//                 <LoginTextField\n//                   required={required.verificationCode}\n//                   label={t(\"verificationCode.block-form.input.code\")}\n//                   id=\"verificationCode\"\n//                   name=\"verificationCode\"\n//                   variant=\"filled\"\n//                   showError={showErrorOnBlur}\n//                   InputProps={{ disableUnderline: true }}\n//                   autoComplete=\"off\"\n//                 />\n//                 {submitError && (\n//                   <LoginErrorHelperText\n//                     variant=\"filled\"\n//                     filled\n//                     required\n//                     component=\"p\"\n//                   >\n//                     <span className=\"error\">{t(submitError)}</span>\n//                   </LoginErrorHelperText>\n//                 )}\n//                 <LoginButton\n//                   variant=\"contained\"\n//                   type=\"submit\"\n//                   disabled={submitting}\n//                   size=\"large\"\n//                   sx={{ mr: theme => theme.spacer_m }}\n//                   disableElevation\n//                 >\n//                   {t(\"verificationCode.block-form.button.submit\")}\n//                 </LoginButton>\n//                 <Typography\n//                   component={Link}\n//                   to=\"/login\"\n//                   variant=\"body1\"\n//                   color=\"fuchsiaAccessible.main\"\n//                   onClick={refreshPage}\n//                 >\n//                   {t(\"all.block-form.button.link\")}\n//                 </Typography>\n//               </form>\n//             )}\n//           />\n//         </Grid>\n//       </Grid>\n//     </LoginBox>\n//   );\n// };\n\n// export default VerificationCode;\n"]},"metadata":{},"sourceType":"module"}