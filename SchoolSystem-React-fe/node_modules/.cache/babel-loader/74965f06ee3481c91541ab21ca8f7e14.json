{"ast":null,"code":"var _jsxFileName = \"/Users/mohamedmaqil/Desktop/RIVO/rivo-portal-ui/src/components/ResetPassword/ResetPassword.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport { Box, Grid, IconButton, InputAdornment, Typography } from \"@mui/material\";\nimport { makeValidate, makeRequired, showErrorOnBlur } from \"mui-rff\";\nimport { Form } from \"react-final-form\";\nimport { FORM_ERROR } from \"final-form\";\nimport PasswordChecklist from \"react-password-checklist\";\nimport { useTranslation } from \"react-i18next\";\nimport { useNavigate } from \"react-router-dom\";\nimport i18n from \"i18next\";\nimport { Visibility, VisibilityOff } from \"@mui/icons-material\";\nimport { LoginBox, LoginButton, LoginErrorHelperText, LoginHeader, LoginTextField } from \"../LoginComponents/LoginComponents.style\";\nimport { ResetPasswordSchema } from \"../../schema/ResetPasswordSchema\";\nimport { useAuth } from \"../../providers/Auth\";\nimport { TabTitle } from \"../../utils/GeneralFunctions\"; // import { useAuth } from \"../../providers/Auth\";\n\n/**\n * Uses the optional helper makeValidate function to format the error messages\n * into something usable by final form.\n */\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst validate = makeValidate(ResetPasswordSchema, error => {\n  return /*#__PURE__*/_jsxDEV(\"span\", {\n    className: \"error\",\n    children: i18n.t(error.message)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 35,\n    columnNumber: 10\n  }, this);\n});\n/**\n * Grabs all the required fields from the schema so that they can be passed into\n * the components without having to declare them in both the schema and the component.\n */\n\nconst required = makeRequired(ResetPasswordSchema);\n\nconst ResetPassword = _ref => {\n  _s();\n\n  let {\n    email\n  } = _ref;\n  const {\n    t\n  } = useTranslation();\n  const navigate = useNavigate();\n  TabTitle(t(\"resetPassword.block1.header.page-title\"));\n  const {\n    forgotPasswordSubmit\n  } = useAuth();\n  const [submittedValues, setSubmittedValues] = useState(undefined);\n  const initialValues = {\n    verificationCode: \"\",\n    newPassword: \"\",\n    confirmPassword: \"\"\n  };\n  const [showPassword, setShowPassword] = useState({\n    newPassword: false,\n    confirmPassword: false\n  });\n\n  const onSubmit = async values => {\n    setSubmittedValues(values);\n    const data = await forgotPasswordSubmit(email, values.verificationCode, values.newPassword);\n\n    if (data.status === \"FAIL\" || data.error) {\n      return {\n        [FORM_ERROR]: \"resetPassword.block-form.resetError\"\n      };\n    } else {\n      navigate(\"/login\", {\n        state: {\n          showAlert: true,\n          severity: \"success\",\n          message: \"resetPassword.header.page-success-alert\"\n        }\n      });\n    }\n  };\n\n  const handleMouseDownPassword = event => {\n    event.preventDefault();\n  };\n\n  return /*#__PURE__*/_jsxDEV(LoginBox, {\n    children: /*#__PURE__*/_jsxDEV(Grid, {\n      container: true,\n      sx: {\n        pt: 0\n      },\n      children: [/*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        xs: 12,\n        sm: 6,\n        children: [/*#__PURE__*/_jsxDEV(LoginHeader, {\n          component: \"h1\",\n          variant: \"display2\",\n          color: \"fuchsiaAccessible.main\",\n          children: t(\"resetPassword.block1.header.page-title\")\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Typography, {\n          component: \"p\",\n          variant: \"lead\",\n          children: t(\"resetPassword.block1.header.short-intro\", {\n            email: email\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 101,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        xs: 12,\n        sm: 6,\n        children: /*#__PURE__*/_jsxDEV(Form, {\n          onSubmit: onSubmit,\n          initialValues: submittedValues ? submittedValues : initialValues,\n          validate: validate,\n          render: _ref2 => {\n            let {\n              submitError,\n              handleSubmit,\n              submitting,\n              values\n            } = _ref2;\n            return /*#__PURE__*/_jsxDEV(\"form\", {\n              onSubmit: handleSubmit,\n              noValidate: true,\n              autoComplete: \"new-password\",\n              children: [/*#__PURE__*/_jsxDEV(LoginTextField, {\n                required: required.verificationCode,\n                type: \"text\",\n                label: t(\"verificationCode.block-form.input.code\"),\n                id: \"verificationCode\",\n                name: \"verificationCode\",\n                variant: \"filled\",\n                autoComplete: \"current-password\",\n                showError: showErrorOnBlur,\n                InputProps: {\n                  disableUnderline: true\n                }\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 116,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(LoginTextField, {\n                required: required.newPassword,\n                type: showPassword && showPassword.newPassword ? \"text\" : \"password\",\n                label: t(\"resetPassword.block-form.input.newPassword\"),\n                id: \"newPassword\",\n                name: \"newPassword\",\n                variant: \"filled\",\n                showError: () => {\n                  return;\n                },\n                InputProps: {\n                  disableUnderline: true,\n                  endAdornment: /*#__PURE__*/_jsxDEV(InputAdornment, {\n                    position: \"end\",\n                    children: /*#__PURE__*/_jsxDEV(IconButton, {\n                      \"aria-label\": showPassword && showPassword.newPassword ? t(\"all.button.password-icon-show\") : t(\"all.button.password-icon-hide\"),\n                      onClick: () => setShowPassword(prevState => ({ ...prevState,\n                        newPassword: !prevState.newPassword\n                      })),\n                      onMouseDown: handleMouseDownPassword,\n                      edge: \"end\",\n                      component: \"button\",\n                      children: showPassword && showPassword.newPassword ? /*#__PURE__*/_jsxDEV(VisibilityOff, {}, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 164,\n                        columnNumber: 29\n                      }, this) : /*#__PURE__*/_jsxDEV(Visibility, {}, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 166,\n                        columnNumber: 29\n                      }, this)\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 147,\n                      columnNumber: 25\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 146,\n                    columnNumber: 23\n                  }, this)\n                }\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 129,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(Typography, {\n                component: \"p\",\n                variant: \"h4\",\n                sx: {\n                  mb: theme => theme.spacer_n\n                },\n                children: [t(\"resetPassword.block-form.text.newPassword\"), \":\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 173,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(Box, {\n                sx: {\n                  mb: theme => theme.spacer_n\n                },\n                children: /*#__PURE__*/_jsxDEV(PasswordChecklist, {\n                  rules: [\"minLength\", \"specialChar\", \"number\", \"capital\", \"lowercase\"],\n                  minLength: 12,\n                  value: values && values.newPassword ? values.newPassword : \"\",\n                  valueAgain: values && values.confirmPassword ? values.confirmPassword : \"\",\n                  invalidColor: \"#E10993\",\n                  validColor: \"#E10993\",\n                  messages: {\n                    minLength: t(\"resetPassword.block-form.error.password-characters-minimum\"),\n                    specialChar: t(\"resetPassword.block-form.error.password-special-character-minimum\"),\n                    number: t(\"resetPassword.block-form.error.password-number-minimum\"),\n                    capital: t(\"resetPassword.block-form.error.password-uppercase-minimum\"),\n                    lowercase: t(\"resetPassword.block-form.error.password-lowercase-minimum\")\n                  }\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 181,\n                  columnNumber: 19\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 180,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(LoginTextField, {\n                required: required.confirmPassword,\n                type: showPassword && showPassword.confirmPassword ? \"text\" : \"password\",\n                label: t(\"resetPassword.block-form.input.confirmPassword\"),\n                id: \"confirmPassword\",\n                name: \"confirmPassword\",\n                variant: \"filled\",\n                showError: showErrorOnBlur,\n                InputProps: {\n                  disableUnderline: true,\n                  endAdornment: /*#__PURE__*/_jsxDEV(InputAdornment, {\n                    position: \"end\",\n                    children: /*#__PURE__*/_jsxDEV(IconButton, {\n                      \"aria-label\": showPassword && showPassword.confirmPassword ? t(\"all.button.password-icon-show\") : t(\"all.button.password-icon-hide\"),\n                      onClick: () => setShowPassword(prevState => ({ ...prevState,\n                        confirmPassword: !prevState.confirmPassword\n                      })),\n                      onMouseDown: handleMouseDownPassword,\n                      edge: \"end\",\n                      component: \"button\",\n                      children: showPassword && showPassword.confirmPassword ? /*#__PURE__*/_jsxDEV(VisibilityOff, {}, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 252,\n                        columnNumber: 29\n                      }, this) : /*#__PURE__*/_jsxDEV(Visibility, {}, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 254,\n                        columnNumber: 29\n                      }, this)\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 235,\n                      columnNumber: 25\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 234,\n                    columnNumber: 23\n                  }, this)\n                }\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 219,\n                columnNumber: 17\n              }, this), submitError && /*#__PURE__*/_jsxDEV(LoginErrorHelperText, {\n                variant: \"filled\",\n                filled: true,\n                required: true,\n                component: \"p\",\n                children: /*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"error\",\n                  children: t(submitError)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 268,\n                  columnNumber: 21\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 262,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(LoginButton, {\n                variant: \"contained\",\n                type: \"submit\",\n                disabled: submitting,\n                size: \"large\",\n                sx: {\n                  mr: theme => theme.spacer_m,\n                  mb: theme => theme.spacer_m\n                },\n                disableElevation: true,\n                children: t(\"resetPassword.block-form.button.submit\")\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 271,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 111,\n              columnNumber: 15\n            }, this);\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 106,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 91,\n    columnNumber: 5\n  }, this);\n};\n\n_s(ResetPassword, \"6ky5rmvISzZ7Osm0Y0cxJk7SsL0=\", false, function () {\n  return [useTranslation, useNavigate, useAuth];\n});\n\n_c = ResetPassword;\nexport default ResetPassword;\n\nvar _c;\n\n$RefreshReg$(_c, \"ResetPassword\");","map":{"version":3,"sources":["/Users/mohamedmaqil/Desktop/RIVO/rivo-portal-ui/src/components/ResetPassword/ResetPassword.tsx"],"names":["React","useState","Box","Grid","IconButton","InputAdornment","Typography","makeValidate","makeRequired","showErrorOnBlur","Form","FORM_ERROR","PasswordChecklist","useTranslation","useNavigate","i18n","Visibility","VisibilityOff","LoginBox","LoginButton","LoginErrorHelperText","LoginHeader","LoginTextField","ResetPasswordSchema","useAuth","TabTitle","validate","error","t","message","required","ResetPassword","email","navigate","forgotPasswordSubmit","submittedValues","setSubmittedValues","undefined","initialValues","verificationCode","newPassword","confirmPassword","showPassword","setShowPassword","onSubmit","values","data","status","state","showAlert","severity","handleMouseDownPassword","event","preventDefault","pt","submitError","handleSubmit","submitting","disableUnderline","endAdornment","prevState","mb","theme","spacer_n","minLength","specialChar","number","capital","lowercase","mr","spacer_m"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport {\n  Box,\n  Grid,\n  IconButton,\n  InputAdornment,\n  Typography\n} from \"@mui/material\";\nimport { makeValidate, makeRequired, showErrorOnBlur } from \"mui-rff\";\nimport { Form } from \"react-final-form\";\nimport { FORM_ERROR } from \"final-form\";\nimport PasswordChecklist from \"react-password-checklist\";\nimport { useTranslation } from \"react-i18next\";\nimport { useNavigate } from \"react-router-dom\";\nimport i18n from \"i18next\";\nimport { Visibility, VisibilityOff } from \"@mui/icons-material\";\nimport {\n  LoginBox,\n  LoginButton,\n  LoginErrorHelperText,\n  LoginHeader,\n  LoginTextField\n} from \"../LoginComponents/LoginComponents.style\";\nimport { ResetPasswordSchema } from \"../../schema/ResetPasswordSchema\";\nimport { ResetPasswordInterface } from \"../../interfaces/ResetPasswordInterface\";\nimport { useAuth } from \"../../providers/Auth\";\nimport { TabTitle } from \"../../utils/GeneralFunctions\";\n// import { useAuth } from \"../../providers/Auth\";\n\n/**\n * Uses the optional helper makeValidate function to format the error messages\n * into something usable by final form.\n */\nconst validate = makeValidate(ResetPasswordSchema, error => {\n  return <span className=\"error\">{i18n.t(error.message)}</span>;\n});\n/**\n * Grabs all the required fields from the schema so that they can be passed into\n * the components without having to declare them in both the schema and the component.\n */\nconst required = makeRequired(ResetPasswordSchema);\n\nconst ResetPassword = ({ email }) => {\n\n  const { t } = useTranslation();\n  const navigate = useNavigate();\n  TabTitle(t(\"resetPassword.block1.header.page-title\"));\n  const { forgotPasswordSubmit } = useAuth();\n\n  const [submittedValues, setSubmittedValues] = useState<\n    ResetPasswordInterface | undefined\n  >(undefined);\n\n  const initialValues: ResetPasswordInterface = {\n    verificationCode: \"\",\n    newPassword: \"\",\n    confirmPassword: \"\"\n  };\n\n  const [showPassword, setShowPassword] = useState({\n    newPassword: false,\n    confirmPassword: false\n  });\n\n  const onSubmit = async (values: ResetPasswordInterface) => {\n    setSubmittedValues(values);\n    const data: any = await forgotPasswordSubmit(\n      email,\n      values.verificationCode,\n      values.newPassword\n    );\n\n    if (data.status === \"FAIL\" || data.error) {\n      return { [FORM_ERROR]: \"resetPassword.block-form.resetError\" };\n    } else {\n      navigate(\"/login\", {\n        state: {\n          showAlert: true,\n          severity: \"success\",\n          message: \"resetPassword.header.page-success-alert\"\n        }\n      });\n    }\n  };\n\n  const handleMouseDownPassword = event => {\n    event.preventDefault();\n  };\n\n  return (\n    <LoginBox>\n      <Grid container sx={{ pt: 0 }}>\n        <Grid item xs={12} sm={6}>\n          <LoginHeader\n            component=\"h1\"\n            variant=\"display2\"\n            color=\"fuchsiaAccessible.main\"\n          >\n            {t(\"resetPassword.block1.header.page-title\")}\n          </LoginHeader>\n          <Typography component=\"p\" variant=\"lead\">\n            {t(\"resetPassword.block1.header.short-intro\", { email: email })}\n          </Typography>\n        </Grid>\n        <Grid item xs={12} sm={6}>\n          <Form\n            onSubmit={onSubmit}\n            initialValues={submittedValues ? submittedValues : initialValues}\n            validate={validate}\n            render={({ submitError, handleSubmit, submitting, values }) => (\n              <form\n                onSubmit={handleSubmit}\n                noValidate={true}\n                autoComplete=\"new-password\"\n              >\n                <LoginTextField\n                  required={required.verificationCode}\n                  type=\"text\"\n                  label={t(\"verificationCode.block-form.input.code\")}\n                  id=\"verificationCode\"\n                  name=\"verificationCode\"\n                  variant=\"filled\"\n                  autoComplete=\"current-password\"\n                  showError={showErrorOnBlur}\n                  InputProps={{\n                    disableUnderline: true\n                  }}\n                />\n                <LoginTextField\n                  required={required.newPassword}\n                  type={\n                    showPassword && showPassword.newPassword\n                      ? \"text\"\n                      : \"password\"\n                  }\n                  label={t(\"resetPassword.block-form.input.newPassword\")}\n                  id=\"newPassword\"\n                  name=\"newPassword\"\n                  variant=\"filled\"\n                  showError={() => {\n                    return;\n                  }}\n                  InputProps={{\n                    disableUnderline: true,\n                    endAdornment: (\n                      <InputAdornment position=\"end\">\n                        <IconButton\n                          aria-label={\n                            showPassword && showPassword.newPassword\n                              ? t(\"all.button.password-icon-show\")\n                              : t(\"all.button.password-icon-hide\")\n                          }\n                          onClick={() =>\n                            setShowPassword(prevState => ({\n                              ...prevState,\n                              newPassword: !prevState.newPassword\n                            }))\n                          }\n                          onMouseDown={handleMouseDownPassword}\n                          edge=\"end\"\n                          component=\"button\"\n                        >\n                          {showPassword && showPassword.newPassword ? (\n                            <VisibilityOff />\n                          ) : (\n                            <Visibility />\n                          )}\n                        </IconButton>\n                      </InputAdornment>\n                    )\n                  }}\n                />\n                <Typography\n                  component=\"p\"\n                  variant=\"h4\"\n                  sx={{ mb: theme => theme.spacer_n }}\n                >\n                  {t(\"resetPassword.block-form.text.newPassword\")}:\n                </Typography>\n                <Box sx={{ mb: theme => theme.spacer_n }}>\n                  <PasswordChecklist\n                    rules={[\n                      \"minLength\",\n                      \"specialChar\",\n                      \"number\",\n                      \"capital\",\n                      \"lowercase\"\n                    ]}\n                    minLength={12}\n                    value={\n                      values && values.newPassword ? values.newPassword : \"\"\n                    }\n                    valueAgain={\n                      values && values.confirmPassword\n                        ? values.confirmPassword\n                        : \"\"\n                    }\n                    invalidColor=\"#E10993\"\n                    validColor=\"#E10993\"\n                    messages={{\n                      minLength: t(\n                        \"resetPassword.block-form.error.password-characters-minimum\"\n                      ),\n                      specialChar: t(\n                        \"resetPassword.block-form.error.password-special-character-minimum\"\n                      ),\n                      number: t(\n                        \"resetPassword.block-form.error.password-number-minimum\"\n                      ),\n                      capital: t(\n                        \"resetPassword.block-form.error.password-uppercase-minimum\"\n                      ),\n                      lowercase: t(\n                        \"resetPassword.block-form.error.password-lowercase-minimum\"\n                      )\n                    }}\n                  />\n                </Box>\n                <LoginTextField\n                  required={required.confirmPassword}\n                  type={\n                    showPassword && showPassword.confirmPassword\n                      ? \"text\"\n                      : \"password\"\n                  }\n                  label={t(\"resetPassword.block-form.input.confirmPassword\")}\n                  id=\"confirmPassword\"\n                  name=\"confirmPassword\"\n                  variant=\"filled\"\n                  showError={showErrorOnBlur}\n                  InputProps={{\n                    disableUnderline: true,\n                    endAdornment: (\n                      <InputAdornment position=\"end\">\n                        <IconButton\n                          aria-label={\n                            showPassword && showPassword.confirmPassword\n                              ? t(\"all.button.password-icon-show\")\n                              : t(\"all.button.password-icon-hide\")\n                          }\n                          onClick={() =>\n                            setShowPassword(prevState => ({\n                              ...prevState,\n                              confirmPassword: !prevState.confirmPassword\n                            }))\n                          }\n                          onMouseDown={handleMouseDownPassword}\n                          edge=\"end\"\n                          component=\"button\"\n                        >\n                          {showPassword && showPassword.confirmPassword ? (\n                            <VisibilityOff />\n                          ) : (\n                            <Visibility />\n                          )}\n                        </IconButton>\n                      </InputAdornment>\n                    )\n                  }}\n                />\n                {submitError && (\n                  <LoginErrorHelperText\n                    variant=\"filled\"\n                    filled\n                    required\n                    component=\"p\"\n                  >\n                    <span className=\"error\">{t(submitError)}</span>\n                  </LoginErrorHelperText>\n                )}\n                <LoginButton\n                  variant=\"contained\"\n                  type=\"submit\"\n                  disabled={submitting}\n                  size=\"large\"\n                  sx={{\n                    mr: theme => theme.spacer_m,\n                    mb: theme => theme.spacer_m\n                  }}\n                  disableElevation\n                >\n                  {t(\"resetPassword.block-form.button.submit\")}\n                </LoginButton>\n              </form>\n            )}\n          />\n        </Grid>\n      </Grid>\n    </LoginBox>\n  );\n};\n\nexport default ResetPassword;\n"]},"metadata":{},"sourceType":"module"}