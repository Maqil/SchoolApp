{"ast":null,"code":"var _jsxFileName = \"/Users/mohamedmaqil/Desktop/RIVO/rivo-portal-ui/src/providers/CustomerProvider.tsx\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport React, { useEffect } from \"react\";\nimport { getI18n } from \"react-i18next\";\nimport { defaultCustomerData } from \"../interfaces/CustomerDataInterface\";\nimport { defaultMainCustomerData } from \"../interfaces/MainCustomerDataInterface\";\nimport { useApiError } from \"./ApiErrorProvider\";\nimport { useAuth } from \"../providers/Auth\";\nimport SignRequest from \"../helpers/SignRequest\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CustomerContext = /*#__PURE__*/React.createContext({\n  loadingCustomer: true,\n  customerData: [defaultCustomerData],\n  mainCustomerData: defaultMainCustomerData\n});\nexport const CustomerProvider = props => {\n  _s();\n\n  const [customerData, setCustomerData] = React.useState([]);\n  const [mainCustomerData, setMainCustomerData] = React.useState(defaultMainCustomerData);\n  const [loadingCustomer, setLoadingCustomer] = React.useState(true);\n  const [cognitoId, setcognitoId] = React.useState(\"\");\n  const {\n    setErrorCode\n  } = useApiError();\n  const user = useAuth();\n  useEffect(() => {\n    const getCustomerData = async user => {\n      console.log(\"user: \", user.user);\n\n      if (user.user && !user.loading) {\n        const subId = await user.getSubId();\n\n        if (subId === cognitoId) {\n          return;\n        }\n\n        setcognitoId(subId);\n\n        if (!subId) {\n          setLoadingCustomer(false);\n          setCustomerData([defaultCustomerData]);\n          return;\n        }\n\n        setLoadingCustomer(true);\n\n        try {\n          const body = {\n            cognito_id: subId\n          }; //pass sub_id to api\n          //GET /v1/cargo/profile/sls/?sk_id|cognito_id={id}\n          // CALL: https://akamai-rivo-int.dbaas.aircanada.com/retrieve_customer_profile/admin\n\n          const rawData = await SignRequest(\"POST\", process.env.REACT_APP_API_BASE, process.env.REACT_APP_AKAMAI_DBAAS_API_URL, \"/retrieve_customer_profile/admin\", body).then(signedRequest => {\n            return fetch(signedRequest.api, {\n              method: \"POST\",\n              headers: signedRequest.headers,\n              body: signedRequest.data\n            });\n          }).then(response => response.json()).then(response => {\n            return response;\n          });\n\n          if (!rawData) {\n            setLoadingCustomer(false);\n            setCustomerData([]);\n          } // if (rawData.status === \"ERROR\") {\n          //   setLoadingCustomer(false);\n          //   setCustomerData([]);\n          //   // setErrorCode(error.TIME_OUT);\n          // }\n\n\n          const data = getCustomerProfile(rawData, subId);\n          setMainCustomerData({\n            Id: rawData[0].Id,\n            Name: rawData[0].Name,\n            Type: rawData[0].Type,\n            Phone: rawData[0].Phone,\n            Fax: rawData[0].Fax,\n            Website: rawData[0].Website,\n            BillingStreet: rawData[0].BillingStreet,\n            BillingCity: rawData[0].BillingCity,\n            BillingState: rawData[0].BillingState,\n            BillingPostalCode: rawData[0].BillingPostalCode,\n            BillingStateCode: rawData[0].BillingStateCode,\n            BillingCountryCode: rawData[0].BillingCountryCode,\n            Acct_ID: rawData[0].Acct_ID,\n            SK_ID: rawData[0].SK_IDs,\n            Account_Status: rawData[0].Account_Status,\n            RecordTypeId: rawData[0].RecordTypeId\n          });\n          setCustomerData(data);\n          setLoadingCustomer(false);\n        } catch (e) {\n          var _e$response;\n\n          if ((_e$response = e.response) !== null && _e$response !== void 0 && _e$response.status) {\n            var _e$response2;\n\n            setErrorCode((_e$response2 = e.response) === null || _e$response2 === void 0 ? void 0 : _e$response2.status);\n          }\n\n          setLoadingCustomer(false);\n        } finally {\n          setLoadingCustomer(false);\n        }\n      }\n    };\n\n    getCustomerData(user);\n  }, [cognitoId, user, setErrorCode]);\n\n  const getCustomerProfile = (list, id) => {\n    const newList = [];\n\n    if ((list === null || list === void 0 ? void 0 : list.length) === 0) {\n      return newList;\n    }\n\n    try {\n      const contacts = list[0][\"Contacts\"].records.filter(c => c.Cognito_ID === id);\n      newList.push({\n        id: contacts[0].Id,\n        emailId: contacts[0].Email,\n        mobile: contacts[0].MobilePhone,\n        firstName: contacts[0].FirstName,\n        lastName: contacts[0].LastName,\n        language: getI18n().resolvedLanguage,\n        accountNumber: contacts[0].SK_IDs,\n        mailingStreet: contacts[0].MailingStreet,\n        mailingCity: contacts[0].MailingCity,\n        mailingState: contacts[0].MailingState,\n        mailingPostalCode: contacts[0].MailingPostalCode,\n        mailingCountry: contacts[0].MailingCountry,\n        contactId: contacts[0].Contact_ID,\n        accountId: contacts[0].AccountId,\n        recordTypeId: contacts[0].RecordTypeId\n      });\n    } catch (e) {\n      console.debug(\"ERROR: transformCustomerList exception \", e);\n    }\n\n    return newList;\n  };\n\n  return /*#__PURE__*/_jsxDEV(CustomerContext.Provider, {\n    value: {\n      loadingCustomer,\n      customerData,\n      mainCustomerData\n    },\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 158,\n    columnNumber: 5\n  }, this);\n};\n\n_s(CustomerProvider, \"Bz88lcguhb5bX4bCQ0pLCUp2Rxs=\", false, function () {\n  return [useApiError, useAuth];\n});\n\n_c = CustomerProvider;\nexport const useCustomer = () => {\n  _s2();\n\n  const context = React.useContext(CustomerContext);\n  return context;\n};\n\n_s2(useCustomer, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\n\nvar _c;\n\n$RefreshReg$(_c, \"CustomerProvider\");","map":{"version":3,"sources":["/Users/mohamedmaqil/Desktop/RIVO/rivo-portal-ui/src/providers/CustomerProvider.tsx"],"names":["React","useEffect","getI18n","defaultCustomerData","defaultMainCustomerData","useApiError","useAuth","SignRequest","CustomerContext","createContext","loadingCustomer","customerData","mainCustomerData","CustomerProvider","props","setCustomerData","useState","setMainCustomerData","setLoadingCustomer","cognitoId","setcognitoId","setErrorCode","user","getCustomerData","console","log","loading","subId","getSubId","body","cognito_id","rawData","process","env","REACT_APP_API_BASE","REACT_APP_AKAMAI_DBAAS_API_URL","then","signedRequest","fetch","api","method","headers","data","response","json","getCustomerProfile","Id","Name","Type","Phone","Fax","Website","BillingStreet","BillingCity","BillingState","BillingPostalCode","BillingStateCode","BillingCountryCode","Acct_ID","SK_ID","SK_IDs","Account_Status","RecordTypeId","e","status","list","id","newList","length","contacts","records","filter","c","Cognito_ID","push","emailId","Email","mobile","MobilePhone","firstName","FirstName","lastName","LastName","language","resolvedLanguage","accountNumber","mailingStreet","MailingStreet","mailingCity","MailingCity","mailingState","MailingState","mailingPostalCode","MailingPostalCode","mailingCountry","MailingCountry","contactId","Contact_ID","accountId","AccountId","recordTypeId","debug","children","useCustomer","context","useContext"],"mappings":"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","sourcesContent":["import React, { useEffect } from \"react\";\nimport { getI18n } from \"react-i18next\";\nimport {\n  defaultCustomerData,\n  CustomerDataInterface\n} from \"../interfaces/CustomerDataInterface\";\nimport {\n  defaultMainCustomerData,\n  MainCustomerDataInterface\n} from \"../interfaces/MainCustomerDataInterface\";\nimport { useApiError } from \"./ApiErrorProvider\";\nimport { useAuth } from \"../providers/Auth\";\nimport SignRequest from \"../helpers/SignRequest\";\nimport { error } from \"../constants/bindings\";\n\nconst CustomerContext = React.createContext({\n  loadingCustomer: true,\n  customerData: [defaultCustomerData],\n  mainCustomerData: defaultMainCustomerData\n});\n\nexport const CustomerProvider = props => {\n  const [customerData, setCustomerData] = React.useState<\n    CustomerDataInterface[]\n  >([]);\n  const [mainCustomerData, setMainCustomerData] = React.useState(\n    defaultMainCustomerData\n  );\n\n  const [loadingCustomer, setLoadingCustomer] = React.useState(true);\n  const [cognitoId, setcognitoId] = React.useState(\"\");\n  const { setErrorCode } = useApiError();\n  const user = useAuth();\n\n  useEffect(() => {\n    const getCustomerData = async user => {\n      console.log(\"user: \", user.user);\n      if (user.user && !user.loading) {\n      const subId = await user.getSubId();\n      if (subId === cognitoId) {\n        return;\n      }\n      setcognitoId(subId);\n\n      if (!subId) {\n        setLoadingCustomer(false);\n        setCustomerData([defaultCustomerData]);\n        return;\n      }\n      setLoadingCustomer(true);\n      try {\n        const body = {\n          cognito_id: subId\n        };\n\n        //pass sub_id to api\n        //GET /v1/cargo/profile/sls/?sk_id|cognito_id={id}\n        // CALL: https://akamai-rivo-int.dbaas.aircanada.com/retrieve_customer_profile/admin\n        const rawData = await SignRequest(\n          \"POST\",\n          process.env.REACT_APP_API_BASE,\n          process.env.REACT_APP_AKAMAI_DBAAS_API_URL,\n          \"/retrieve_customer_profile/admin\",\n          body\n        )\n          .then(signedRequest => {\n            return fetch(signedRequest.api, {\n              method: \"POST\",\n              headers: signedRequest.headers,\n              body: signedRequest.data\n            });\n          })\n          .then(response => response.json())\n          .then(response => {\n            return response;\n          });\n\n        if (!rawData) {\n          setLoadingCustomer(false);\n          setCustomerData([]);\n        }\n\n        // if (rawData.status === \"ERROR\") {\n        //   setLoadingCustomer(false);\n        //   setCustomerData([]);\n        //   // setErrorCode(error.TIME_OUT);\n        // }\n\n        const data = getCustomerProfile(rawData, subId);\n\n        setMainCustomerData({\n          Id: rawData[0].Id,\n          Name: rawData[0].Name,\n          Type: rawData[0].Type,\n          Phone: rawData[0].Phone,\n          Fax: rawData[0].Fax,\n          Website: rawData[0].Website,\n          BillingStreet: rawData[0].BillingStreet,\n          BillingCity: rawData[0].BillingCity,\n          BillingState: rawData[0].BillingState,\n          BillingPostalCode: rawData[0].BillingPostalCode,\n          BillingStateCode: rawData[0].BillingStateCode,\n          BillingCountryCode: rawData[0].BillingCountryCode,\n          Acct_ID: rawData[0].Acct_ID,\n          SK_ID: rawData[0].SK_IDs,\n          Account_Status: rawData[0].Account_Status,\n          RecordTypeId: rawData[0].RecordTypeId\n        } as MainCustomerDataInterface);\n\n        setCustomerData(data);\n        setLoadingCustomer(false);\n      } catch (e: any) {\n        if (e.response?.status) {\n          setErrorCode(e.response?.status);\n        }\n        setLoadingCustomer(false);\n      } finally {\n        setLoadingCustomer(false);\n      }\n      }\n    }\n    getCustomerData(user);\n  }, [cognitoId, user, setErrorCode]);\n\n  const getCustomerProfile = (list, id) => {\n    const newList: CustomerDataInterface[] = [];\n    if (list?.length === 0) {\n      return newList;\n    }\n    try {\n      const contacts = list[0][\"Contacts\"].records.filter(\n        c => c.Cognito_ID === id\n      );\n      newList.push({\n        id: contacts[0].Id,\n        emailId: contacts[0].Email,\n        mobile: contacts[0].MobilePhone,\n        firstName: contacts[0].FirstName,\n        lastName: contacts[0].LastName,\n        language: getI18n().resolvedLanguage,\n        accountNumber: contacts[0].SK_IDs,\n        mailingStreet: contacts[0].MailingStreet,\n        mailingCity: contacts[0].MailingCity,\n        mailingState: contacts[0].MailingState,\n        mailingPostalCode: contacts[0].MailingPostalCode,\n        mailingCountry: contacts[0].MailingCountry,\n        contactId: contacts[0].Contact_ID,\n        accountId: contacts[0].AccountId,\n        recordTypeId: contacts[0].RecordTypeId\n      } as CustomerDataInterface);\n    } catch (e: any) {\n      console.debug(\"ERROR: transformCustomerList exception \", e);\n    }\n    return newList;\n  };\n\n  return (\n    <CustomerContext.Provider\n      value={{\n        loadingCustomer,\n        customerData,\n        mainCustomerData\n      }}\n    >\n      {props.children}\n    </CustomerContext.Provider>\n  );\n};\n\nexport const useCustomer = () => {\n  const context = React.useContext(CustomerContext);\n  return context;\n};\n"]},"metadata":{},"sourceType":"module"}