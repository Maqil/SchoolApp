{"ast":null,"code":"var _jsxFileName = \"/Users/mohamedmaqil/Desktop/RIVO/rivo-portal-ui/src/pages/Login/Login.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport { Alert } from \"@mui/material\";\nimport { makeValidate, makeRequired } from \"mui-rff\";\nimport { FORM_ERROR } from \"final-form\";\nimport { useTranslation } from \"react-i18next\";\nimport i18n from \"i18next\";\nimport { useLocation, useNavigate } from \"react-router-dom\";\nimport { LoginSchema } from \"../../schema/LoginSchema\";\nimport { useAuth } from \"../../providers/Auth\";\nimport VerificationCode from \"../../components/VerificationCode/VerificationCode\";\nimport NewPassword from \"../../components/NewPassword/NewPassword\";\nimport { TabTitle } from \"../../utils/GeneralFunctions\";\n/**\n * Uses the optional helper makeValidate function to format the error messages\n * into something usable by final form.\n */\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst validate = makeValidate(LoginSchema, error => {\n  return /*#__PURE__*/_jsxDEV(\"span\", {\n    className: \"error\",\n    children: i18n.t(error.message)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 42,\n    columnNumber: 10\n  }, this);\n});\n/**\n * Grabs all the required fields from the schema so that they can be passed into\n * the components without having to declare them in both the schema and the component.\n */\n\nconst required = makeRequired(LoginSchema);\n\nconst Login = () => {\n  _s();\n\n  const {\n    t\n  } = useTranslation();\n  const location = useLocation();\n  const navigate = useNavigate();\n  const state = location.state;\n  TabTitle(t(\"login.block1.header.page-title\"));\n  const {\n    signIn\n  } = useAuth();\n  const [submittedValues, setSubmittedValues] = useState(undefined);\n  const [showPassword, setShowPassword] = useState(false);\n  const [showConfirmation, setShowConfirmation] = useState(false);\n  const [showNewPassword, setShowNewPassword] = useState(false);\n  const [unloggedUser, setUnloggedUser] = useState({});\n  const [rememberEmail, setRememberEmail] = useState(localStorage.getItem(\"rememberEmail\") === \"true\" || false);\n  const [email, setEmail] = useState(localStorage.getItem(\"email\") || \"\");\n  const [password, setPassword] = useState(\"\");\n  const initialValues = {\n    email: email,\n    password: password,\n    rememberEmail: rememberEmail\n  };\n\n  const onChangeRememberMe = e => {\n    let value = e.target.checked;\n    setRememberEmail(value);\n  };\n\n  const onChangeEmail = value => {\n    setEmail(value);\n  };\n\n  const onChangePassword = value => {\n    setPassword(value);\n  };\n\n  const onSubmit = async values => {\n    setSubmittedValues(values); //handle rememberEmail\n\n    if (values.email !== \"\" && values.rememberEmail === true) {\n      localStorage.setItem(\"rememberEmail\", values.rememberEmail.toString());\n      localStorage.setItem(\"email\", values.email);\n    } else {\n      localStorage.setItem(\"rememberEmail\", \"false\");\n      localStorage.setItem(\"email\", \"\");\n    }\n\n    const usr = await signIn(values.email.toLowerCase(), values.password);\n\n    if (usr.status === \"FAIL\" || usr.error) {\n      return {\n        [FORM_ERROR]: \"login.block-form.loginError\"\n      };\n    } else if (usr.challengeName === \"SMS_MFA\" || usr.challengeName === \"SOFTWARE_TOKEN_MFA\" || usr.challengeName === \"CUSTOM_CHALLENGE\") {\n      setShowConfirmation(true);\n      setUnloggedUser(usr);\n    } else if (usr.challengeName === \"NEW_PASSWORD_REQUIRED\") {\n      setShowNewPassword(true);\n      setUnloggedUser(usr);\n    } else {\n      navigate(\"/shipments-dashboard\");\n    }\n  };\n\n  const handleMouseDownPassword = event => {\n    event.preventDefault();\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [state && state.showAlert && /*#__PURE__*/_jsxDEV(Alert, {\n      severity: state.severity === \"success\" ? \"success\" : state.severity === \"error\" ? \"error\" : state.severity === \"info\" ? \"info\" : \"warning\",\n      children: t(state.message)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 9\n    }, this), showConfirmation && Object.keys(unloggedUser).length > 0 && /*#__PURE__*/_jsxDEV(VerificationCode, {\n      user: unloggedUser\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 292,\n      columnNumber: 9\n    }, this), showNewPassword && Object.keys(unloggedUser).length > 0 && /*#__PURE__*/_jsxDEV(NewPassword, {\n      user: unloggedUser\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 295,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true);\n};\n\n_s(Login, \"X8FdqUam7KM4ySfrubpbx6qOukU=\", false, function () {\n  return [useTranslation, useLocation, useNavigate, useAuth];\n});\n\n_c = Login;\nexport default Login;\n\nvar _c;\n\n$RefreshReg$(_c, \"Login\");","map":{"version":3,"sources":["/Users/mohamedmaqil/Desktop/RIVO/rivo-portal-ui/src/pages/Login/Login.tsx"],"names":["React","useState","Alert","makeValidate","makeRequired","FORM_ERROR","useTranslation","i18n","useLocation","useNavigate","LoginSchema","useAuth","VerificationCode","NewPassword","TabTitle","validate","error","t","message","required","Login","location","navigate","state","signIn","submittedValues","setSubmittedValues","undefined","showPassword","setShowPassword","showConfirmation","setShowConfirmation","showNewPassword","setShowNewPassword","unloggedUser","setUnloggedUser","rememberEmail","setRememberEmail","localStorage","getItem","email","setEmail","password","setPassword","initialValues","onChangeRememberMe","e","value","target","checked","onChangeEmail","onChangePassword","onSubmit","values","setItem","toString","usr","toLowerCase","status","challengeName","handleMouseDownPassword","event","preventDefault","showAlert","severity","Object","keys","length"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport {\n  Alert,\n  Box,\n  Grid,\n  IconButton,\n  InputAdornment,\n  Typography\n} from \"@mui/material\";\nimport { makeValidate, makeRequired, showErrorOnBlur } from \"mui-rff\";\nimport { Form } from \"react-final-form\";\nimport { OnChange } from \"react-final-form-listeners\";\nimport { FORM_ERROR } from \"final-form\";\nimport { useTranslation } from \"react-i18next\";\nimport i18n from \"i18next\";\nimport { Visibility, VisibilityOff } from \"@mui/icons-material\";\nimport { Link, useLocation, useNavigate } from \"react-router-dom\";\nimport {\n  CheckBoxWrapper,\n  LoginBox,\n  LoginButton,\n  LoginErrorHelperText,\n  LoginHeader,\n  LoginLink,\n  LoginTextField\n} from \"../../components/LoginComponents/LoginComponents.style\";\n//We are using our own version of the Checkbox instead of mui-rff's version because we need to hook into the checked and onChange props.\n//This can removed this if this issue is ever addressed and fixed.\nimport { Checkboxes } from \"../../components/Mui/RivoMuiRffCheckbox\";\nimport { AlertStateInterface } from \"../../interfaces/AlertStateInterface\";\nimport { LoginSchema } from \"../../schema/LoginSchema\";\nimport { LoginInterface } from \"../../interfaces/LoginInterface\";\nimport { useAuth } from \"../../providers/Auth\";\nimport VerificationCode from \"../../components/VerificationCode/VerificationCode\";\nimport NewPassword from \"../../components/NewPassword/NewPassword\";\nimport { TabTitle } from \"../../utils/GeneralFunctions\";\n/**\n * Uses the optional helper makeValidate function to format the error messages\n * into something usable by final form.\n */\nconst validate = makeValidate(LoginSchema, error => {\n  return <span className=\"error\">{i18n.t(error.message)}</span>;\n});\n/**\n * Grabs all the required fields from the schema so that they can be passed into\n * the components without having to declare them in both the schema and the component.\n */\nconst required = makeRequired(LoginSchema);\n\nconst Login = () => {\n  const { t } = useTranslation();\n  const location = useLocation();\n  const navigate = useNavigate();\n  const state = location.state as AlertStateInterface;\n  TabTitle(t(\"login.block1.header.page-title\"));\n  const { signIn } = useAuth();\n  const [submittedValues, setSubmittedValues] = useState<\n    LoginInterface | undefined\n  >(undefined);\n\n  const [showPassword, setShowPassword] = useState(false);\n  const [showConfirmation, setShowConfirmation] = useState(false);\n  const [showNewPassword, setShowNewPassword] = useState(false);\n  const [unloggedUser, setUnloggedUser] = useState<any>({});\n  const [rememberEmail, setRememberEmail] = useState<boolean>(\n    localStorage.getItem(\"rememberEmail\") === \"true\" || false\n  );\n  const [email, setEmail] = useState(localStorage.getItem(\"email\") || \"\");\n  const [password, setPassword] = useState(\"\");\n\n  const initialValues: LoginInterface = {\n    email: email,\n    password: password,\n    rememberEmail: rememberEmail\n  };\n\n  const onChangeRememberMe = e => {\n    let value = e.target.checked;\n    setRememberEmail(value);\n  };\n\n  const onChangeEmail = value => {\n    setEmail(value);\n  };\n\n  const onChangePassword = value => {\n    setPassword(value);\n  };\n\n  const onSubmit = async (values: LoginInterface) => {\n    setSubmittedValues(values);\n    //handle rememberEmail\n    if (values.email !== \"\" && values.rememberEmail === true) {\n      localStorage.setItem(\"rememberEmail\", values.rememberEmail.toString());\n      localStorage.setItem(\"email\", values.email);\n    } else {\n      localStorage.setItem(\"rememberEmail\", \"false\");\n      localStorage.setItem(\"email\", \"\");\n    }\n\n    const usr: any = await signIn(values.email.toLowerCase(), values.password);\n    if (usr.status === \"FAIL\" || usr.error) {\n      return { [FORM_ERROR]: \"login.block-form.loginError\" };\n    } else if (\n      usr.challengeName === \"SMS_MFA\" ||\n      usr.challengeName === \"SOFTWARE_TOKEN_MFA\" ||\n      usr.challengeName === \"CUSTOM_CHALLENGE\"\n    ) {\n      setShowConfirmation(true);\n      setUnloggedUser(usr);\n    } else if (usr.challengeName === \"NEW_PASSWORD_REQUIRED\") {\n      setShowNewPassword(true);\n      setUnloggedUser(usr);\n    } else {\n      navigate(\"/shipments-dashboard\");\n    }\n  };\n\n  const handleMouseDownPassword = event => {\n    event.preventDefault();\n  };\n  return (\n    <>\n      {state && state.showAlert && (\n        <Alert\n          severity={\n            state.severity === \"success\"\n              ? \"success\"\n              : state.severity === \"error\"\n              ? \"error\"\n              : state.severity === \"info\"\n              ? \"info\"\n              : \"warning\"\n          }\n        >\n          {t(state.message)}\n        </Alert>\n      )}\n      {/* {!showConfirmation &&\n        !showNewPassword &&\n        Object.keys(unloggedUser).length === 0 && (\n          <LoginBox>\n            <Grid container sx={{ pt: 0 }}>\n              <Grid item xs={12} sm={6}>\n                <LoginHeader\n                  component=\"h1\"\n                  variant=\"display2\"\n                  color=\"fuchsiaAccessible.main\"\n                >\n                  {t(\"login.block1.header.page-title\")}\n                </LoginHeader>\n                <Typography component=\"p\" variant=\"lead\">\n                  {t(\"login.block1.header.short-intro\")}\n                </Typography>\n              </Grid>\n              <Grid item xs={12} sm={6}>\n                <Form\n                  onSubmit={onSubmit}\n                  initialValues={\n                    submittedValues ? submittedValues : initialValues\n                  }\n                  validate={validate}\n                  render={({ submitError, handleSubmit, submitting }) => (\n                    <form\n                      onSubmit={handleSubmit}\n                      //noValidate={true}\n                      autoComplete=\"new-password\"\n                    >\n                      <LoginTextField\n                        type=\"text\"\n                        required={required.email}\n                        label={t(\"login.block-form.input.email\")}\n                        id=\"email\"\n                        name=\"email\"\n                        variant=\"filled\"\n                        autoComplete=\"email\"\n                        InputProps={{ disableUnderline: true }}\n                        showError={showErrorOnBlur}\n                        value={email}\n                      />\n                      <OnChange name=\"email\">\n                        {value => {\n                          onChangeEmail(value);\n                        }}\n                      </OnChange>\n                      <LoginTextField\n                        required={required.password}\n                        type={showPassword ? \"text\" : \"password\"}\n                        label={t(\"login.block-form.input.password\")}\n                        id=\"password\"\n                        name=\"password\"\n                        variant=\"filled\"\n                        autoComplete=\"current-password\"\n                        showError={showErrorOnBlur}\n                        InputProps={{\n                          disableUnderline: true,\n                          endAdornment: (\n                            <InputAdornment position=\"end\">\n                              <IconButton\n                                aria-label={\n                                  showPassword\n                                    ? t(\"all.button.password-icon-show\")\n                                    : t(\"all.button.password-icon-hide\")\n                                }\n                                onClick={() => setShowPassword(!showPassword)}\n                                onMouseDown={handleMouseDownPassword}\n                                edge=\"end\"\n                                component=\"button\"\n                                disableRipple\n                              >\n                                {showPassword ? (\n                                  <VisibilityOff />\n                                ) : (\n                                  <Visibility />\n                                )}\n                              </IconButton>\n                            </InputAdornment>\n                          )\n                        }}\n                      />\n                      <OnChange name=\"password\">\n                        {value => {\n                          onChangePassword(value);\n                        }}\n                      </OnChange>\n                      <CheckBoxWrapper\n                        sx={{\n                          display: \"block\"\n                        }}\n                      >\n                        <Checkboxes\n                          required={required.rememberEmail}\n                          id=\"rememberEmail\"\n                          name=\"rememberEmail\"\n                          data={{\n                            label: t(\"login.block-form.input.checkbox\"),\n                            value: true,\n                            onChange: onChangeRememberMe,\n                            checked: rememberEmail\n                          }}\n                          disableRipple\n                        />\n                      </CheckBoxWrapper>\n                      {submitError && (\n                        <LoginErrorHelperText\n                          variant=\"filled\"\n                          filled\n                          required\n                          component=\"p\"\n                        >\n                          <span className=\"error\">{t(submitError)}</span>\n                        </LoginErrorHelperText>\n                      )}\n                      <LoginButton\n                        variant=\"contained\"\n                        type=\"submit\"\n                        disabled={submitting}\n                        size=\"large\"\n                        sx={{ mr: theme => theme.spacer_m }}\n                        disableElevation\n                      >\n                        {t(\"login.block-form.button.submit\")}\n                      </LoginButton>\n                      <LoginLink\n                        component={Link}\n                        to=\"/forgot-password\"\n                        variant=\"body1\"\n                        color=\"fuchsiaAccessible.main\"\n                      >\n                        {t(\"login.block-form.button.link\")}\n                      </LoginLink>\n                      <Box sx={{ my: theme => theme.spacer_l }}>\n                        <Typography\n                          component=\"p\"\n                          variant=\"h4\"\n                          sx={{ mb: theme => theme.spacer_m }}\n                        >\n                          {t(\"login.block2.text.account\")}\n                        </Typography>\n                        <Typography component=\"p\" variant=\"caption\">\n                          {t(\"login.block2.text.link\")}\n                        </Typography>\n                      </Box>\n                    </form>\n                  )}\n                />\n              </Grid>\n            </Grid>\n          </LoginBox>\n        )} */}\n      {showConfirmation && Object.keys(unloggedUser).length > 0 && (\n        <VerificationCode user={unloggedUser} />\n      )}\n      {showNewPassword && Object.keys(unloggedUser).length > 0 && (\n        <NewPassword user={unloggedUser} />\n      )}\n    </>\n  );\n};\n\nexport default Login;\n"]},"metadata":{},"sourceType":"module"}