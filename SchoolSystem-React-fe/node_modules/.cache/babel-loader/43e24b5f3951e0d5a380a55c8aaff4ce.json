{"ast":null,"code":"var _jsxFileName = \"/Users/mohamedmaqil/Desktop/RIVO/rivo-portal-ui/src/components/NewPassword/NewPassword.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport { Box, Grid, IconButton, InputAdornment, Typography } from \"@mui/material\";\nimport { makeValidate, makeRequired, showErrorOnBlur } from \"mui-rff\";\nimport { Form } from \"react-final-form\";\nimport { FORM_ERROR } from \"final-form\";\nimport { useNavigate } from \"react-router-dom\";\nimport PasswordChecklist from \"react-password-checklist\";\nimport { useTranslation } from \"react-i18next\";\nimport i18n from \"i18next\";\nimport { Visibility, VisibilityOff } from \"@mui/icons-material\";\nimport { LoginBox, LoginButton, LoginErrorHelperText, LoginHeader, LoginTextField } from \"../LoginComponents/LoginComponents.style\";\nimport { NewPasswordSchema } from \"../../schema/NewPasswordSchema\";\nimport { useApiError } from \"../../providers/ApiErrorProvider\";\nimport { useAuth } from \"../../providers/Auth\";\nimport VerificationCode from \"../VerificationCode/VerificationCode\";\nimport { TabTitle } from \"../../utils/GeneralFunctions\"; // import { useAuth } from \"../../providers/Auth\";\n\n/**\n * Uses the optional helper makeValidate function to format the error messages\n * into something usable by final form.\n */\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst validate = makeValidate(NewPasswordSchema, error => {\n  return /*#__PURE__*/_jsxDEV(\"span\", {\n    className: \"error\",\n    children: i18n.t(error.message)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 37,\n    columnNumber: 10\n  }, this);\n});\n/**\n * Grabs all the required fields from the schema so that they can be passed into\n * the components without having to declare them in both the schema and the component.\n */\n\nconst required = makeRequired(NewPasswordSchema);\n\nconst NewPassword = _ref => {\n  _s();\n\n  let {\n    user\n  } = _ref;\n  const apiError = useApiError();\n  const navigate = useNavigate();\n  console.log(apiError);\n  const {\n    t\n  } = useTranslation();\n  TabTitle(t(\"resetPassword.block1.header.page-title\"));\n  const {\n    completeNewPassword\n  } = useAuth();\n  const [submittedValues, setSubmittedValues] = useState(undefined);\n  const initialValues = {\n    newPassword: \"\",\n    confirmPassword: \"\"\n  };\n  const [showPassword, setShowPassword] = useState({\n    newPassword: false,\n    confirmPassword: false\n  });\n  const [showVerificationCode, setShowVerificationCode] = useState(false);\n\n  const onSubmit = async values => {\n    setSubmittedValues(values);\n    const data = await completeNewPassword(user, values.newPassword);\n    console.log(data);\n\n    if (data.status === \"FAIL\" || data.error) {\n      return {\n        [FORM_ERROR]: \"newPassword.block-form.newPasswordError\"\n      };\n    } else {\n      console.log(\"WHAT IS THIS\", user);\n\n      if (user.challengeName === \"SMS_MFA\") {\n        console.log(\"CUSTOM CHALLENGE\");\n        setShowVerificationCode(true);\n      } else {\n        console.log(\"LOGIN TO SHIPPMENTS DASHBOARD\");\n        navigate(\"/shipments-dashboard\");\n      }\n    }\n  };\n\n  const handleMouseDownPassword = event => {\n    event.preventDefault();\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [!showVerificationCode && /*#__PURE__*/_jsxDEV(LoginBox, {\n      children: /*#__PURE__*/_jsxDEV(Grid, {\n        container: true,\n        sx: {\n          pt: 0\n        },\n        children: [/*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          xs: 12,\n          sm: 6,\n          children: [/*#__PURE__*/_jsxDEV(LoginHeader, {\n            component: \"h1\",\n            variant: \"display2\",\n            color: \"fuchsiaAccessible.main\",\n            children: t(\"resetPassword.block1.header.page-title\")\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 98,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Typography, {\n            component: \"p\",\n            variant: \"lead\",\n            children: t(\"resetPassword.block1.header.short-intro\", {\n              email: user.challengeParam.CODE_DELIVERY_DESTINATION\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 105,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 97,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          xs: 12,\n          sm: 6,\n          children: /*#__PURE__*/_jsxDEV(Form, {\n            onSubmit: onSubmit,\n            initialValues: submittedValues ? submittedValues : initialValues,\n            validate: validate,\n            render: _ref2 => {\n              let {\n                submitError,\n                handleSubmit,\n                submitting,\n                values\n              } = _ref2;\n              return /*#__PURE__*/_jsxDEV(\"form\", {\n                onSubmit: handleSubmit,\n                autoComplete: \"new-password\",\n                children: [/*#__PURE__*/_jsxDEV(LoginTextField, {\n                  required: required.newPassword,\n                  type: showPassword && showPassword.newPassword ? \"text\" : \"password\",\n                  label: t(\"resetPassword.block-form.input.newPassword\"),\n                  id: \"newPassword\",\n                  name: \"newPassword\",\n                  variant: \"filled\",\n                  showError: () => {\n                    return;\n                  },\n                  InputProps: {\n                    disableUnderline: true,\n                    endAdornment: /*#__PURE__*/_jsxDEV(InputAdornment, {\n                      position: \"end\",\n                      children: /*#__PURE__*/_jsxDEV(IconButton, {\n                        \"aria-label\": showPassword && showPassword.newPassword ? t(\"all.button.password-icon-show\") : t(\"all.button.password-icon-hide\"),\n                        onClick: () => setShowPassword(prevState => ({ ...prevState,\n                          newPassword: !prevState.newPassword\n                        })),\n                        onMouseDown: handleMouseDownPassword,\n                        edge: \"end\",\n                        component: \"button\",\n                        disableRipple: true,\n                        children: showPassword && showPassword.newPassword ? /*#__PURE__*/_jsxDEV(VisibilityOff, {}, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 156,\n                          columnNumber: 33\n                        }, this) : /*#__PURE__*/_jsxDEV(Visibility, {}, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 158,\n                          columnNumber: 33\n                        }, this)\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 138,\n                        columnNumber: 29\n                      }, this)\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 137,\n                      columnNumber: 27\n                    }, this)\n                  }\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 120,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(Typography, {\n                  component: \"p\",\n                  variant: \"h4\",\n                  sx: {\n                    mb: theme => theme.spacer_n\n                  },\n                  children: [t(\"resetPassword.block-form.text.newPassword\"), \":\"]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 165,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(Box, {\n                  sx: {\n                    mb: theme => theme.spacer_n\n                  },\n                  children: /*#__PURE__*/_jsxDEV(PasswordChecklist, {\n                    rules: [\"minLength\", \"specialChar\", \"number\", \"capital\", \"lowercase\"],\n                    minLength: 12,\n                    value: values && values.newPassword ? values.newPassword : \"\",\n                    valueAgain: values && values.confirmPassword ? values.confirmPassword : \"\",\n                    invalidColor: \"#E10993\",\n                    validColor: \"#E10993\",\n                    messages: {\n                      minLength: t(\"resetPassword.block-form.error.password-characters-minimum\"),\n                      specialChar: t(\"resetPassword.block-form.error.password-special-character-minimum\"),\n                      number: t(\"resetPassword.block-form.error.password-number-minimum\"),\n                      capital: t(\"resetPassword.block-form.error.password-uppercase-minimum\"),\n                      lowercase: t(\"resetPassword.block-form.error.password-lowercase-minimum\")\n                    }\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 173,\n                    columnNumber: 23\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 172,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(LoginTextField, {\n                  required: required.confirmPassword,\n                  type: showPassword && showPassword.confirmPassword ? \"text\" : \"password\",\n                  label: t(\"resetPassword.block-form.input.confirmPassword\"),\n                  id: \"confirmPassword\",\n                  name: \"confirmPassword\",\n                  variant: \"filled\",\n                  showError: showErrorOnBlur,\n                  InputProps: {\n                    disableUnderline: true,\n                    endAdornment: /*#__PURE__*/_jsxDEV(InputAdornment, {\n                      position: \"end\",\n                      children: /*#__PURE__*/_jsxDEV(IconButton, {\n                        \"aria-label\": showPassword && showPassword.confirmPassword ? t(\"all.button.password-icon-show\") : t(\"all.button.password-icon-hide\"),\n                        onClick: () => setShowPassword(prevState => ({ ...prevState,\n                          confirmPassword: !prevState.confirmPassword\n                        })),\n                        onMouseDown: handleMouseDownPassword,\n                        edge: \"end\",\n                        component: \"button\",\n                        disableRipple: true,\n                        children: showPassword && showPassword.confirmPassword ? /*#__PURE__*/_jsxDEV(VisibilityOff, {}, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 247,\n                          columnNumber: 33\n                        }, this) : /*#__PURE__*/_jsxDEV(Visibility, {}, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 249,\n                          columnNumber: 33\n                        }, this)\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 229,\n                        columnNumber: 29\n                      }, this)\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 228,\n                      columnNumber: 27\n                    }, this)\n                  }\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 211,\n                  columnNumber: 21\n                }, this), submitError && /*#__PURE__*/_jsxDEV(LoginErrorHelperText, {\n                  variant: \"filled\",\n                  filled: true,\n                  required: true,\n                  component: \"p\",\n                  children: /*#__PURE__*/_jsxDEV(\"span\", {\n                    className: \"error\",\n                    children: t(submitError)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 263,\n                    columnNumber: 25\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 257,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(LoginButton, {\n                  variant: \"contained\",\n                  type: \"submit\",\n                  disabled: submitting,\n                  size: \"large\",\n                  sx: {\n                    mr: theme => theme.spacer_m\n                  },\n                  disableElevation: true,\n                  children: t(\"resetPassword.block-form.button.submit\")\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 266,\n                  columnNumber: 21\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 119,\n                columnNumber: 19\n              }, this);\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 112,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 111,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 9\n    }, this), showVerificationCode && /*#__PURE__*/_jsxDEV(VerificationCode, {\n      user: user\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 283,\n      columnNumber: 32\n    }, this)]\n  }, void 0, true);\n};\n\n_s(NewPassword, \"0nhc7t+EmUnsAewWwAPZylE+uao=\", false, function () {\n  return [useApiError, useNavigate, useTranslation, useAuth];\n});\n\n_c = NewPassword;\nexport default NewPassword;\n\nvar _c;\n\n$RefreshReg$(_c, \"NewPassword\");","map":{"version":3,"sources":["/Users/mohamedmaqil/Desktop/RIVO/rivo-portal-ui/src/components/NewPassword/NewPassword.tsx"],"names":["React","useState","Box","Grid","IconButton","InputAdornment","Typography","makeValidate","makeRequired","showErrorOnBlur","Form","FORM_ERROR","useNavigate","PasswordChecklist","useTranslation","i18n","Visibility","VisibilityOff","LoginBox","LoginButton","LoginErrorHelperText","LoginHeader","LoginTextField","NewPasswordSchema","useApiError","useAuth","VerificationCode","TabTitle","validate","error","t","message","required","NewPassword","user","apiError","navigate","console","log","completeNewPassword","submittedValues","setSubmittedValues","undefined","initialValues","newPassword","confirmPassword","showPassword","setShowPassword","showVerificationCode","setShowVerificationCode","onSubmit","values","data","status","challengeName","handleMouseDownPassword","event","preventDefault","pt","email","challengeParam","CODE_DELIVERY_DESTINATION","submitError","handleSubmit","submitting","disableUnderline","endAdornment","prevState","mb","theme","spacer_n","minLength","specialChar","number","capital","lowercase","mr","spacer_m"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport {\n  Box,\n  Grid,\n  IconButton,\n  InputAdornment,\n  Typography\n} from \"@mui/material\";\nimport { makeValidate, makeRequired, showErrorOnBlur } from \"mui-rff\";\nimport { Form } from \"react-final-form\";\nimport { FORM_ERROR } from \"final-form\";\nimport { useNavigate } from \"react-router-dom\";\nimport PasswordChecklist from \"react-password-checklist\";\nimport { useTranslation } from \"react-i18next\";\nimport i18n from \"i18next\";\nimport { Visibility, VisibilityOff } from \"@mui/icons-material\";\nimport {\n  LoginBox,\n  LoginButton,\n  LoginErrorHelperText,\n  LoginHeader,\n  LoginTextField\n} from \"../LoginComponents/LoginComponents.style\";\nimport { NewPasswordSchema } from \"../../schema/NewPasswordSchema\";\nimport { NewPasswordInterface } from \"../../interfaces/NewPasswordInterface\";\nimport { useApiError } from \"../../providers/ApiErrorProvider\";\nimport { useAuth } from \"../../providers/Auth\";\nimport VerificationCode from \"../VerificationCode/VerificationCode\";\nimport { TabTitle } from \"../../utils/GeneralFunctions\";\n// import { useAuth } from \"../../providers/Auth\";\n\n/**\n * Uses the optional helper makeValidate function to format the error messages\n * into something usable by final form.\n */\nconst validate = makeValidate(NewPasswordSchema, error => {\n  return <span className=\"error\">{i18n.t(error.message)}</span>;\n});\n/**\n * Grabs all the required fields from the schema so that they can be passed into\n * the components without having to declare them in both the schema and the component.\n */\nconst required = makeRequired(NewPasswordSchema);\n\nconst NewPassword = ({ user }) => {\n  const apiError = useApiError();\n  const navigate = useNavigate();\n  console.log(apiError);\n  const { t } = useTranslation();\n  TabTitle(t(\"resetPassword.block1.header.page-title\"));\n  const { completeNewPassword } = useAuth();\n\n  const [submittedValues, setSubmittedValues] = useState<\n    NewPasswordInterface | undefined\n  >(undefined);\n\n  const initialValues: NewPasswordInterface = {\n    newPassword: \"\",\n    confirmPassword: \"\"\n  };\n\n  const [showPassword, setShowPassword] = useState({\n    newPassword: false,\n    confirmPassword: false\n  });\n\n  const [showVerificationCode, setShowVerificationCode] = useState(false);\n\n  const onSubmit = async (values: NewPasswordInterface) => {\n    setSubmittedValues(values);\n\n    const data: any = await completeNewPassword(user, values.newPassword);\n    console.log(data);\n    if (data.status === \"FAIL\" || data.error) {\n      return { [FORM_ERROR]: \"newPassword.block-form.newPasswordError\" };\n    } else {\n      console.log(\"WHAT IS THIS\", user);\n      if (user.challengeName === \"SMS_MFA\") {\n        console.log(\"CUSTOM CHALLENGE\");\n        setShowVerificationCode(true);\n      } else {\n        console.log(\"LOGIN TO SHIPPMENTS DASHBOARD\");\n        navigate(\"/shipments-dashboard\");\n      }\n    }\n  };\n\n  const handleMouseDownPassword = event => {\n    event.preventDefault();\n  };\n\n  return (\n    <>\n      {!showVerificationCode && (\n        <LoginBox>\n          <Grid container sx={{ pt: 0 }}>\n            <Grid item xs={12} sm={6}>\n              <LoginHeader\n                component=\"h1\"\n                variant=\"display2\"\n                color=\"fuchsiaAccessible.main\"\n              >\n                {t(\"resetPassword.block1.header.page-title\")}\n              </LoginHeader>\n              <Typography component=\"p\" variant=\"lead\">\n                {t(\"resetPassword.block1.header.short-intro\", {\n                  email: user.challengeParam.CODE_DELIVERY_DESTINATION\n                })}\n              </Typography>\n            </Grid>\n            <Grid item xs={12} sm={6}>\n              <Form\n                onSubmit={onSubmit}\n                initialValues={\n                  submittedValues ? submittedValues : initialValues\n                }\n                validate={validate}\n                render={({ submitError, handleSubmit, submitting, values }) => (\n                  <form onSubmit={handleSubmit} autoComplete=\"new-password\">\n                    <LoginTextField\n                      required={required.newPassword}\n                      type={\n                        showPassword && showPassword.newPassword\n                          ? \"text\"\n                          : \"password\"\n                      }\n                      label={t(\"resetPassword.block-form.input.newPassword\")}\n                      id=\"newPassword\"\n                      name=\"newPassword\"\n                      variant=\"filled\"\n                      showError={() => {\n                        return;\n                      }}\n                      InputProps={{\n                        disableUnderline: true,\n                        endAdornment: (\n                          <InputAdornment position=\"end\">\n                            <IconButton\n                              aria-label={\n                                showPassword && showPassword.newPassword\n                                  ? t(\"all.button.password-icon-show\")\n                                  : t(\"all.button.password-icon-hide\")\n                              }\n                              onClick={() =>\n                                setShowPassword(prevState => ({\n                                  ...prevState,\n                                  newPassword: !prevState.newPassword\n                                }))\n                              }\n                              onMouseDown={handleMouseDownPassword}\n                              edge=\"end\"\n                              component=\"button\"\n                              disableRipple\n                            >\n                              {showPassword && showPassword.newPassword ? (\n                                <VisibilityOff />\n                              ) : (\n                                <Visibility />\n                              )}\n                            </IconButton>\n                          </InputAdornment>\n                        )\n                      }}\n                    />\n                    <Typography\n                      component=\"p\"\n                      variant=\"h4\"\n                      sx={{ mb: theme => theme.spacer_n }}\n                    >\n                      {t(\"resetPassword.block-form.text.newPassword\")}:\n                    </Typography>\n                    <Box sx={{ mb: theme => theme.spacer_n }}>\n                      <PasswordChecklist\n                        rules={[\n                          \"minLength\",\n                          \"specialChar\",\n                          \"number\",\n                          \"capital\",\n                          \"lowercase\"\n                        ]}\n                        minLength={12}\n                        value={\n                          values && values.newPassword ? values.newPassword : \"\"\n                        }\n                        valueAgain={\n                          values && values.confirmPassword\n                            ? values.confirmPassword\n                            : \"\"\n                        }\n                        invalidColor=\"#E10993\"\n                        validColor=\"#E10993\"\n                        messages={{\n                          minLength: t(\n                            \"resetPassword.block-form.error.password-characters-minimum\"\n                          ),\n                          specialChar: t(\n                            \"resetPassword.block-form.error.password-special-character-minimum\"\n                          ),\n                          number: t(\n                            \"resetPassword.block-form.error.password-number-minimum\"\n                          ),\n                          capital: t(\n                            \"resetPassword.block-form.error.password-uppercase-minimum\"\n                          ),\n                          lowercase: t(\n                            \"resetPassword.block-form.error.password-lowercase-minimum\"\n                          )\n                        }}\n                      />\n                    </Box>\n                    <LoginTextField\n                      required={required.confirmPassword}\n                      type={\n                        showPassword && showPassword.confirmPassword\n                          ? \"text\"\n                          : \"password\"\n                      }\n                      label={t(\n                        \"resetPassword.block-form.input.confirmPassword\"\n                      )}\n                      id=\"confirmPassword\"\n                      name=\"confirmPassword\"\n                      variant=\"filled\"\n                      showError={showErrorOnBlur}\n                      InputProps={{\n                        disableUnderline: true,\n                        endAdornment: (\n                          <InputAdornment position=\"end\">\n                            <IconButton\n                              aria-label={\n                                showPassword && showPassword.confirmPassword\n                                  ? t(\"all.button.password-icon-show\")\n                                  : t(\"all.button.password-icon-hide\")\n                              }\n                              onClick={() =>\n                                setShowPassword(prevState => ({\n                                  ...prevState,\n                                  confirmPassword: !prevState.confirmPassword\n                                }))\n                              }\n                              onMouseDown={handleMouseDownPassword}\n                              edge=\"end\"\n                              component=\"button\"\n                              disableRipple\n                            >\n                              {showPassword && showPassword.confirmPassword ? (\n                                <VisibilityOff />\n                              ) : (\n                                <Visibility />\n                              )}\n                            </IconButton>\n                          </InputAdornment>\n                        )\n                      }}\n                    />\n                    {submitError && (\n                      <LoginErrorHelperText\n                        variant=\"filled\"\n                        filled\n                        required\n                        component=\"p\"\n                      >\n                        <span className=\"error\">{t(submitError)}</span>\n                      </LoginErrorHelperText>\n                    )}\n                    <LoginButton\n                      variant=\"contained\"\n                      type=\"submit\"\n                      disabled={submitting}\n                      size=\"large\"\n                      sx={{ mr: theme => theme.spacer_m }}\n                      disableElevation\n                    >\n                      {t(\"resetPassword.block-form.button.submit\")}\n                    </LoginButton>\n                  </form>\n                )}\n              />\n            </Grid>\n          </Grid>\n        </LoginBox>\n      )}\n      {showVerificationCode && <VerificationCode user={user} />}\n    </>\n  );\n};\n\nexport default NewPassword;\n"]},"metadata":{},"sourceType":"module"}